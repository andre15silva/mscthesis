{
    "Codec-3": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (contains(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (contains(value, index + 1, 3, \"C\", \"K\", \"Q\") &&",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (contains(value, index + 1, 1, \"CI\", \"CE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (contains(value, index + 1, 1, \"CI\", \"CE\", \"CI\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&CIA\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (contains(value, index + 1, 3, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 2, \"CI\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (contains(value, index + 1, 1, \"CI\", \"CE\", \"CY\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (contains(value, index + 1, 3, \"CI\", \"CE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && (!contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (contains(value, index + 1, 3, \"C\", \"K\", \"Q\") && !contains(value, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && charAt(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && has(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 3, \"CIO\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value.charAt(index)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b.contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \" C\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (contains(value, index + 1, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (contains(value, index + 1, 3, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && charAt(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && (!contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bindex == 'J'\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && // very confusing, moved out.charAt(index)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bindex == 'S') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !init>\".equals(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (contains(value, index + 1, 1, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CIO\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (contains(value, index + 1, 3, \"CI\", \"CE\", \"CY\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b64variant.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && (!contains(value, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && // very confusing, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&Recycler.contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && isVowel(value, result, index, 3, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value))) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && buf.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&log(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b64variant.contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && isVowel(value, result, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && // very confusing, moved out.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && isVowel(value, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (contains(value, index + 1, 3, \"C\", \"K\", \"Q\") &&CIA\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && isVowel(value, 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && hasCoordinate(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && dt\".equals(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CAESAR\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !empty\".equals(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value.index)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && isVowel(value, result, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b.contains(value, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && fieldType.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index, 6, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"CI\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index, 3, \"CIO\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index,Frame)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \"<init>\".equals(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && text.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 2, \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"WICZ\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && // very confusing, moved out",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&CI.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b.contains(value))) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&ination\".equals(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !Double.contains(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bindex == 'X') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"Exp\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b.contains(value, index, 6, \"CIO\", \"CIE\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (contains(value, index + 1, 3, \"C\", \"K\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index + 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&missing\", \"CIA\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bour\".equals(value, index, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !isDigit(value, index, 6, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && has(value, index, 2, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && value.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !b', \"CIA\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 3, \"C\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value.charAt(index - 1, 3, \"CIA\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index, 6, \"C')) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && hasLength\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !bindex == 'S', 'X') {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (contains(value, index + 1, 4, \"IER\")) {",
        "fixed_line": "} else if (contains(value, index + 1, 3, \"IER\")) {"
    },
    "Closure-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fnType.isConstructor() || fnType.isInterface()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (fnType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (fnType.isUnknownType()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (fnType.isUnknownType() || fnType.isInterface()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (fnType.isConstructor() || type.isInterface()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(scope)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (fnType.isConstructor() || fnType.isExtern()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (fnType.hasProperty(fnType)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isUnknownType()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fnType.isConstructor() || fnType.hasProperty(fnType)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fnType.isConstructor() || isInterface()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (fnType.isConstructor() || slotType.isInterface()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (fnType.isConstructor() || parentType.isInterface()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (fnType.isUnknownType() || fnType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (scope.isGetProp(fnType) && !fnType.canAssignTo(fnType)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(paramType)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fnType.isConstructor() || fnType.isNoType()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (scope.isGetProp(fnType) && fnType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (scope.isGetProp(fnType) && isType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fnType.isConstructor() && fnType.isInterface()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(getJSType())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(nType)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (fnType.isConstructor() || resultType.isInterface()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isFunctionType(n.getJSType())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isThisType(n.getJSType())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isFunctionType()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (fnType.isConstructor() || thisType.isInterface()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fnType.isConstructor() || fnType.isGetProp(getJSType())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fnType.isGetProp(getJSType())) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fnType.isConstructor() || fnType.isVoidType()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isThisType()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fnType.isConstructor() || fnType.is seriesType()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fnType.isConstructor() || fnType.isNone()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fnType.isUnknownType() || fnType.canAssignTo(scope)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (fnType.isConstructor() || fnType.isTemplateType()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( fnType.isConstructor() || fnType.isInterface()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isThisType(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(fnType)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (scope.isGlobal() && !fnType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fnType.isConstructor() || functionType.isInterface()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (scope.isGetProp(t, nType)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isThisType(fnType)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (fnType.isConstructor() || !fnType.isInterface()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (fnType.isConstructor() || fnType.isGetProp(scope)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isInterface()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isNoType()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isThisType(nType)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (fnType.isGetProp(t, nType)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fnType.isUnknownType() || fnType.isExtern()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (scope.isGetProp(fnType) && constructorType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (fnType.canAssignTo(scope)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isFunctionType(fnType)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (fnType.isConstructor() || fnType.hasProperty(getJSType())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (fnType.isConstructor() || fnType.hasProperty(nType)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (fnType.isUnknownType() || fnType.isGetProp(getJSType())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (fnType.isGetProp(scope)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isFunctionType(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (scope.isGlobal() && !fnName.isEmpty()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fnType.isUnknownType() || fnType.isNoType()) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (fnType.hasProperty(get)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (fnType.hasProperty(getJSType())) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fnType != null && fnType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fnType.isConstructor() || fnType.isSuperType()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (fnType.isConstructor() || outType.isInterface()) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (fnType.isConstructor() || fnType.isPropertyType()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isUnknownType(nType)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fnType.isConstructor() || thatType.isInterface()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fnType.isConstructor() || getJSType.isInterface()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isExported(fnType)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (scope.isGetProp(fnType) && ModifierType.isConstructor()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fnType.hasEnumParameterType()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(leftType)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fnType.isConstructor() || tType.isInterface()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(args[T\".equals(fnType)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fnType.isConstructor() || getNativeType.isInterface()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (fnType.isConstructor() || fnType.hasProperty(scope)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (fnType.isConstructor() || type.canAssignTo(fnType)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fnType.isConstructor() ||functionType.isInterface()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isTemplateType()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fnType.isConstructor() || capType.isInterface()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fnType.isConstructor() || fnType.isQualifiedName()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (fnType.isUnknownType() || fnType.isEmptyType()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isDeclared(n.getJSType())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fnType.canAssignTo(fnType)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isThisType( fnType)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (fnType.isConstructor() || fnType.isGetProp(nType)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fnType.isConstructor() || type.canAssignTo(scope)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (scope.isGetProp(fnType) && NodeUtil.isFunctionType(nType)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fnType.isUnknownType() || fnType.isGetProp(nType)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (fnType.isUnionType()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(lhsType)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isSubtype(fnType)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (fnType.isConstructor() || fnType.canAssignTo(20Type)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (scope.isGetProp(fnType) && !fnType.isDeclared(fnType)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fnType.isConstructor() || argsType.isInterface()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fnType.isUnknownType() || fnType.isTemplateType()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (scope.isGetProp(fnType) || fnType.isInterface()) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fnType != null) {",
        "fixed_line": "if (fnType != null && fnType.hasInstanceType()) {"
    },
    "Gson-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Double.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (!Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Double.isNumeric(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value))) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if(Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < 0.0)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue()))) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(out.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() == false) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.toString()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue()))) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (StringUtils.isNumeric(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(peek())) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MIN_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() || value.doubleValue() < 0.0)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (NumberInput.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Float.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (value < Double.MIN_VALUE || value > Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() == 0.0)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || Double.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (DoubleUtils.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() || value.doubleValue() == false) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (!(Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.getClass()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Double.isNaN(key) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!Double.isInfinite(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() || value.doubleValue()))) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.toString()) || value.doubleValue() < 0.0)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(ob.getClass()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(v)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() - 1) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue()) || value.doubleValue() < 0.0)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(string)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(before)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Double.isNaN(value)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (doubleValue() < Double.MIN_VALUE || value.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Boolean.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MIN_VALUE) || Double.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(out.doubleValue()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue()) || value.doubleValue() < 0.0)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Integer.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(bit)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue()))) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(out.doubleValue()))) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.getClass())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.toString()) || value.doubleValue() == false) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.getClass().isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.toString()) || value.floatValue() == false) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (StringUtils.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || this.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this. 55TickValue() || value.doubleValue() == false) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Double.isTrue(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Double.isNaN(value) || Float.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < TableInfo.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.maxValue)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MAX_VALUE) || this.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() || value.getClass().isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Double.isStatic(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Double.isNaN(value) || Long.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || this.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(answer.getClass())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value < Double.MIN_VALUE || value > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MAX_VALUE) || Double.MIN_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || Double.isInfinite(value))) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.getClass()))) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Double.parseDouble(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue()) || value.doubleValue() == false) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MAX_VALUE) || Double.MIN_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this. 55Long.toString()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || Long.MAX_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(out.doubleValue() || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this. 55TickValue()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MIN_VALUE) || Double.MAX_VALUE) || this.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.labelName)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MAX_VALUE) || Double.isInfinite(value))) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MAX_VALUE) || this.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this. 55hasNext()) || value.doubleValue() == false) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < TableInfo.MIN_VALUE) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MAX_VALUE) || \"INF\".equals(value)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this. 55Value()) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue() || value.doubleValue() == 0.0)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Long.MIN_VALUE) || Double.isInfinite(value))) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() < Byte.MAX_VALUE) || \"INF\".equals(value)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this. 55Utils.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Double.isNaN(value) || Double.isInfinite( MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(result))) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Double.isInfinity(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.doubleValue()) || Double.isInfinite(value))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(this.floatValue() || value.doubleValue() * this.doubleValue()) || Double.isInfinite(value)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
        "fixed_line": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {"
    },
    "Closure-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "cfa.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cfa.parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cfa.getLineno(), finallyNode.getLastChild());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cfa.getLastChild() == node){",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cfa.getLastChild() == finallyNode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cfa.getLastChild(), finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cfa.getGrandparent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cfa.createNode(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cfa.getLastChild() == finallyNode;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cfa.getLastChild() finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cfa.getLineno(), finallyNode.getCharno());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cfa.createNode(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cfa.getLastChild() - finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cfa.getLastChild().UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cfa.getcurNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cfa.renameMap.put(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cfa.popEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cfa. licEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cfa.getCfg() != finallyNode.getLastChild()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cfa.getLastChild() : finallyNode;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cfa.annotation(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cfa.getValue(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cfa.getLineno(), finallyNode.getLastChild().detachFromParent()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cfa.tooNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cfa.getGrandparent(), finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() : finallyNode;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cfa. capEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cfa.connectIfLocal(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cfa.checkState(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cfa.getLastChild() == Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cfa. doEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cfa. signedEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cfa. signedEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cfa.registerEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cfa.TRY, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cfa.createNode(parent, node, finallyNode);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cfa.getCfg() != finallyNode.getLastChild();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + 1) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cfa. getItemEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cfa.getLastChild().getString(), finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cfa.getCfg() != finallyNode;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cfa.getCfg() != finallyNode.getLastChild()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cfa.getCfg() != finallyNode.getLastChild());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cfa.getEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cfa.INSTANCE, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cfa.getLineno(), finallyNode.getLastChild().getCharno());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cfa.Middle(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cfa.getLineno(), finallyNode.getLastChild()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cfa.getLastChild(), finallyNode, parent);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cfa.getJSDocInfo(), finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() == node) ? finallyNode : finallyNode;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cfa.getLastChild() != finallyNode;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cfa.createChild(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cfa.createNode(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cfa.Taints(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cfa.iNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cfa.args[parent.getLastChild()] = finallyNode;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cfa.annotation(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cfa.getLastChild() / Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + !NodeUtil.hasFinally(parent)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cfa.getJSDocInfo() : finallyNode.getFinally(parent);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + aNode);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cfa.args[parent.getLastChild()++] = finallyNode;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cfa. grandparent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cfa.getLastChild() : finallyNode.getFinally(parent);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() == node){",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cfa. Month(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cfa. getLabelNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cfa.args[parent.getLastChild() - 1].parent = finallyNode;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cfa.getFirstChild() != finallyNode;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cfa.getLineno(), finallyNode.getLastChild().detachFromParent()));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + 1)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cfa.getLastChild().cloneTree() + finallyNode.getLineno(), finallyNode);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cfa.connectIfLocal(fromNode, parent, finallyNode);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cfa.input, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + NodeUtil.getCharno());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cfa. checks, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cfa.getJSDocInfo(parent.getFirstChild()).Node, finallyNode);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cfa.HaveSideEffects(transformNode.getFirstChild(), finallyNode, finallyNode);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cfa.getLastChild() - finallyNode.getLineno(), finallyNode);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cfa.getLineno(), finallyNode.getLastChild().detachFromParent());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cfa.getValue(cfNode, finallyNode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cfa.types, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cfa.getLastChild().cloneTree() + finallyNode.getLastChild();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cfa.replaceChild(parent, finallyNode);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cfa.getLastChild().detachFromParent(), finallyNode);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cfa.getLastChild() finallyNode = finallyNode.getFinally(parent, parent);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cfa.getLastChild() : finallyNode.getFinally(parent, parent);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cfa.*/, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() + methodNode.getLastChild());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cfa.args[parent.getLastChild()], finallyNode);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cfa.getCfg() : finallyNode.getLastChild();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cfa.getLineno(), finallyNode.getLastChild().getNext());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cfa.getLineno(), finallyNode.getLastChild() == node);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cfa.args[parent.getLastChild() == node){",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cfa.mode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cfa.getJSDocInfo(parent.getFirstChild() - finallyNode);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cfa. pointer, Branch.UNCOND, finallyNode);",
                "identical": false
            }
        ],
        "buggy_line": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
        "fixed_line": "cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
    },
    "Jsoup-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return accum.toString();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString().trim();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), index);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return accum.toString() + (accum == null ? String.valueOf(lower) : accum.toString();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return accum.toString() + (accum == null ? null : accum.toString()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return accum.toString() + (accum == null ? JsonNull.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString().trim());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()) + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString().trim()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return accum.toString() + (accum == null ? JsonNull.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return accum.toString() + (accum == null ? attributes.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return accum.toString() + (accum == null ? NO_LINE_LENGTH : accum.toString()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return accum.toString() + (accum == null ? \"[null]\" : accum.toString()));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()).trim();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return accum.toString() + (accum == null ? null : accum.toString().trim()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return accum.toString() + (accum == null ? null : accum.toString());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString()).trim();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return accum.toString() + (accum == null ? JsonNull.toString() : accum.toString();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), in.toString());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), 1) : accum.toString();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return accum.toString() + (accum == null ? NO_LINE_LENGTH : accum.toString());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString().trim());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return accum.toString() + (accum == null ? Collections.EMPTY_LIST : accum.toString()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return accum.toString() + (accum == null ? attr.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString()) + 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()+\"'\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return accum.toString() + (accum == null ? \"[null]\" : accum.toString());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return accum.toString() + (accum * Comparable == null ? \"null\" : accum.toString();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return accum.toString() + (accum == null ?preter.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return accum.toString() + (accum == null ?preter.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return accum.toString() + (accum == null ? Collections.EMPTY_LIST : accum.toString());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return accum.toString() + (accum == null ? null : accum.toString().trim());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString()), index);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return accum.toString() + (accum * Comparable == null ? \"null\" : accum.toString().trim();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return accum.toString() + (accum == null ? attr.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return accum.toString() + (accum == null ? JsonNull.toString() : accum.toString().trim();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), step.toString();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toStringTree());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return accum.toString() + (accum == null ? attributes.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return accum.toString() + (accum == null ? attributes.length() : accum.toString());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), in.toString();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString().trim()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return accum.toString() + (accum == null ?erializer.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return accum.toString() + (accum == null ?getContent.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString().trim();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return accum.toString() + (accum == null ? \"[null\" : accum.toString()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return accum.toString() + (accum == null ?tooltips : accum.toString());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return accum.toString() + (accum == null) ? null : accum.toString();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return accum.toString() + (accum == null ? Boolean.TRUE : accum.toString()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()) + in.toString();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return accum.toString() + (accum == null ? \"[null\" : accum.toString());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return accum.toString() + (accum == null ? JsonNull.toString() : accum.toString()) + 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return accum.toString() + (accum == null ?getContent.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return accum.toString() + (accum == null ? EMPTY : accum.toString()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()+\"') );",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return accum.toString() + (accum == null ? NO_IMATE : accum.toString()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return accum.toString() + (accum == null ? \"\" : accum.toString();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return accum.toString() + (accum == null ? GeneralPath : accum.toString());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), html(lower);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return accum.toString() + (accum * Comparable == null ? \"null\" : accum.toString());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return accum.toString() + (accum == null ? 16 : accum.toString()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return accum.toString() + (accum == null ? \"html\" : accum.toString());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return accum.toString() + (accum == null ? GeneralPath : accum.toString()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toStringTree()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return accum.toString() + (accum == null ? Boolean.TRUE : accum.toString());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return accum.toString() + (accum == null ? null : accum.toString()).trim();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return accum.toString() + (accum == null ? Complex.DEFAULT : accum.toString());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return accum.toString() + (accum == null ?erializer.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()+\"): \"+iae.toString());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()+\"): \" + accum.toString();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return accum.toString() + (accum == null ? NO_MATCH : accum.toString()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), step.toString());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return accum.toString() + (accum == null ? NO_LINE_LENGTH : accum.toString();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return accum.toString() + (accum == null ? \"this\" : accum.toString());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return accum.toString() + (accum == null ?64_VALUE_INVALID : accum.toString()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()),border;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), attr.toString());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return accum.toString() + (accum == null ? Check.toString() : accum.toString()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), html(accum);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), html(html);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()), step);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return accum.toString() + (accum == null ? NO_LINE_LENGTH : accum.toString()) + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return accum.toString() + (accum * Comparable == null ? \"null\" : accum.toString()), index);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return accum.toString() + (accum == null ? \"null\" : accum.toString()+\"): \" + accum.toString());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return accum.toString() + (accum == null ? NO_LINE_LENGTH : accum.toString().trim();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return accum.toString() + (accum == null ? Check.toString() : accum.toString());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return accum.toString() + (accum == null ?tooltips : accum.toString()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return accum.toString() + (accum == null ?64_VALUE_INVALID : accum.toString());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return accum.toString() + (accum == null ? 16 : accum.toString());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return accum.toString() + (accum * Comparable == null ? \"null\" : accum.toString()) + accum;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return accum.toString() + (accum == null ? Complex.DEFAULT : accum.toString()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return accum.toString() + (accum == null ? wrapped : accum.toString());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return accum.toString() + (accum == null ? JsonNull.toString() : accum.toString().trim());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return accum.toString() + (accum == null ? -1 : accum.toString()));",
                "identical": false
            }
        ],
        "buggy_line": "return accum.toString().trim();",
        "fixed_line": "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();"
    },
    "Csv-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_ = new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_ = new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.get(columnMap);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap = new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap = new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.get(columnMap);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) != null ? this.headerMap : new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_METHOD_NAMES);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) != null ? this.headerMap : new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SLOT_NAME, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.trimMap.get(columnMap);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.class);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_GAP_YEAR, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_ >= values.length) ? null : new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new LinkedHashMap<String, Integer>(columnMap.values().length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_PROTOTYPE_MEMBER_DEL, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_ >= values.length) ? null : new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap == null ? null : this.headerMap);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.new HashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_new HashMap<String, Integer>(columnMap));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.new HashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values.length);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.new HashMap<String, Integer>>();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet().iterator();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.new HashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.new HashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet()) : new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.trimMap.new HashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet()) : columnMap;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_ = new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new LinkedHashMap<String, Integer>(columnMap.values());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.get(columnMap_ = new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_IN_MINUTE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newLinkedHashMap(columnMap.class);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.new HashMap<String, Integer>>();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_cost_NAME, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CONSTANT_NAME, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet()) : header;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_pieces, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.map[columnMap.values().length];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.get(columnMap_ = new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newNode(columnMap);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.trimMap.new HashMap<String, Integer>>();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.trim());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values[columnMap.size()]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_ >= values.length) ? null : this.headerMap;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_THREAD_CALLBACKS);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap + 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_MAP_PUT, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_GAP_YEAR, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet().length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new LinkedHashMap<String, Integer>(this.blockMap);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.trimMap.new HashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_annotations, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_PROTOTYPE_DEL, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.trimMap.newHashMap(columnMap.class);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.get(columnMap_ = new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values[columnMap.length];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap. getCauseMap.get(columnMap);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_ >= values.length) ? null : this.headerMap.get(columnMap);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newLinkedHashMap(columnMap);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet(), columnMap);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.map[columnMap.values.length];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.trim(), columnMap);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_PROTOTYPE_MEMBER_DESERIALIZER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet()) : new LinkedHashMap<String, Integer>(columnMap);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.newHashMap(columnMap.class);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_OUT_OF_NAME, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_ --this.valuesMap);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.values[columnMap.new HashMap<String, Integer>>();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values[columnMap.class);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.Arrays.asList(columnMap));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.copyOf(columnMap);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_ = new LinkedHashMap<String, Integer>(columnMap.values().length);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.values[columnMap.new HashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.Arrays.copyOf(columnMap);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values().length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) + 1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_new HashMap<String, Integer>(columnMap), this.headerMap);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.map[columnMap.values().length);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.newHashMap(columnMap.values.class);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_PROTOTYPE_MEMBER_DELTA);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySetMap.get(columnMap);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.entrySet()) + 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.newHashMap(columnMap);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.equals(columnMap);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.createCollection(columnMap);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_CAUSE_PROTOTYPE_MEMBER_DEL);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_SET_ = new LinkedHashMap<String, Integer>();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.parse(columnMap);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.valuesMap.get(rowMap);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap_i.values().length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap) == null ? null : this.headerMap.map[columnMap.values().length;",
                "identical": false
            }
        ],
        "buggy_line": "return new LinkedHashMap<String, Integer>(this.headerMap);",
        "fixed_line": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);"
    },
    "Cli-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "nextLineTabStop = pos - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "nextLineTabStop = pos + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "nextLineTabStop = createPadding(nextLineTabStop);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "nextLineTabStop = maxLine - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "nextLineTabStop = attr.substring(pos + 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "nextLineTabStop = createPadding(text.substring(pos++), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "nextLineTabStop = pos + width;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "nextLineTabStop = createPadding(text.substring(pos), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + 1, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "nextLineTabStop = maxLine;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "nextLineTabStop = Integer.parseInt(text);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "nextLineTabStop = createPadding(text);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + 1));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "nextLineTabStop = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "nextLineTabStop = pos;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "nextLineTabStop = n.substring(pos + 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "nextLineTabStop = createPadding(text.length() - 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "nextLineTabStop = n.substring(pos + width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "nextLineTabStop = Integer.MAX_VALUE - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + offset, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "nextLineTabStop = new String(text.substring(pos + 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "nextLineTabStop = attr.substring(pos + width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "nextLineTabStop = header.length - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + offset, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos + 1));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "nextLineTabStop = endLine + 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos++), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "nextLineTabStop = new String(text.substring(pos + 1));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "nextLineTabStop = new String(text.substring(pos++), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "nextLineTabStop = new String(text.substring(pos + width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "nextLineTabStop = attr.substring(pos - 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "nextLineTabStop = createPadding(text.substring(pos++));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "nextLineTabStop = new String(text.substring(pos), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos + 1, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos + 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "nextLineTabStop = createPadding(text.substring(pos - 1, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "nextLineTabStop = static final int pos + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "nextLineTabStop = createPadding(text.length() - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos + width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "nextLineTabStop = attr.substring(pos + 1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nextLineTabStop = attr.substring(pos, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "nextLineTabStop = createPadding(text.substring(pos, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "nextLineTabStop = padding + width;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + width), nextLineTabStop);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + bad), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + offset));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + directory), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + width));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + 1, width / 2);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "nextLineTabStop = attr.substring(pos);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "nextLineTabStop = n.substring(pos - 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "nextLineTabStop = padding.length - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "nextLineTabStop = new String(text.substring(pos + 1, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "nextLineTabStop = new String(text.substring(pos - 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "nextLineTabStop = signature.length();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "nextLineTabStop = new String(text, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "nextLineTabStop = bs.length();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "nextLineTabStop = Sets.length - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "nextLineTabStop = fieldType.length - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "nextLineTabStop = canNewLine + 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "nextLineTabStop = cls.getPadding();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "nextLineTabStop = new String(textBuffer, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "nextLineTabStop = attr.substring(pos++i + 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "nextLineTabStop = nodes.length - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "nextLineTabStop = sb.length();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "nextLineTabStop = padding.length();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "nextLineTabStop = createPadding(text.substring(pos++), gen, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "nextLineTabStop = createPadding(text, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + line, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "nextLineTabStop = new String(text.substring(pos + width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "nextLineTabStop =header.length - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "nextLineTabStop = new String(text);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "nextLineTabStop = createPadding(text.substring(pos - 1, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "nextLineTabStop = attr.substring(pos++), width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "nextLineTabStop = end - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "nextLineTabStop = code.length();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "nextLineTabStop = attr.substring(pos + line, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "nextLineTabStop = tb.length - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + 1, width));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "nextLineTabStop =Buf.length - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "nextLineTabStop = n - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "nextLineTabStop = new String(text.substring(pos + offset, width, nextLineTabStop);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "nextLineTabStop = attr.substring(pos + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "nextLineTabStop = new String(text.substring(pos - 1, width, nextLineTabStop));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "nextLineTabStop = n.substring(pos);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + 8) + width, nextLineTabStop;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "nextLineTabStop = endLine - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "nextLineTabStop = Integer.parseInt(text.substring(pos + width / 2));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "nextLineTabStop = bsGetPropStop;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "nextLineTabStop = createPadding(text.substring(pos + width / 2));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "nextLineTabStop = -1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "nextLineTabStop = width / 3;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "nextLineTabStop = attr.substring(0, pos);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "nextLineTabStop = n << 1;",
                "identical": false
            }
        ],
        "buggy_line": "nextLineTabStop = width - 1;",
        "fixed_line": "nextLineTabStop = 1;"
    },
    "Closure-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return true;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return checkForStateChangeHelper(n, recurse_BE_LAST);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return n.hasChildren() && recurseString(n.getType());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return n.hasChildren() && recurseString(n.getString());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (n.getType() == Token.DO && recurse);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXTERNS_ERROR, recurse);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return n.hasChildren() && recurseFunctionName(n.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXTERN_ERROR, recurse);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return n.hasChildren() && recurseUtil.isLiteralValue(n.getLastChild())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n.getLastChild())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return n.hasChildren() && recurseString(n.getValue());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return t.hasCodeChanged() || n.getLastChild().getType() != Token.RETURN;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return n.hasChildren() && recurseOnString(n.getType());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return n.hasChildren() && recurseFunctionName(n.getFirstChild().getType());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return n.hasChildren() && recurseOrString(n.getType());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return n.hasChildren() && recurseUtil.isFunctionAnonymous(n);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return n.hasChildren() && recurseUtil.isFunctionDeclaration(n);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n.getLastChild())));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return n.hasChildren() && recurseOnString(n.getString());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return n.hasChildren() && recurseFunctionDefinition(n);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (n.getType() == Token.STRING) && recurse;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return n.hasChildren() && recurseUtil.isLiteralValue(n.getLastChild())));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return 2.0.matchesStringContext(n, recurse_IN_EXTERN_ERROR);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return n.hasChildren() && recurseFunctionName(n.getType());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return checkForStateChangeHelper(n, recurse_BE_THROWABLE_PREDIVIDELineno, recurse);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return variablesMatch(n, recurse_BE_LAST);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return t.hasCodeChanged() || n.getLastChild().getType() != Token.STRING;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 2.0.matchesStringContext(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return n.hasChildren() && recurseOrString(n.getString());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return t.hasAttribute(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return n.hasChildren() && recurseFunctionName(n.getString());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return n.matchesStringContext(n.getTypeOfThis());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return v != null && recurse(n, recurse);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXPORTS_ERROR);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return checkForStateChangeHelper(n, recurse_BE_THIS, recurse);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return t.hasCodeChanged() || n.getLastChild().getType() != Token.NEW);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (n.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (n.getType() == Token.DO && recurse) != 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new Node(Token.EXPR_RESULT, recurse);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return isStringWorthInlining(n, recurse);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXTERNS_STRING);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return n.hasChildren() && recurseUtil.isName(n.getType())));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return totalMatch(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return n.hasChildren() && recurseUtil.isFunctionAnonymous(n)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return !n.hasChildren() && recurseFunctionName(n.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return t.hasCodeChanged() || n.getLastChild().getType() != Token.LABEL;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (n.getType() == Token.GETPROP) ? \"\" : n;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return n.matchesStringContext(STRING_BE_LAST);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return !NodeUtil.isFunction(n) && recurseString(n.getString(), recurse);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return isBeHelper(n, recurse_IN_EXTERN_ERROR, recurse);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return n.hasChildren() && recurseAssignmentToName(n.getType());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (n.getType() == Token.RETURN) && recurse;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return n.hasChildren() && recurseOrString(n.getValue());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return n.hasChildren() && recurseObjLitKey(n.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXTERN_PREDIVIDELineno, recurse);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return n.hasChildren() && recurseBePure();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return n.hasChildren() && recurseFunctionName(n.getFirstChild().getType()) != Token.RETURN;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return n.matchesStringContext(STRING_BE_LAST_PREDIAMETER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return expectedMatch(n, recurse_IN_EXTERN_ERROR);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return 2.0.matchesStringContext(n, recurse_IN_EXTERNS_STRING);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return n.hasChildren() && recurseBeSet(n, recurse);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return 2.0.matchesStringContext(n, recurse_BE_LAST);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return totalMatch(n, recurse_IN_EXTERN_ERROR);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n.getFirstChild())));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return 2.0.matchesStringContext(n, recurse_IN_EXTERN_PREDIMUST_BE_LAST);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (n.getType() == Token.FUNCTION) && recurse;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "returnCache.contains(n.getTypeOfThis().indexOf('$') < 0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return isBeHelper(n, recurse_IN_EXTERNS_ERROR, recurse);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return n.hasChildren() && recurseUtil.isFunction(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return !NodeUtil.isFunction(n) && recurseString(n.getString());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return expectedMatch(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return n.hasChildren() && recurseString(n.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return 2.0.matchesStringContext(n, recurse_IN_EXTERN_PREDIVIDELineno, recurse);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return n.hasChildren() && recurseFunctionDefinition(n.getLastChild().getType());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return checkForStateChangeHelper(n, recurse);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "returnbinsMatch(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return n.hasChildren() && recurseUtil.isLiteralValue(n.getFirstChild())));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return t.hasCodeChanged() || n.getLastChild().getType() != Token.THIS;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return n.hasChildren() && recurseUtil.isLiteralValue(n.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isFunction(n, recurse);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (n.getType() == Token.STRING) ? \"\" : Node.newString(Token.NAME);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return n.hasChildren() && recurseString(n.getFirstChild().getType());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return n.hasChildren() && recurseUtil.isLiteralValue(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXTERN_PREDIMUST_BE_LAST);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return n.hasChildren() && recurseFunctionName(n.getFirstChild().getType()) != Token.LABEL_STRING) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "returnbinsMatch(n, recurse_IN_EXTERN_ERROR);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return n.hasChildren() && recurseMethod(n, recurse);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return n.hasChildren() && recurseBeSetUtil.isLiteralValue(n.getLastChild().getQualifiedName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (n.getType() == Token.STRING) ? \"\" : n;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return checkForStateChangeHelper(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return t.hasCodeChanged() || n.getLastChild().getType() != Token.BREAK;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return n.hasChildren() && recurseVisible(n.getType());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return n.hasChildren() && recurseString(n.getClass());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return t.hasAttribute(n, recurse_IN_EXTERN_ERROR);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return variablesMatch(n, recurse_IN_EXTERNS_ERROR);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return variablesMatch(n, recurse_IN_EXTERN_ERROR);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return 2.0.matchesStringContext(n, recurse_IN_EXTERN_STRING);",
                "identical": false
            }
        ],
        "buggy_line": "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
        "fixed_line": "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    },
    "Lang-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.MINUTE));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cal1.set(Calendar.MINUTE, cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2 == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? Calendar == cal2.get(Calendar.HOUR_OF_DAY) : cal1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) || cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar cal1 = Calendar.MINUTE * cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cal1.getClass() == cal2.getCalendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? Calendar == cal2.get(Calendar.HOUR_OF_DAY) : cal1.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.MINUTE));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) == Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2 == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cal1.getType() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar cal1 = Calendar.MINUTE && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2 == Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? null : cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2 == Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.getClass());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cal1.getType() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cal1.getClass() == cal2.getCalendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? null : cal1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cal1.getType() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cal1.getTime() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? Calendar == cal2.get(Calendar.HOUR_OF_DAY) : cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.MINUTE);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cal1.getTime() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cal1.getClass() == cal2.getCalendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) - 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? Calendar == cal2.get(Calendar.HOUR_OF_DAY) : cal1.get(Calendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? null : cal1.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar cal1 = Calendar.MINUTE(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar cal1 = Calendar.MINUTE(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cal1.getValue() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) -()) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cal1.get(), cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cal1.getTime() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cal1.getType() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? null : cal1.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) -()) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? null : cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get ? null : cal1.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) && cal2 == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cal1.getValue() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cal1.getTime() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) ? Calendar == cal2.get(Calendar.HOUR_OF_DAY) : cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cal1.check(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY || cal == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar cal1 = Calendar.MINUTE && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cal1.getType() == Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.MINUTE));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cal1.OfDay() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == Calendar.HOUR_OF_DAY;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cal1.set(Calendar.HOUR_OF_DAY, cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) || cal1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) || cal2.get(Calendar.MINUTE);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) ? null : cal1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY < cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.MINUTE));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cal1.getClass() == cal2.getCalendar.HOUR_OF_DAY) ? Calendar : cal1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get ? Calendar : cal1.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) - start1.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_NAME));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cal1.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.check && cal2 == cal2.get(Calendar.HOUR_OF_DAY));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cal1.getClass() == cal2.get(Calendar.HOUR_OF_DAY) && cal2 == Calendar.MINUTE);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar cal1 = Calendar.MINUTE == cal1.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar cal1 = Calendar.MINUTE(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            }
        ],
        "buggy_line": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
        "fixed_line": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&"
    },
    "Math-30": {
        "fixes": [
            {
                "k": 1,
                "patch": "final int n1OutCount = n1 * n2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final int n1 = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final int n1NonNull = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final int n1 Strings = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final int n1rement = n1 / n2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final int n1 getClass = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final int n1Filled = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final int n1rement = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final int n1 inspecting = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final int n1Array2START = n1 / n2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final int n1Array2D = n1 / n2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final int n1xD = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final int n1wrapped = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final int n1OutCount = n1 / n2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final int n1 CloneNotSupport = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final int n1enerate = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final int n1 getPosition = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final int n1DAY = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final int n1 InternalError = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final int n1Fields = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final int n1zt2 = n1 / n2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final int n1 Does = n1 / n2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final int n1Descriptions = n1 / n2;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final int n1 letters = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final int n1 = n2 / n2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final int n1 pass = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final int n1OutCount = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final int n1Array2n1 = n1.n2);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final int n1Id = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final int n155 = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final int n1Descriptions = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final int n1Based = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final int n1synchron = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final int n1Null = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final int n1ity = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final int n1Array2 configuration = n1 / n2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final int n1 eol = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final int n1 4, n2 = n1 / n2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final int n1Filled = n1.n2 * n2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final int n1wrapped = n1.n2 / n2; // ? 1 : 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final int n1 <% = n1.n2 / n2;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.n\"",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final int n1 getClass = n1.n2 * n2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.compareTo(n2);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final int n1Array2 = n1 / n2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final int n2prod = n1 * n2; // the n-i",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final int n1 decimal = n2 / n2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final int n1wrapped = n2 / n2;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final int n1Descriptions = n0 / n2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final int n1Based = n0 / n2;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final int n1Descriptions = n1 * n2;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final int n1wrapped = n2 / n2; // ? 1n't do n2) : 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final int n2prod = n1 / n2; // 1] should never happen",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final int n1 expectedType2 = n1 / n2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final int n1[]{n1, n2 * n2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final int n1Delta = n1 / n2;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final int n1 = n0 / n2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final int n1 days2prod = n1 * n2; // the n-i",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : -1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.getX;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : 0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final int n1Array2START = n1 * n2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final int n1OutCount = n1 * n2; // current element index",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.intValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final int n1wrapped = n0 / n2; // ? 1 : n1.n\"",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final int n1Typ2 = n1 / n2;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final int n1wrapped = n0 / n2; // ? 1 : n1.compareTo(n2);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final int n1zt2 = n1 / n2; // ? 1 : n1.n\"",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final int n1Array2Shadow = n1 / n2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final int n2prod = n1 * n2; // the n-millisecond",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final int n2prod = n1 / n2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.negate;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.getXOffset",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final int n1Array2 EOFException = n1 / n2;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final int n1 getClassCount = n1 * n2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final int n1bg = n1 * n2; //final byte",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final int n1wrapped = n2 / n2; // 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final int n1 getClassCount = n1 * n2; // the n2) for n1",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.getSize();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final int n1Array2START = n1 / n2; // may be negative",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1; // 1]",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final int n1 getClass = n1.n2 / n2; // ? 1 : 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final int n1OutCount = n1 * n2; // ? 1 : n2) Kit.codeBug",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final int n1DELAYED = n1 / n2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final int n1Array2D = n1 * n2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final int n1OutCount = n1 * n2; // will clear spill index",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final int n1wrapped = n1.n2 / n2; // ? 1 : 0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.n",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final int n1 letters = n1 / n2;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final int n1 Does = n1 * n2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.getN()",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final int n1 = n2 / n2; // ? 1 : n1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.intValue0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final int n1wrapped = n2 / n2; // ? 1 : n1.getY",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final int n1wrapped = n2 / n2; // ? 1n\" : n1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final int n1zt2 = n1 * n2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final int n1zt2 = n1 / n2; // may be negative",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final int n1TickCount = n1 * n2;",
                "identical": false
            }
        ],
        "buggy_line": "final int n1n2prod = n1 * n2;",
        "fixed_line": "final double n1n2prod = n1 * n2;"
    },
    "JacksonDatabind-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "found = props.get(name);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "found = props.indexOf(prop.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "found = props.get(provider.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "found = prop.withType(name);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "found = props.indexOf(prop.getName(), prop.getSimpleName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "found = props.indexOf(prop.getName(), prop.getType());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "found = t.getScope().getVar(name);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "found = props.get(name).getName();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "found = props.toArray(new String[prop.getName()]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "found = props.indexOf(prop.getName(), prop.getSourceName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "found = props.indexOf(prop.getName(), prop.getScope());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "found = props.toArray(new String[prop.getName()]));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "found = propName.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_map.length()]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "found = props.indexOf(jp, prop.getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_props.length()]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "found = props.indexOf(prop.getName(), prop.getInternalName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "found = props.indexOf(prop.getName(), prop.getDescriptor());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "found = props.indexOf(prop.getName(), prop.getModule());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[prop.length()]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "found = t.getScope().getOwnSlot(name);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "found = props.toArray(new String[prop.getName()+\"[t.length()]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "found = props.indexOf(prop.getName()) + 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_name.length()]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "found = startIndex.withType(name);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "found = props.remove(prop.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_property.length()]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "found = props.indexOf(prop.getName(), prop.getInjectable());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "found = props.toArray(new String[_props.length()]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[prop.getType());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "found = props.indexOf(prop.getName(), prop.getReal());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "found = props.indexOf(prop.getFirstChild(), prop.getName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "found = props.toArray(new String[prop.getName()+\"'t.length()]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "found = props.toArray(new BeanPropertyWriter[prop.getName(), prop.getSimpleName()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "found = props.remove(name);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "found = props.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DEFINE_INIT_ERROR, prop.length));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "found = props.indexOf(prop.getName(), bean);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName()]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "found = props.toArray(new BeanPropertyWriter[_map.size()]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "found = props.toArray(new Property[prop.getName(), prop.getType());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[prop.getName()]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "found = mut.find(t, prop.getInput());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "found = props.indexOf(prop.getName(), ns);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName(), prop.getSourceName()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[prop.length - 1]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "found = props.indexOf(prop.getName(), prop.getEntryCount());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_resolver.size()]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "found = props.indexOf(prop.getName(), prop.getTypedValue());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "found = props.toArray(new BeanPropertyWriter[_props.length()]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "found = props.indexOf(jp, prop.getScope());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_superclass.getName()]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName(), i));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "found = props.toArray(new String[_PROTOTYPE_PROPERTY_TYPE.getName()]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "found = props.toArray(new String[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[prop.length()]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "found = props.find(prop.getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "found = mut.getName();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "found = props.toArray(new String[_PROTOTYPE_MEMBER_DELTA);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DEFINE_INIT_ERROR, prop.length()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName(), null));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DEFINE_INIT_ERROR, prop.deserialize(jp, ctxt));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName() + 1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName() - 1]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "found = props.toArray(new Property[prop.getName(), prop.getSimpleName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DEFINE_INIT_ERROR, prop.size()]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "found = props.indexOf(prop.getName(), prop.getParameterTypes());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "found = propName.equals(prop.getName())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "found = props.toArray(new BeanPropertyWriter[prop.getName()+\"[_name.length()]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName(), prop.getType()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "found = props.toArray(new String[prop.getName(), prop.length)]);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "found = props.indexOf(t.getScope(), n, parent);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "found = props.toArray(new BeanPropertyWriter[prop.getName()+\"[_props.length()]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DECEMBER, prop.length() - 1]);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "found = props.toArray(new String[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[prop.length - 1]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName(), startIndex));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "found = startIndex.find(t, prop.getInput());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "found = props.indexOf(prop.getName(), values);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "found = props.indexOf(prop.getNext());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DELTA);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "found = props.toArray(new Property[prop.getName(), prop.getType()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_props.length - 1]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "found = props.toArray(new BeanPropertyWriter[prop.getName()+\"[_map.length()]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "found = config.getAnnotation(JsonNode.SOURCENAME_PROP);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName()+\"[t.length()]);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "found = props.toArray(new String[prop.getName()+\"[t.length - 1]));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "found = props.indexOf(t.charAt(0), prop.getScope());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_AND_DEFINE_INIT_ERROR, prop.length));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.get(prop.getName(), prop.deserialize(jp, ctxt));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_PROPERTY_TYPE.getName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "found = props.indexOf(prop.getFirstChild(), PROPERTY);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DEFINE_INIT_ERROR, prop.find);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "found = props.indexOf(t.getScope(), n, prop.getSimpleName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "found = f.find(prop.getName(), prop.getType());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DEFINE_INITIALIZED.length() - 1]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "found = props.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "found = props.toArray(new String[prop.getName()+\"[_ config.length()]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "found = props.toArray(new BeanPropertyWriter[prop.getName(), prop.getModule());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DESERIALIZER));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "found = props.toArray(new BeanPropertyWriter[_PROTOTYPE_MEMBER_DELTA inExterns]);",
                "identical": false
            }
        ],
        "buggy_line": "found = key.equals(prop.getName());",
        "fixed_line": "found = key.equals(_hashArea[i-1]);"
    },
    "Csv-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\t')) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\0)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar.equals(current))) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != Character.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (current == '\\r' || (current == '\\n' && last text.length() == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar.equals(current)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (current == '\\n' || (current == '\\r')) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar.length() == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar.lookAhead() == '\\r')) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (current == '\\r' || (current != '\\n' && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != delim)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rator)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\u')) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\ Integer.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '9')) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (current == '\\r' || (current == '\\n') && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar.charAt(current == '\\r')) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (current == '\\r' || (current == '\\n' && lastReturned.equals(current))) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != 1)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (current == '\\r' || (current == '\\n && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r', 0)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (current == '\\r' || (current == '\\n] && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (current == '\\r' || (current == '\\n' && endChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != Character.END_OF_STREAM.getLastChar() == '\\r')) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\JACK && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != escape)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != DELETED) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (current == '\\r' || (current == '\\n' && !current == '\\r')) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\00)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar instanceof '\\r')) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (current == '\\r' || (current == '\\n' && subroutines() == '\\r')) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rranges)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '0') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar.index == '\\r')) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (current == '\\r' || (current == '\\n' && lastReturned.equals(current)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rii)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != height)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rate)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\ValidChar)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\177')) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rUTC)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\0')) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\f)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r\\n') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (current == '\\r' || (current == '\\n] ? -1 : current.length() - 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar() == '\\r')) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != Character.END_OF_STREAM)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar).equals(current)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (current == '\\n' || (current == '\\r && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (current == '\\r' || (current == '\\n' && exp == '\\r')) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r-1)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != Character. error)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\ helper)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.getLastModified() == '\\r')) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (current == '\\r' || (current == '\\n') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rchanges)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != DELETED)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (current == '\\0' || (current == '\\n' && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.getLastChar() == '\\r')) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != SerialDate.lastChar)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != empty)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rFALSE)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.getLastChild() == '\\r')) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar !=('\\n',PerChar)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (current == '\\r' || (current == '\\n' && lower == '\\r')) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != endChar)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\edge)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r\\n')) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar).compareTo(current)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (current == '\\r' || (current == '\\n7, && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\ optional)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) Kit.codeBug()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r getRoot)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.RIGHT)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\context)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rsetProperty) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (current == '\\n' || (current == '\\r' && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (current == '\\r' || (current == '\\n] ? -1 : current.length() - 1)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.lookAhead() == '\\r')) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rator.length() == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (compute == '\\r' || (current == '\\n' && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (current == '\\r' || (current == '\\n] ? -1 : current.length() - 1) > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\00')) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar !=('\\n') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.codeBug()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (current == '\\r' || (current ==('\\n' && lastChar != '\\r')) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != script')) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\JACKSON)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != Character.END)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != loop)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\rExclude);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\0');",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\GT)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\Edge.index)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r', '/') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (current == scriptr' || (current == '\\n' && lastChar != '\\r')) {",
                "identical": false
            }
        ],
        "buggy_line": "if (current == '\\n') {",
        "fixed_line": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {"
    },
    "Lang-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "classes[i] = EMPTY_CLASS_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "classes[i] = ArrayUtils.EMPTY_CLASS_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "classes[i] = array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "classes[i] = fromInternalName(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "classes[i] = EMPTY_LONG_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "classes[i] = Opcodes.EMPTY_CLASS_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? null : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "classes[i] = EMPTY_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "classes[i] = Array.get(array[i].getClass());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? 1 : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "classes[i] = EMPTY_INT_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "classes[i] = prefix[i].getClass();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "classes[i] = ReflectUtils.get(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "classes[i] = (classes[i].getClass() == null ? 2 : array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "classes[i] = EMPTY_STRING_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "classes[i] = array[i].get(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? 1 : i;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "classes[i] = (classes[i].getClass() == null ? 2 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "classes[i] = (Class<?>) classes[i].getClass();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "classes[i] = fromInternalName(classes[i].getClass().getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "classes[i] = EMPTY_NULL_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "classes[i] = Array.get(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "classes[i] = EMPTY_BOOLEAN_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "classes[i] = Array.get(array[i].getClass() == array[i]) ? null : array[i].getClass();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "classes[i] = ArrayUtils[i].getClass();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "classes[i] = EMPTY_OBJECT_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "classes[i] = (classes[i].getClass() == null ? valueForNull : array[i].getClass();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "classes[i] = (classes[i].getClass() == null ? 2 : array[i].getClass());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "classes[i] = (classes[i].getClass() == null ? valueForNull : array[i].getClass());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "classes[i] = (classes[i].getClass()) == null ? 2 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "classes[i] = (classes[i].getClass().getSuperclass()) == null ? \"\" : array[i].getClass();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "classes[i] = array[i].getClass().getComponentType() == null ? \"\" : array[i].getClass();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "classes[i] = at[i].getClass();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "classes[i] = (classes[i].getClass()) == null ? \"\" : array[i].getClass();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? null : array[i].getClass();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "classes[i] = (classes[i].getClass() == null ? valueForNull : array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "classes[i] = EMPTY_CLASS_ARRAY[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "classes[i] = (classes[i].getClass() == 0) ? null : array[i].getClass();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "classes[i] = Array.get(array[i].getClass();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? -1 : i;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "classes[i] =isAssignableFrom(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? \"\" : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "classes[i] = (classes[i].getClass()) == null ? valueForNull : array[i].getClass();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "classes[i] = EMPTY_SHORT_ARRAY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "classes[i] = constructor[i].getClass();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "classes[i] = (Class) array[i].getClass();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "classes[i] = (Class<?>) array[i].getClass();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "classes[i] = ArrayUtils.EMPTY_CLASS_ARRAY[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "classes[i] = (classes[i].getClass() == null) ? 2 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? null : classes[i].getName();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "classes[i] = array[i].getClass().getLeastSupertype(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "classes[i] = valueInternalName(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "classes[i] = types[i].getClass();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "classes[i] = (classes[i].getClass().getSuperclass()) == null ? 2 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "classes[i] = (classes[i].getClass() == null ? valueForNull : array[i].getClass().getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? BasicValue.getClass().getName() : i;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "classes[i] = converters[i].getClass();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "classes[i] = Array.get(array[i].getClass() == array[i]) ? null : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "classes[i] = (classes[i].getClass() == Array.getSuperclass()) ? null : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "classes[i] = array[i].getClass().getComponentType() == null ? 2 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "classes[i] =erritory[i].getClass();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "classes[i] = (classes[i].getClass() == null ? -1 : array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "classes[i] = toClass(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "classes[i] = Array.get(classes[i].getClass() == array[i]) ? null : array[i].getClass();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "classes[i] = innerName(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "classes[i] = (classes[i].getClass()) == null ? Calendar.class : array[i].getClass();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "classes[i] = (classes[i].getClass() == null) ? -1 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.class : array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "classes[i] =Structure_CLASS_ARRAY[i].getClass();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "classes[i] = ArrayUtils.EMPTY_CLASS_ARRAY[i].getName();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "classes[i] = name[i].getClass();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "classes[i] = (classes[i].getClass() == 0) ? 2 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? CalendarUtils.EMPTY_CLASS_ARRAY : i;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "classes[i] = array[i].getClass().getComponentType();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? 1 : classes[i].getName();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "classes[i] = * array[i].getClass();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "classes[i] = fromInternalName(classes[i].getClass().getName(), array[i].getClass());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.TYPE_CLASS_ARRAY : classes[i].getClass());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "classes[i] = context[i].getClass();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "classes[i] = (classes[i].getClass() == null) ? \"\" : array[i].getClass();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "classes[i] = (classes[i].getClass() == null) ? 1 : array[i].getClass();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.TYPE_CLASS_ARRAY : array[i].getClass());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.class : array[i].getClass();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "classes[i] = (classes[i].getClass().getSuperclass()) == null ? null : array[i].getClass();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ? 2 : i;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "classes[i] = (classes[i].getClass() == null ? 2 : array[i].getClass().getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "classes[i] = Array.get(array, i);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "classes[i] = (classes[i].getClass().getSuperclass()) == null ? 2 : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.TYPE_CLASS_ARRAY : array[i].getClass();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "classes[i] = fromInternalName(classes[i].getClass();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "classes[i] = (classes[i].getClass() == null ? \"\" : array[i].getClass().getName();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "classes[i] = (classes[i].getClass()) == null ? Calendar.TYPE_CLASS : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.TYPE_CLASS_ARRAY : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "classes[i] = (classes[i].getClass() == null ? 2 : array[i].getClass()) + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "classes[i] = fromClass(classes[i].getClass());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "classes[i] = (classes[i].getClass() == array[i]) ?BYTES : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "classes[i] = (classes[i].getClass().getSuperclass()) == null ? null : classes[i].getClass();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "classes[i] = (classes[i].getClass() == null ? Calendar.class : array[i].getClass());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "classes[i] = (classes[i].getClass()) == null ? Calendar.TYPE_CLASS : array[i].getClass();",
                "identical": false
            }
        ],
        "buggy_line": "classes[i] = array[i].getClass();",
        "fixed_line": "classes[i] = array[i] == null ? null : array[i].getClass();"
    },
    "Closure-52": {
        "fixes": [
            {
                "k": 1,
                "patch": "return len > 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return index % 2 == 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return s.length() > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return ch == '\\r' || c == '\\n' || c == delim || c == escape;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == escape;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.substring(index + 1));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.substring(index + c);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-');",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.charAt(index - 1) );",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? 1 : 0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '.' ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (s == null || s.length() == 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (s == null || c == '.' ? s.length() : 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (s == null || c == '\\n' || c == '.' ? s.length() : 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (s == null || c == '\\n' || c == delim || c == escape;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.charAt(index - 1) + 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-';",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '.' ? s.length() : 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? \"null\" : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (s == null || c == '.' ? Long.MAX_VALUE : s.substring(index + 1));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '0') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '-');",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? 1 : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '-') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.substring(index + 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (s == null || c == '.' ? Double.NEGATIVE_INFINITY : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '-';",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (s == null || c == '.' ? Double.NEGATIVE_INFINITY : s.substring(index + 1));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (s == null || c == '\\n' || c == EOF_CHAR || c == '.' ? s.length() : 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return c == '\\r' || c == '\\n' || c == delim || c == escape;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == 'e' || c == escape;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) );",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '.' ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '-') ? 1 : 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (s == null || c == '\\n' || c == delim || c == 'e' || c == escape;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.substring(index + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) <= c;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '.' ? s.length() : 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.charAt(index - 1) );",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.length();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return c == '\\n' || c == delim || c == escape;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.substring(index + c);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return ch == '\\r' || c == '\\n' || c == delim || c == '-';",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (s == null || c == '\\n' || c == delim || c == 'e' || c == 'E')) ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? \"null\" : index;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.length();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (s == null || c == '0') ? \"null\" : s.substring(index + c);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.substring(index + 1));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (s == null || c == '\\n' || c == '-') ? \"null\" : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? \"Item\" : index + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) < 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) / 2 + 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) / divider;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) + 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '.' ? Long.MAX_VALUE : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index + 1) / 2 - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) / 2);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (s == null || c == '\\n' || c == delim || c == 'e' || c == '0') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.toHexString(c);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return ch == '\\r' || c == '\\n' || c == delim || c == Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) / c;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.length();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.substring(index + 1));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? \"null\" : s.charAt(index - 1) );",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) != '0';",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '.' ? s.length() : 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (s == null || c == '\\n' || c == delim || c == 'e' || c == '-') ? \"null\" : index + 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? s : -1L;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return c == '\\n' || c == delim || c == '-';",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.charAt(index - 1));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.substring(index + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) > 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? s : 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == DOUBLE ? s.length() : 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : index;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.substring(index + 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"Item\" : index + 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? s : index + 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : -1 * s.substring(index + c);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"null\" : s.charAt(index - 1) / divider;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '-') ? \"null\" : s.length();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) %s.length();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (s == null || c == '0') ? \"Item\" : s.substring(index + c);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '.' ? s.length() : 5;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) : 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (s == null || c == '\\n' || c == delim || c == '0') ? \"null\" : s.charAt(index - 1) + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (s == null || c == '\\n' || c == '-') ? \"null\" : s.substring(index + 1));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1L;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.substring(index + c);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (s == null || c == '\\n' || c == '0') ? \"Item\" : s.substring(index + c);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (s == null || c == '\\n' || c == '.' || c == 'e' || c == 'E')) ? \"null\" : s.charAt(index - 1) * s.length();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (s == null || c == '\\r' || c == '\\n' || c == delim || c == '-') ? 1 : 0;",
                "identical": false
            }
        ],
        "buggy_line": "return len > 0;",
        "fixed_line": "return len > 0 && s.charAt(0) != '0';"
    },
    "Closure-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "jsDoc.getJSDocInfo(), true);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "jsDoc.getJSDocInfo());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "jsDoc.getJSDocInfo() != null);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "jsDoc.getJSDocInfo(), true, true);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "jsDoc.getJSDocInfo() : true;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "jsDoc.getJSDocInfo() : null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "jsDoc.getJSType(), true);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "jsDoc.getJSDocInfo(), functionParameter, true);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "jsDoc.getJSDocInfo() != null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "jsDoc.getJSDocAnnotations(), true);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "jsDoc.addJSType(jsParameter);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "jsDoc.getJSDocInfo() : var.getJSDocInfo();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "jsDoc.getJSDocInfo() : node.getJSDocInfo();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "jsDoc.addJSType(n.getJSDocInfo());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "jsDoc.getJSDocInfo(), (jsParameter) jsDoc;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdoc.incompat.type\", true);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "jsDoc.getJSDocInfo().getNext(), true);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "jsDoc.getJSDocInfo().setJSDocAnnotations(null);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "jsDoc.getJSDocInfo().getVarArgs(), true);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "jsDoc.getJSDocInfo().getName(), true);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "jsDoc.getJSDocInfo() : node.getJSDocAnnotations();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "jsDoc.addJSType(), true);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "jsDoc.getJSDocInfo().addDeclaredParameterType(jsScope.getVar(n.getString()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "jsDoc.getJSDocInfo() - jsDoc;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "jsDoc.getJSDocInfo().addChildrenToFront(jsParameter);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "jsDoc.getJSDocInfo().get varParameterType(), true);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "jsDoc.getJSDocInfo().getString(), true);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "jsDocParameter.addJSType(jsParameter);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "jsDocParameter.addJSType(n.getJSDocInfo());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "jsDoc.getJSDocInfo(), (jsParameter) jsDoc);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "jsDoc.getJSDocInfo().addDeclaredParameterType(jsParameter);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "jsDoc.getJSDocInfo().getLeastSupertype(jsParameterType);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "jsDoc.getJSDocInfo() != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "jsDoc.getJSDocInfo(), astParameter, true);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "jsDoc.getJSDocInfo().get varParameterType());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "jsDoc.getJSDocInfo().setNext(), true);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "jsDoc.getJSDocInfo() : var.getJSDocAnnotations();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "jsDoc.getJSDocInfo().getLeastSupertype(jsParameter);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "jsDoc.getJSDocInfo().addDependencyParameter(jsScope.getVar(n.getString()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "jsDocParameter.getJSDocInfo(), true);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "jsDoc.getJSDocInfo().setJSDocAnnotations(), true);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "jsDoc.getJSDocInfo().addDeclaredParameterType(jsParameterName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "jsDoc.getJSDocInfo() : \"jsdoc.incompat.getJSDocAnnotations()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "jsDoc.getJSDocInfo(), gen.getJSDocInfo());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "jsDoc.getJSDocInfo().getFnType(), true);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "jsDoc.getJSDocInfo(), (astParameter) jsDoc;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "jsDoc.getJSDocInfo() : (jsParameter) jsDoc;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "jsDoc.getJSDocInfo().addDependencyParameter(jsParameter);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "jsDoc.getString(), true);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "jsDoc.getJSDocInfo() + \".prototype.\" + prop, true);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "jsDoc.getJSDocInfo().getParameterType(), true);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "jsDoc.addJSType(jsParameter.getString(), true);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "jsDoc.getJSDocInfo() : \"jsdoc.incompat.getJSDocAnnotations()), true);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "jsDoc.getJSDocInfo(), (jsParameter) jsType);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "jsDoc.getJSDocInfo().toString(), true);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdoc.incompat.type\", jsDoc);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "jsDoc.getJSDocInfo(), true, inExterns);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "jsDoc.getJSDocInfo().addDependencyParameter(ast);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "jsDoc.getJSDocInfo().setJSDocInfo(jsParameter);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "jsDoc.getName(), true);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "jsDoc.getJSDocInfo() : \"jsdoc.incompat.getJSDocAnnotations\", true);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.recordParameterType(functionParameter);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.incompat.type\", true);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "jsDoc.getJSDocInfo().getParent(), true);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "jsDoc.getJSDocInfo() + \".prototype.\" + prop);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "jsDoc.addJSType(jsParameter.getJSDocInfo());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "jsDoc.getJSDocInfo(), null, true);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.recordParameterType(functionParameterName);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "jsDoc.addJSType(n.getJSType(), true);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "jsDoc.getJSDocInfo() : gramps.getJSDocInfo();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "jsDoc.getJSDocInfo().setJSDocInfo(null);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdoc.inGlobalScope()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "jsDoc.getJSDocInfo() : \"jsdoc.incompat.getJSDocAnnotations());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "jsDoc.getJSDocInfo() : \"ast.getJSDocInfo();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "jsDoc.addJSType(), (jsParameter) jsDoc);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "jsDoc.getJSDocInfo()ParameterName, true);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.name(jsDoc);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "jsDoc.getJSDocInfo() : \"jsdoc.incompat.type\", true);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "jsDoc.getJSDocInfo(), (info) jsDoc;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "jsDocParameter.addJSType(n.getJSType(), true);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "jsDoc.getJSDocInfo() : 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "jsDoc.getJSDocInfo(), functionParameter);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.newParameter().getJSDocAnnotations()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.name(jsParameterName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "jsDoc.getJSDocInfo()Parameter);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.isFunctionParameterType());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "jsDoc.getJSDocInfo().setJSDocInfo(ast);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "jsDoc.getJSDocInfo(), functionNode, true);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "jsDoc.getJSDocInfo()Parameter, true);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "jsDoc.getJSDocInfo().addDeclaredParameter(jsScope.getVar(n.getString()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder. classParameterType\", true);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "jsDoc.getJSDocInfo() : \"jsdoc.incompat.getJSDocAnnotations()), null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder. classParameterType(jsParameterName);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "jsDoc.getJSDocInfo()[0].toString());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.recordParameterType(jsScope.getRootNode()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "jsDoc.getJSDocInfo() + tempParameterType);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder.recordParameterType(astParameterName);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "jsDoc.getJSDocInfo() + \" (!jsdocBuilder. classParameterType.\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "jsDoc.getJSDocInfo() - jsDoc = true;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "jsDoc.getJSDocInfo().addDeclaredParameterType(ast);",
                "identical": false
            }
        ],
        "buggy_line": "jsDocParameter.getJSType(), true);",
        "fixed_line": "jsDocParameter.getJSType(), false);"
    },
    "Lang-6": {
        "fixes": [
            {
                "k": 1,
                "patch": "pos += Character.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "pos += Character.toString(value));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "pos += Character.valueOf(pt[pos++]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "pos += Character.codePointLength(pt2, pt);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "pos += Character.toLowerCase(pt[pos++]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "pos += Character.valueOf(ptCount * 2);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "pos += Character.valueOf(ptCount);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "pos += Character.toString(pt));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "pos += Character.charCount(pt[pos++]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "pos += Character.toLowerCase(pt));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "pos += Character.toUpperCase(pt[pos++]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "pos += Character.charCount(pt2, pt);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "pos += Character.codePointLength(pt2, pt1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "pos += Character.codePointAt(pt2, pt);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "pos += Character.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "pos += Character.charCount(pt2, pt1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "pos += Character.charCount(value, pt.getColumnCount());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "pos += Character.charCount(value, pt);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "pos += Character.toString(value, pt);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "pos += Character.valueOf(ptName));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "pos += Character.valueOf(pt));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "pos += Character.valueOf(ptCount * 2));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "pos += Character.charCount(value, pt.getCount());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "pos += Character.charCount(pt));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "pos += Character.codePointLength(pt2, pt, 0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "pos += Character.valueOf(ptCount * pt.getColumnCount());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "pos += Character.codePointLength(pt[pos++]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "pos += Character.estAt(pt, pt);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "pos += Character.toString(name, pt);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "pos += Character.valueOf(pt).intern(), pt);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getPos() - 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "pos += Character.valueOf(ptCharacter.MIN_VALUE, pt);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "pos += Character.toString(values[pos++]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "pos += Character.valueOf(ptCount, pt.getColumnCount());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "pos += Character.codePointLength(pt, pt);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "pos += Character.charCount(value, pt.estAt));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "pos += Character.toString(type, pt);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "pos += Character.codePointAtStart(pt2, pt);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "pos += Character.codePointAt(pt, pt.getColumnCount());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "pos += Character.toUpperCase(pt));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getCharDesc(pos))) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "pos += Character.codePointAt(pt, pt.getintValue());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "pos += Character.codePointAt(pt2, pt, 0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "pos += Character.valueOf(ptUtilities.MIN_VALUE, pt);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "pos += Character.codePointLength(pt1, pt.length() - 1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "pos += Character.toLowerCase(ptCount, pt);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "pos += Character.toString(os, pt);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "pos += Character.toString(parametrized, pt);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "pos += Character.codePointAt( pt, pt);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "pos += Character.codePointAt(values, pt);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "pos += Character.codePointLength(pt, pt.getColumnCount());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "pos += Character.charCount(value, pt.length));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "pos += Character.codePointAt(pt2, pt, p);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "pos += Character.valueOf(ptCount, pt);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "pos += Character.charCount(value, pt.toString());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "pos += Character.codePointAt(pt3, pt);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "pos += Character.codePointAt(pt, pt.getIndex() - 1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "pos += Character.codePointAt(pt2, pt, pt);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "pos += Character. Opcodes.codePointAt(pt, pt);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "pos += Character.toString(values, pt);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "pos += Character.codePointLength(parser, pt);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "pos += Character.codePointLength(pt2, ptStr, pt);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "pos += Character.toString(constructErrorCount(value));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getColumnCount());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "pos += Character.codePointLength(pt1, pt.length() - 1) + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "pos += Character.valueOf(ptSize));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "pos += Character.codePointLength(pt, pt.getCount());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "pos += Character.charCount(value, pt.getClass());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "pos += Character.charCount(value, pt.codePoint));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getIndex() - 1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "pos += Character.valueOf(ptCharacter.MAX_VALUE, pt.getCount());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "pos += Character.codePointAt(pt, pt.getIndex());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "pos += Character.codePointLength(pt2, pt5);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "pos += Character.valueOf(ptCharacter.MAX_VALUE, pt);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "pos += Character.codePointLength(pt2, pt, names[pos++]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "pos += Character.charCount(value);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "pos += Character.valueOf(ptUtilities.MIN_VALUE, pt.getCount(pos));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "pos += Character.valueOf(ptCount).intern(), pt);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "pos += Character.valueOf(ptCharacter.MAX_VALUE).matches(ptName);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getintValue() + 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "pos += Character.valueOf(ptCount * 4;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "pos += Character.valueOf(ptKeys[pos++]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "pos += Character.codePointLength(pt2, pt, pt);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "pos += Character.codePointAt(pt, pt.estAt));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "pos += Character.codePointLength(pt2, pt[pos++]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "pos += Character.codePointAt(pt2, pt, names[pos++]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "pos += Character.valueOf(ptCount * 2 + 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "pos += Character.codePointLength(ptCount, pt);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "pos += Character.valueOf(values[pos++]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.length));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "pos += Character.charCount(value, pt.codePoint);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "pos += Character.charCount(value, pt.getCount(pos));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "pos += Character.codePointLength(pt2, pt));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "pos += Character.valueOf(pt0, pt.getCount(pos++));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "pos += Character.codePointLength(values, pt);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "pos += Character.valueOf(ptCharacter.MIN_VALUE, pt.getCount());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "pos += Character.valueOf(ptCharacter.isPointAtStart, pt.getPos());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "pos += Character.valueOf(ptCharacter.MAX_VALUE));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "pos += Character.codePointLength(pt2, pt, p);",
                "identical": false
            }
        ],
        "buggy_line": "pos += Character.charCount(Character.codePointAt(input, pos));",
        "fixed_line": "pos += Character.charCount(Character.codePointAt(input, pt));"
    },
    "Math-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0.0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return NaN;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (Double.isNaN(imaginary) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (Double.NaNNaN && Double.isNaN(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (Double.isNaN(a) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (Double.NaN && Double.isNaN(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (Double.isInfinite(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (Double.isNaN( imaginary) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (Double.NaNNaN || Double.isInfinite(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (Double.NaNNaN && Double.isNaN(a) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (Double.isNaN(inary) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (Double.NaNNaNNaN && Double.isNaN(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (Double.isNaN(imaginary) || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (Double.isNaN(Math.a) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (Double.NaNNaN && Double.isInfinite(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (Double.NaNNaNNaN < Double.POSITIVE_INFINITY || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "returnisInfinite() && (Math.abs(imaginary) == 0.0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (Double.NaNNaNNaN_VALUE_NULL || Double.isInfinite(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (Double.NaNNaN < Double.POSITIVE_INFINITY || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (Double.NaNNaN && Double.isNaN(real) || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.POSITIVE_INFINITY) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(enc));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (Double.NaNNaN_VALUE_NULL || Double.isInfinite(real) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (Double.isNaN(def) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (Double.isNaN(rhs) || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (Double.NaNNaN && Double.isNaN(imaginary));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (Double.NaNNaNNaN_VALUE_NULL || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (Double.NaNNaN_VALUE_NULL || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (Double.NaNNaNNaN < Double.MIN_VALUE || imaginary == 0.0);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (Double.NaNNaN < Double.MIN_VALUE || imaginary == 0.0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : new Double(Math.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (Double.isInfinite(real) || Double.isNaN(imaginary));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(encinary));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (Double.NaN && imaginary == 0.0) ? 1.0 : Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 0.0 : 1.0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (Double.NaNNaN && Double.isNaN(real) || Double.isNaN(imaginary));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "returnisInfinite() && (Math.abs(imaginary) == 0.0));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (Double.isNaN(real) || Double.isInfinite( imaginary));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (Double.NaNNaNNaN < Double.POSITIVE_INFINITY || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : ZERO;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returnisInfinite() && imaginary;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(reFeature.POSITIVE_INFINITY));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(getImaginary));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(reFeature.NO_VALUE_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(enclosing));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (Double.isNaN(real) || Math.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (Double.NaN && Double.isNaN(real) || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.POSITIVE_INFINITY));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (Double.isNaN( imaginary) || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(real));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (Double.NaNNaN < Double.MIN_VALUE || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : NaN;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (Double.NaNNaN && Double.isNaN(a) || Double.isInfinite(getImaginary()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.sqrt(1)) ? 0.0 : 1.0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 0.0 : ZERO;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : -real;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (Double.NaNNaN < Double.POSITIVE_INFINITY || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(reFeature.NO_VALUE_AS_NULL));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 0.0 : NaN;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.sqrt(1)) ? 0.0 : ZERO;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(Math.MAX_VALUE));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(insn, 0.0));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : \"-Infinity\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (Double.NaNNaNNaN && Double.isNaN(real) || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (Double.isNaN(imaginary) || Double.isInfinite(enc));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(getImaginary()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(2.0)) ? 0.0 : ZERO;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(2.0)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (Double.NaN && Double.isNaN(real) || Double.isNaN(imaginary));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(b));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(rhs));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (Double.NaNNaN && Double.isNaN(a) || Double.isInfinite(getImaginary));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : new Double(Math.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (Double.NaNNaNNaN_VALUE_NULL || Double.isInfinite(imaginary);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (Double.NaNNaN || Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (Double.NaNNaN && Double.isNaN(a) || Double.isInfinite(2.0)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (Double.NaNNaN && Double.isNaN(real) || Double.isNaN(imaginary);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 : new Double(Math.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(enc));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 0.0 : (1.0 -real;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 0.0 : (1.0 -Math.MAX_VALUE * Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (Double.NaNNaN < Double.POSITIVE_INFINITY || Double.isNaN(imaginary));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (Double.isNaN(imaginary) || Double.isInfinite(real));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.maxValue(a) || Double.isInfinite(2.0)) ? 0.0 : 1.0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 0.0 : \"-Infinity\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (Double.isInfinite(real) || Double.isNaN(imaginary);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(.0)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (Double.NaNNaN && Double.isNaN(a) || Double.isInfinite(2.0)) ? 0.0 : ZERO;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (Double.NaNNaN && Double.isNaN(Math.abs(imaginary));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(Encoding));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (Double.NaNNaN && Double.isNaN(a) || Double.isInfinite(re.POSITIVE_INFINITY));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (Double.NaNNaN && Double.isInfinite(imaginary));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "returnisInfinite() && (Math.abs(imaginary) < 0.0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (Double.NaNNaN && imaginary == 0.0) ? 1.0 :(';",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (Double.isNaN(real) || Double.isInfinite(reFeature.y)) {",
                "identical": false
            }
        ],
        "buggy_line": "return NaN;",
        "fixed_line": "return INF;"
    },
    "Time-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (nextLocal > offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (nextLocal != nextAdjusted) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (prev > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (prev > Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (nextLocal != offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (nextLocal > nextAdjusted) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (prev != offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (nextLocal > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (nextLocal == (instantLocal - offsetLocal)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (prev >= offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (nextLocal >JSR) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (nextLocal > instantAdjusted) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (prev != 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_MINUTE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (instantLocal > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (prev >= instantLocal) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (nextAdjusted == (instantLocal - offset)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_SECOND) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (nextLocal > currentAdjusted) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (nextLocal > firstLocal) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (prev > instantLocal) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (nextLocal > startAdjusted) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (prev != nextAdjusted) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (nextLocal >histed) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (nextLocal > Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (instantLocal > Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (prev >= DateTimeConstants.MILLIS_PER_MINUTE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (nextLocal >lit.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_MINIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (nextLocal > bestAdjusted) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_MINUTE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (prev instanceof long prevLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (nextTransition(instantLocal - offsetLocal)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (nextLocal > ((long) + offsetAdjusted) / DateTimeConstants.MILLIS_PER_MINUTE) - offset)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (prev != instantLocal) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (prev > offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (nextLocal > Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (nextLocal > endAdjusted) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (nextLocal > numAdjusted) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (prev != Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (nextLocal > ((long) + offsetAdjusted) / DateTimeConstants.MILLIS_PER_SECOND) - offset)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_MINIMUM_SIZE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (nextLocal > exprAdjusted) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (prev != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (prevTransition(instantLocal - offsetLocal)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (prev >= Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (nextLocal > DateTimeConstants.ACC_PER_MINUTE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (nextLocal > offsetLocal) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (nextLocal > SURR1_LAST) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_SECOND) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_HOUR) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_SECOND) < 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (nextLocal >propAdjusted) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (instantLocal > offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) < 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (nextLocal >JSDocInfo.getOffset(instantLocal)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (nextLocal > relativeAdjusted) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (prevLocal > offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (prev < instantLocal) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (prev < offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (nextLocal > returnedAdjusted) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (nextLocal != JsonAdjusted) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (nextLocal > DateTimeConstants.ACC_PER_SECOND) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (nextLocal > ((long) + offsetAdjusted) / DateTimeConstants.MILLIS_PER_HOUR) - offset)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_SECOND) - offset)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (nextLocal > testLocal) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (instantLocal > firstLocal) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (nextLocal > middle) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_HOUR) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (nextLocal > size) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (nextLocal > ((instantLocal - offsetLocal) / DateTimeConstants.MILLIS_PER_MINUTE) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_MIN) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (nextLocal > ((instantLocal - offsetLocal) / DateTimeConstants.MILLIS_PER_SECOND) - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (nextLocal > saveded) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (nextLocal > DateTimeConstants.ACC_PER_MIN) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (nextLocal >Instant) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (nextLocal > ((long) + offsetAdjusted) / DateTimeConstants.MILLIS_PER_MINIMUM_VALUE) - offset)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (prev >= DateTimeConstants.MILLIS_PER_SECOND) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (nextLocal > ((long) + offsetAdjusted) - offset)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (offsetLocal > offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (nextLocal > DateTimeConstants.ACC_PER_MINIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (nextLocal > ((long) - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (nextLocal > periodAdjusted) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (prev >= firstLocal) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (nextLocal > availableAdjusted) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (nextTransition != 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (nextLocal > ((instantLocal - offsetLocal) / DateTimeConstants.MILLIS_PER_SECOND) < 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (nextLocal > DateTimeConstants.MILLIS_PER_MINUS) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (nextLocal > DateTimeConstants.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (nextLocal > DateTimeConstants.MIDDLE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_MINIMUM_VALUE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (nextLocal > ((instantLocal - offsetAdjusted) / DateTimeConstants.MILLIS_PER_SECOND) + offset)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (nextLocal >prop.getTransition(instantLocal - offsetLocal)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (nextLocal > ((instantLocal - offsetLocal) / DateTimeConstants.MILLIS_PER_SECOND) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (i >= offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (nextLocal == (instantLocal - offsetAdjusted) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (prevTransition(instantLocal - offsetAdjusted) > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nextAdjusted == (iLocal - offset)) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (offsetLocal > 0) {",
        "fixed_line": "} else if (offsetLocal >= 0) {"
    },
    "Csv-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "final boolean emptyHeader = header.trim().length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final boolean emptyHeader = header.trim().length == 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"[]\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final boolean emptyHeader = header.trim().containsKey(headerName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"last\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final boolean emptyHeader = header.trim().toLowerCase();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final boolean emptyHeader = header.trim().length + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"last\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final boolean emptyHeader = header.trim().length();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final boolean emptyHeader = header.trim().length + 6;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"\"));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final boolean emptyHeader = header.trim().length + 2;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"apply\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"0\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header.substring(1));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"groovy.lang\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"number\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Appearance\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Primitive\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"creator\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final boolean emptyHeader = header.trim().length + \"=\";",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final boolean emptyHeader = header.trim().containsAll(header);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"apply\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final boolean emptyHeader = header.trim().size();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"_\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" suffix\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final boolean emptyHeader = header.trim().length == 0) ? false : header.trim().length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" parsers\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\">\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"!\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header + \" \");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" JAVA\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"start\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" defaults\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"item\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" ');",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final boolean emptyHeader = header.trim().length + \" \");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" BigDecimal\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final boolean emptyHeader = header.trim().hashCode();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final boolean emptyHeader = header.trim().length == 0) ? true : header.trim().length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final boolean emptyHeader = header.trim().length == 0) ? false : header;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final boolean emptyHeader = header.trim().containsKey();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Target\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Clone\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"tag\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header.charAt(i));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"parentNode\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"--\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"groovy.lang\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" A\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final boolean emptyHeader = header.trim().length == 0) ? String.valueOf(header.length) : header;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"tree\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"d\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"CE\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"count\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"new String\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"</\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"=\\\"\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" Block\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" 5)\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Queue\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" auto\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final boolean emptyHeader = header.trim().length == 0) ? false : header.trim().containsKey(headerName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"jpeg\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"TEXT_\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"GMT\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" getters\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header.substring(2));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"last\"))) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Equals\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final boolean emptyHeader = header.trim().length == 0) ? false : header.trim().startsWith(\"\"));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" \"\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"2\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"::\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"cglib\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Adjustment\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header)));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header)) == header;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" Object\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"duplicate\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Placeholder\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\" smallest\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"LOW\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final boolean emptyHeader = header.trim().length + \"]\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"KE\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"=\\\"\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"bind\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final boolean emptyHeader = header.trim().containsKey(header.substring(0, it.length() - 2);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"lang\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final boolean emptyHeader = header.trim().\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final boolean emptyHeader = header.trim().startsWith(\"Guard\");",
                "identical": false
            }
        ],
        "buggy_line": "final boolean emptyHeader = header.trim().isEmpty();",
        "fixed_line": "final boolean emptyHeader = header == null || header.trim().isEmpty();"
    },
    "JacksonCore-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i <= maxCode) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (codes[i] != 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error:",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-ASCII (will error outBuf[i] || i < input[i] != 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-ancestor, but do we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error outBuf[i]",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error outBuf[i] || i < input[i] != 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-ASCII (will error out later)",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, there't really need 6 bytes but do we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error(i] || i < input[i] != 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i <= maxCode) { // identifier, but do we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-Infinity()+\") || i < input[i] != 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if there't really need 6 bytes but do we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for output?",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error case",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error outBuf[i] skip for now",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but was expecting it't really need 6 bytes but do we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do a tight inner loop:",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if1 < input 16 || c > INT_9) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input 16-i",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if non-i]",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if non-i",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || i > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-ancestor, but do we have room for now (will error:",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error outBuf[i] || c >= input[i] != 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error1 < input[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if we have room for now (will error out later)",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i]",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorVALUE_ESCAPE_CUSTOM't really need 6 bytes but if1 < input 16-i",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error outBuf[i] || c < input[i] != 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, there't really need 6 bytes but do we have room for now (will error:",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error outBuf[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (as there't really need 6 bytes but if1 < input[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-space",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error9%[i]",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || c > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > c)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error1 < input[i] || c > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorVALUE_ESCAPE_CUSTOM't really need 6 bytes but if non-i",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || c > INT_SPACES[i] != 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-ASCII (will error outBuf[i] skip for now",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (char)",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorgetChar] != 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || c > INT_SPACES[i] != 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input 16 || c > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error or broken",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input 16 || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error1 < input[i] || i > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorValue1 < input[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if non-i != 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || c > INT_SPACE",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || c > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need to skip for now",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error lower < input[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, there't really need 6 bytes but do we have room for now (will error outBuf[i]",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error1 < input[i] || c > INT_SPACE",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-ancestor, but do we have room for now (will error outBuf[i]",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorValue1 < input[i] || i > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input 16 || c > INT_9) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorVALUE_ESCAPE_CUSTOM't really need 6 bytes but if1 < input",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || c > INT_SPACE",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, since 'c' || c > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input 16 || i > c)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error at most 2 byte/char case or broken",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (as there't really need 6 bytes but if1 < input[i] || i > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error state skip for now",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > INT_SPACE",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (x1 < input[i] || c > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (as there't really need 6 bytes but if non-i",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorValue != 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error1 < input[i] || i > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > INT_SPACES[i] != 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input 16 || c > INT_SPACE",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, skip for now",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (c",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if there't really need 6 bytes but...",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorVALUE_ESCAPE_CUSTOM't really need 6 bytes but if non-i]",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || c > INT_QUOTE",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > INT_9)",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (x1 < input[i] || c > INT_SPACE; retain one zero",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (as there't really need 6 bytes but if1 < input[i] || c > INT_SPACES[i] != 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (as there't really need 6 bytes but if1 < input[i]",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error lower < input[i] || i > INT_QUOTE/char case or broken",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-verbose (will error out later)",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errorReporter",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (as there't really need 6 bytes but if1 < input 16-i",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || i > INT_SPACE",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || i > epsilon, skip for now",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if there't really need 6 bytes but do we have room for output?",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || i > INT_SPACES[i] != 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error1 < input[i]",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input it' || c > INT_9)",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will error(i] skip for now",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i <= maxCode) { // identifier, as per [JACKSON-102] Allow forced escaping if non-standard, but do we have room for now (will errora't really need 6 bytes but if1 < input[i] || i > INT_SPACE; retain one zero",
                "identical": false
            }
        ],
        "buggy_line": "if (i <= maxCode) {",
        "fixed_line": "if (i < maxCode) {"
    },
    "JacksonDatabind-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == UUID.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == Character.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == Class.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == sat || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == int.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == Integer.TYPE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == Date.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == HashMap.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == sat || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == attr.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw ==' || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == Int || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == BigInteger.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == GregorianCalendar.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == short.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == FRAME.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == Integer.TYPE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == ObjectNode.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw ==our.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw ==' || raw == String.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Character.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == ArrayList.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == URI.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw ==String.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == Integer.MIN_VALUE && raw == String.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == int.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == Int || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == Long.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == sat || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == mid.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw ==' || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == sat || raw.class == NoClass.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw ==Parent.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw ==Class.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw ==c.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == Integer.MIN_VALUE || raw == String.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == ParameterizedType.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw ==domain.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw ==Document.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == char.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == Int || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw ==' || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == Integer.MIN_VALUE && raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == sig.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw ==' || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == intr.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw ==Full.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == Integer.MIN_VALUE || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == sat || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == AnnotatedClass.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw ==' || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == sat || raw == String.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw ==cv.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == next.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == sat || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == bld.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == sat || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == nullValue.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == cd.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == df.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == ctx.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw ==Expr.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == considered.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == sat || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw ==Primitive.class) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == function.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == INT_TYPE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == Int || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == Int || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == Integer.MIN_VALUE && raw == short.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == Calendar.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw ==' || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == predicate.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == Instant.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw ==Mar.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == setName.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw ==report.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == sat || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == wrap.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw ==StringBuilder.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw ==4.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == Pattern.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "JacksonXml-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" : src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-serFeatures)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup '\"+_rootNameLookup",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.externs beanDesc()+\" entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup deserializers)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-gcd)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup deserializers)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueSerializer()) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" or src._rootNameLookup",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueSerializer -1, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-staticTyping, src._rootNameLookup '\"+src't really need to use of type \"+src.getClass().getName()+\", \" Object.valueOf(src.valueType)+\") in src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueToUpdate);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-staticTyping, src._rootNameLookup '\"+src't really need to use of type \"+src.getClass().getName()+\", src._rootNameLookup",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-rootNameLookup entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" .util.textValueSerializer());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" or src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-orderType()) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-(0, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup\"??000000, src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries == src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries == src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.externs beanDesc()+\" entries in src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON- * src._rootNameLookup entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src.getRawClass)) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-5, src._rootNameLookup entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries == src._rootNameLookup",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueInstantiateFactory.externs do implicit re-rootNameLookup",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" .lang.\"",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-(0, src._rootNameLookup entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueToUpdate);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-standard prop, src._rootNameLookup entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup '\"+src.length+\"'t have name and then make it was copied",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueSerializer());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup '\"+src.length+\"'t do implicit re-rootNameLookup",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-ame, src._rootNameLookup '\"+src't really need to use of type \"+src.getClass().getName()+\", \" Object.class",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookupStep",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup '\"+src.valueSerializerstore_rootNameLookup",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" into src._rootNameLookup",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueToUpdate",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-staticTyping, src._rootNameLookup '\"+src't really need to use of type \"+src.getClass().getName()+\", \" Object.class",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup deserializers)) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+_rootNameLookup",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-staticTyping, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookupStep",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup '\"+src.valueToUpdate);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup '0'+\")\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup>();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src.getRawClass)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-staticTyping, src._rootNameLookup '\"+src't really need to use of type \"+src.getClass().getName()+\", \" Object.denominator/= src._rootNameLookup",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-standard prop, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup chars, src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" or src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.externs beanDesc()+\" entries in src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup version 1 or src._rootNameLookup",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.externs beanDesc()+\" entries in src._rootNameLookup));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup deserializers)) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.denominator);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup chars, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup '\"+src.valueSerializer> instead(_rootNameLookup);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-ame, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" or src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON- }, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup\" .lang.\"",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON- }, src._rootNameLookup entries in src._rootNameLookup",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\"??000000, src._rootNameLookup '\"+src.valueInstantiator.getRawClass)) return src._rootNameLookupStep);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup\" .langNameLookup",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't do implicit re-goog.WRITE_XML_COLON as per [JACKSON-staticTyping, src._rootNameLookup '\"+src't really need to use of type \"+src.getClass().getName()+\", prop, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueType()) return src._rootNameLookup '\"+src.valueToUpdate);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-(0, src._rootNameLookup entries in src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueSerializer -1, src._rootNameLookup);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueSerializer -1, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueTypeDesc()+\" entries in src._rootNameLookup 10) return src._rootNameLookup '\"+src.valueInstantiator\".equals(src._rootNameLookup\"??000000, src._rootNameLookup",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_rootNameLookup = src._rootNameLookup; // can't really need 6 bytes use of type \"+src.getClass().getName()+\": can not override if it has towrappingput(src._rootNameLookupindScope.getRawClass(), src._rootNameLookup, root as per [JACKSON-goog.valueToUpdate);",
                "identical": false
            }
        ],
        "buggy_line": "_rootNameLookup = src._rootNameLookup;",
        "fixed_line": "_rootNameLookup = new XmlRootNameLookup();"
    },
    "Math-94": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (u * v == 0) { return 1 << (u * v == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (u * v == 0) { // [JACKSON-v] = 1 << (u * v == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (u * v == 0) { returnMath.abs(v - u) < 0 || (u * v == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || (u * v == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v is < 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || (u * v + u & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Math.abs(v)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are simplest to Integer.MAX_VALUE; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Integer.MAX_VALUE) < 1 || u > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u * v are both == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & 0)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v; put < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are simplest to beMath.abs(u)",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v1 & 0x3FREQUENCY && v == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (u * v == 0) { returnMath.abs(v - u) < 0 || (u & DIM) != 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v is u and v are both even",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || u > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || u > epsilon) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are simplest to Integer.MIN_VALUE; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Integer.MAX_VALUE) < 32) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are both even",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || u > epsilon)",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (u * v == 0) { returnMath.abs(v - u) < 0 || (u * v + u & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || Float.isNaN(u)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v + u & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some (u * v are both even...",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some (u * v == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || (u * v + u & 0)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (u * v == 0) { returnMath.abs(u) -rmin) < 0 || u > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v are both == 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u * v == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (u * v == 0) { returnResolver().length() * v == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v is included in u and v are both even",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (u * v == 0) { returnMath.abs(u) -rmin) < 0 || (u * v == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (u * v == 0) { // [JACKSON-v] = - u and v are both even",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || (u * v + u & DIM) > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Integer.MAX_VALUE) < 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (u * v == 0) { return reset; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & DIM) > 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (u * v == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || u > epsilon) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || u > 32) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (u * v == 0) { returnMath.abs(v - u) < 0 || (u & Frac_mask)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some 0.0, u and v are both even",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u & DIM) != 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s < 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some 0.0, u and v are both in < 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v1 & 0))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (u * Math.abs(v) > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v1 & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s somenew String(v)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (u * Math.abs(v)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u & Frac_mask)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v is u and v are both regular properties and v are both in < 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some 0.0, u and v are both regular properties and v are both even",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || u > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are arranged ANTICLOCKWISE",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & DIM) != 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & 1) == 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (u * v == 0) { return 1 << (u * v == 0 || u & 1) == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some (u * v are both regular properties and v are both even...",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v is u and v are both in < 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Integer.MAX_VALUE) < 0 || u > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v; put < 0 || u > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some 0.0, u and v are both number; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v1 & 0x < 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Integer.MAX_VALUE) < 0 || u & DIM) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u * v1 < 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (u * v == 0) { // [JACKSON-v] u and v are both even",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u * v1 & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & 0))) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || second > 32) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v1 & 0x3e)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are both regular properties and v are both in < 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || u & DIM) == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v1 & 0))) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (u * v == 0) { returnMath.abs(u) -v) < 0 || (u * v1 & 0))) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v + u & DIM) != 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (u * v == 0) { returnMath.abs(u) < 0 || (u * v + u & Frac_B) == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s some (u * v are both regular properties and v are both even",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u * v1 & 0))) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (u * v == 0) { returnMath.abs(u) - Integer.MAX_VALUE; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) chars[u * v == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x1s somenew Integer(v)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v is u and v are both regular properties and v are both even",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (u * v == 0) { returnMath.abs(u) -rmin) < 0 || (u * v + u & 0)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || second > 32) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (u * v == 0) { // [JACKSON-v] = - u and v are both in < 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (u * v == 0) { // [JACKSON-v] = v are both even; put < 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u)0x < 0 || (u & Functor.length() - u)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (u * v == 0) { // [JACKSON-v] = -Math.abs(u) < 0 || (u * v1 < 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (u * v == 0) {",
        "fixed_line": "if ((u == 0) || (v == 0)) {"
    },
    "JacksonDatabind-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _bindAndReadValues(_parser, _jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _bindAndReadValues(_parser, _contextFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _bindAndReadValues(_parser, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _bindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _bindAndReadValues(_parser, otherFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _bindAndReadValues(_serializationFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _bindAndReadValues(_serializationConfig.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _bindAndReadValues(_parser, offset, length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _bindAndReadValues(_parser, src.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _bindAndReadValues(_dataFormatReaders.findFormat(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _bindAndReadValues(_parser, _contextTypeFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _bindAndReadValues(_ioContext.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _bindAndReadValues(_serializationFeatures, _jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _bindAndWriteValues(_jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _bindAndReadValues(_parser, _outputStreamFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueHandler, offset, length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _bindAndCloseAsTree(_jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _bindAndReadValues(_inputStream, _jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructError(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructSpecialized, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _bindAndReadValues(_parser, _nullFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _bindAndReadValues(_parser, idFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedImageReaders.findFormat(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedImageReaders.findFormat(src), false);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _bindAndReadValues(_serializationFormatReaders.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _bindAndReadValues(_parser, FunctionParserFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _bindAndReadValues(_ccFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _bindAndReadValuesFactory.createParser(src, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _bindAndReadValues(_serializationReaders.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _bindAndReadValues(_outputStream, _jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _typeFactory.constructSpecializedType(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _typeFactory.constructType(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _bindAndReadValues(_parser, _StdFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _bindAndReadValues(_parser, numberFormatReaders.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormat);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate).createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _bindAndReadValues(_serializationFeatures, _parserFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _bindAndReadValues(_cfgFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _bindAndReadValues(_parser, _serializationConfig.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _bindAndReadValues(_parser, _ secondFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _bindAndReadValues(_parser, iFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedEnd, length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _bindAndCloseFactory.createParser(src, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.findFormat(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructSpecializedType(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _ user, length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructFormat(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueBind);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _outputStream);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), offset, length);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _bindAndReadValues(_parser, mixReaders.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _bindAndReadValues(_parser, defaultFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueBuffer, offset, length);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _bindAndReadValues(_parser, that.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructReaders.findFormat(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), JsonFormat.constructError(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedImageReaders.findFormat(src, offset, length), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _bindAndReadValues(_parser, nodeFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructType(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _bindAndReadValues(_parser, _inputStream.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueHandler, length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _bindAndReadValues(_xmlParserFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _bindAndReadValues(_JONFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _bindAndReadValues(_parser,StdFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueInstantiator);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedData);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _typeFactory.constructFormat(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _typeFactory.constructError(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueClass, offset, length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "throw _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedImageReaders.findFormat(src, offset, length));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.findFormat(src), _valueToUpdate));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedImageReaders.findFormat(src), offset, length);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _bindAndReadValues(_parser, ixFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset, length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _bindAndReadValues(_jsonFactory.createGenerator(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _valueHandler, offset, length);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _bindAndReadValues(_parser, this.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _bindAndReadValues(_parser, _valueToUpdate);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _bindAndReadValues(_calendarFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueFormat));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _bindAndReadValues(_ DateTimeZoneFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.findFormat(src, offset, length));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _bufferedStart, length);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _bindAndReadValues(_calFactory.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate).findParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _inputStream);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _bindAndReadValues(_parser, Collections.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructToken(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructWriter(src, offset, length));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _bindAndReadValues(_parser.createParser(src), _valueToUpdate);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _bindAndReadValues(_jsonFactory.createParser(src), _nodeFactory.constructObjectId(src), _valueToUpdate);",
                "identical": false
            }
        ],
        "buggy_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),",
        "fixed_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),"
    },
    "JacksonDatabind-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "|| t.getContentType().getRawClass() != Object.class);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "|| t.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "|| t.getContentType() != Object.class);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "|| t.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "|| t.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "|| t.getContentType().getRawClass() == Object.class);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| t.getContentType().getRawClass() != Object.class;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "|| t.getContentType().getRawClass() != JsonSerializer.None.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "|| t.getContentType() != Object.class;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass())));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "|| Class.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "|| t.getContentType().getRawClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "|| t.getContentType().getRawClass();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "|| t.isAssignableFrom(t.getRawClass())));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "|| t.getContentType().getRawClass() != XMLStreamReader.class);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "|| t.getContentType() != JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "|| t.getContentType().getRawClass() != Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "|| t.isAssignableFrom(t.getRawClass().getRawClass()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "|| t.class.isAssignableFrom(str.getRawClass()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| t.getContentType().getRawClass() != JsonSerializer.class);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass().getRawClass()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "|| Class.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "|| t.class.isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "|| t.class.isAssignableFrom(str.getRawClass())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| t.getContentType() != Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "|| t.getContentType() != JsonToken.VALUE_STRING);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "|| t.getContentType().getRawClass() != Class.class);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "|| t.getContentType() != JsonSerializer.None.class);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "|| t.getContentType().getRawClass() == JsonSerializer.None.class);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| t.getContentType().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "|| t.isAssignableFrom(t.getRawClass().getRawClass());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "|| t.getContentType() != XMLStreamReader.class);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "|| t.getContentType().getRawClass() != XMLStreamConstants.TYPE_CLASS);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "|| t.getContentType() != XMLStreamClass.class);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "|| t.getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "||ial.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "|| t.getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "|| t.getContentType() != JsonToken.VALUE_NULL);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "|| t.getContentType().getRawClass() != XMLStreamReader.class;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "|| isInterface.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "|| t.getContentType().getRawClass() != JsonSerializer.None.class;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "|| getXt.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| t.class.isAssignableFrom(n.getRawClass())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "|| t.getContentType().getRawClass() == Object.class;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| cap.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "|| t.getContentType().getRawClass() != JsonWrite.class);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "||Tick.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "|| t.getContentType() != JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass().getRawClass())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "|| t.getContentType().getRawClass() != match.getRawClass()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "|| isInterface.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "|| t.getContentType().getRawClass() != XMLStreamConstants.TYPE_STRING);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "|| t.getContentType() != JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "|| t.startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "|| t.class.isAssignableFrom( 1) || t.getRawClass().isAssignableFrom(JsonRawClass()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "|| t.getContentType().getRawClass() != match.getRawClass()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "|| isInterface.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "|| Object.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "|| t.class.isAssignableFrom( 1) || t.isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "|| t.isAssignableFrom(t.getRawClass().getRawClass())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "|| t.isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "|| t.getContentType().getRawClass() != String.class);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "|| t.getContentType().getRawClass() != match.getRawClass();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "|| implicit.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "|| t.getRawClass() == Object.class);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()) || t.getRawClass().isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "|| t.class.isAssignableFrom( 1) || t.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "|| t.getContentType().getRawClass() != Enum.class);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "|| Class.class.isAssignableFrom(t.getRawClass())));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()) && t.getRawClass().isAssignableFrom(JsonRawClass()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "|| t.getContentType().getRawClass() != JsonSerializer.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "|| isPrimitive.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "|| t.class.isAssignableFrom( 1) || t.getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()) || t.getRawClass().isAssignableFrom(JsonSerializer.class()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "|| t.class.isAssignableFrom(JsonSerializer.class)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()) || t.getRawClass().isAssignableFrom(JsonRawClass()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "||Tick.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "|| t.class.isAssignableFrom( 1) || t.getRawClass().isAssignableFrom(JsonSerializer.class);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "|| t.getContentType().getRawClass() != JsonToken.VALUE_STRING);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()) || t.getRawClass().isAssignableFrom(str()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "|| t.class.isAssignableFrom(u.getRawClass()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "|| t.class.isAssignableFrom(t.getRawClass()) && t.getRawClass().isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "|| t.getContentType().getRawClass() == JsonWrite.class);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "|| t.getContentType().getRawClass() != Class.class;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "|| t.class.isAssignableFrom( 1) || t.getRawClass()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "|| logger.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "|| t.class.isAssignableFrom(str.getRawClass());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "|| logger.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "|| t.class.isAssignableFrom( 1) || t.getRawClass().isAssignableFrom(n.getRawClass()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "|| t.getContentType().getRawClass() != XMLStreamConstants.class);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "|| got.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "||ial.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "|| t.getContentType().getRawClass() == JsonSerializer.None.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "|| t.getContentType() != XMLStreamClass.class;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "|| t.getContentType() != Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "|| t.getClass().isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "|| e.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            }
        ],
        "buggy_line": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
        "fixed_line": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));"
    },
    "Mockito-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getSimpleName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getSimpleName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != char.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getReturnType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getSimpleName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getSimpleName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getSimpleName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getModifiers().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getSimpleName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getSimpleName() == other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getSimpleName())) { return 0; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getSimpleName() != char.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != Object.class; return 0;) && invocation.getModifiers().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != Object.class; return 0;) && invocation.getReturnType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getSimpleName())) { return 0; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != Object.class; return 0;) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() == String.class) ? \"null\" : method; return 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != char.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on bounds.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() == Object.class) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.method.getSimpleName())) { return 0; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.method.getSimpleName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != char.getClass().getName()) return 0;) && invocation.getClass().getName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().isArray()) return 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().isArray()) return 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().isArray()) return 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getReturnType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != Object.class; return 0;) && invocation.getSimpleName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.method.getSimpleName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getSimpleName() == other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getModifiers().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getSimpleName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\")\\n.getClass().getName()+\") && invocation.getClass().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getSimpleType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getModifiers().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() == Object.class) ? 1 : b.getClass().getName();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() == Object.class) ? 1 : b.getClass().getName();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getSimpleName() == other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getModifiers().compareTo(other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\")\\n.getClass().getName()+\") && invocation.getClass().equals(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getSimpleName() == other.getClass().getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getSimpleName())) { return 0; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().isArray()) return 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getSimpleName().equals(other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getSimpleName() != null; return 0;) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != char.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getBasicMethod.getSimpleName().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on bounds.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getSimpleName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getSimpleName() == char.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getReturnType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getSimpleName() == other.getClass().getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getRawClass().isAssignableFrom(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getSimpleName().equals(other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() == Type.class) ? 1 : method; return 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName()+\") != Object.class; return 0;) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getSimpleTypeName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getReturnType() == other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getSimpleName() == other.getClass().getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getSimpleName()).equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || !this.isArray()) return 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getRawClass())) { return 0; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on bounds.getClass().getName()+\") && invocation.getClass().getName().equals(other.getSimpleName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() == Object.class) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getReturnType());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getModifiers().compareTo(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+se.getClass().getName()+\") || invocation.startsWith(\"object.getClass().getName().equals(other.class.getName());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getSimpleName().compareTo(other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getRawParameterType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getSimpleName() != null; return 0;) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getSimpleName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getReturnType());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getSimpleType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.class.getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getGenericParameterType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") && invocation.getClass().getName().equals(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return 0; // important for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().isArray()) return 0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(className.getClass().getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) { return 0; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getSimpleName().compareTo(other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return 0; // important for method '\"+a.getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") != null && invocation.getClass().getSimpleName() == other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getModifiers().compareTo(other.getClass().getName()) return 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;) && invocation.getSimpleName().compareTo(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getSimpleName() != String.class; return 0;) && invocation.getRawType().equals(other.getClass().getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != final Comparable.class; return 0;) && invocation.getRawClass().isAssignableFrom(other.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type of method on mock.getClass().getName()+\") && invocation.getClass().getName().equals(other.getSimpleName())) { return 0; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return 0; // the[] for method '\"+a.getName()+\"': class \"+iae.getClass().getName()+\": can not determine type id (from class \"+object.getClass().getName()+\") || invocation.getClass().getName() != Object.class; return 0;",
                "identical": false
            }
        ],
        "buggy_line": "return 1;",
        "fixed_line": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;"
    },
    "Mockito-29": {
        "fixes": [
            {
                "k": 1,
                "patch": "description.appendText(\")\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "description.appendText(\", \");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "description.appendText(\")\").append(description);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "description.appendText(\"mv.visitQuoting(description);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "description.appendText(\", problem: \").append(description);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "description.appendText(\"Quoting: \").append(description);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "description.appendText(\" (\").append(description);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "description.appendText(\" year: \").append(description);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "description.appendText(\" filter: \").append(description);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "description.appendText(\"</wantedoting: \").append(description);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED_ERROR: \").append(description);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "description.appendText(\"if variable \").append(description);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "description.appendText(\"if \").append(description);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "description.appendText(\" toString: \").append(description);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "description.appendText(\" \");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "description.appendText(\" filter: \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 18,
                "patch": "description.appendText(\" \", \" + this.wanted.toString());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "description.appendText(\"ifYear: \").append(description);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "description.appendText(\"instoting: \").append(description);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "description.appendText(\"Digits \").append(description);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "description.appendText(\" filter: \").append(wanted.toString());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "description.appendText(\", \", \").append(description);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED_THIS: \").append(description);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "description.appendText(\", problem: \").append(wanted.toString());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "description.appendText(\"if\", (long) description.toString());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "description.appendText(\" filter: \").append(axis.getClass().getSimpleName()).append('\\n');",
                "identical": false
            },
            {
                "k": 28,
                "patch": "description.appendText(\"mv.visitQuoting(localizationResources.toString());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED = description;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "description.appendText(\"+wanted.toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "description.appendText(\" append \").append(description);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "description.appendText(\", problem: \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 33,
                "patch": "description.appendText(\" filter=\").append(description);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED = description: \").append(description);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "description.appendText(\"Validoting: \").append(description);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "description.appendText(\" toString: \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 37,
                "patch": "description.appendText(\"</wanted\\n\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED\").append(description);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "description.appendText(\" year: \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 40,
                "patch": "description.appendText(\", problem: \").append(wantedizationResources.toString());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "description.appendText(\").append(wantedizationResources.toString());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "description.appendText(\"if\", (int) description.toString());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "description.appendText(\" year: \").append(wanted.toString());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "description.appendText(\"'\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "description.appendText(\" = description\").append(description);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "description.appendText(\" filter: \").append(axis.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "description.appendText(\").append(description);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED = description\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "description.appendText(\" (\").append(description.toString());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "description.appendText(\";}\\n\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "description.appendText(\"compute\").append(description);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "description.appendText(\"mv.visitMaxs(\")\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "description.appendText(\"if variable \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 54,
                "patch": "description.appendText(\"Q\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "description.appendText(\"\\\"\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "description.appendText(\"Collection(\").append(description);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "description.appendText(\", problem: \").append(wantedizationResources.getMessage(\")\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "description.appendText(\"+wanted.getClass().getQuoting(description);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "description.appendText(\"if \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "description.appendText(\" ac\").append(description);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "description.appendText(\"Range[\").append(description);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "description.appendText(\"if\", description);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "description.appendText(\";\\n\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "description.appendText(\" toString: \").append(wanted.toString());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "description.appendText(\" filter: \").append(wantedizationResources.toString());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "description.appendText(description.toString());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "description.appendText(\"if\", (long) description.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 68,
                "patch": "description.appendText(\" year:\").append(description);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "description.appendText(\"Quoting: \").append(wanted);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "description.appendText(\" \", \" + getLineNumber() + description);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "description.appendText(\", problem: \").append(axis.getClass().getSimpleName()).append('\\n');",
                "identical": false
            },
            {
                "k": 72,
                "patch": "description.appendText(\" (\").append(description.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 73,
                "patch": "description.appendText(\"}\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "description.appendText(\"+wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 75,
                "patch": "description.appendText(\"</wantedoting:\").append(description);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "description.appendText(\", problem: \").append(wanted);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "description.appendText(\" \", \").append(description);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "description.appendText(\" = description.describeTo(description);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "description.appendText(\"record\\n\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "description.appendText(\"-\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "description.appendText(\" toString: \").append(wantedizationResources.toString());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "description.appendText(\"ifYear: \").append(wanted.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "description.appendText(\"}\\n\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "description.appendText(\"if\", (int)description.toString());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "description.appendText(\" \", \" + this.wantedToQuoting.toString());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "description.appendText(\"ifYear: \").append(wanted.toString());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "description.appendText(\"if\", (long) description.toString();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "description.appendText(\"mv.describe\").append(description);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "description.appendText(\", \", \" + this.wanted.toString());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "description.appendText(\"Opcodes.UNINITIALIZED_THIS\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "description.appendText(\"+wantedizationResources.getMessage(\")\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "description.appendText(\" year: \").append(wantedizationResources.toString());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "description.appendText(\" filter: \").append(wantedizationResources.toString()).append('\\n');",
                "identical": false
            },
            {
                "k": 94,
                "patch": "description.appendText(\"if variable \").append(wanted.toString());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "description.appendText(\").append(wantedizationResources.getMessage(\")\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "description.appendText(\"+wanted]).append(description);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "description.appendText(\"+wantedArray = description.toString();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "description.appendText(\">\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "description.appendText(\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "description.appendText(\", problem: \").append(wantedizationResources.toString()).append('\\n');",
                "identical": false
            }
        ],
        "buggy_line": "description.appendText(wanted.toString());",
        "fixed_line": "description.appendText(wanted == null ? \"null\" : wanted.toString());"
    },
    "Jsoup-45": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (\"-?\".equals(name)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (\"en\".equals(name)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (\"length\".equals(name)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (\"nativeMethod\".equals(name)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (\"zipMethod\".equals(name)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (\"name\".equals(name)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (\"-dst\".equals(name)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (\"area\".equals(name)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (\"Lnull;\".equals(name)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (\"getNext\".equals(name)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (\"set\".equals(name)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (\"iter\".equals(name)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (\"-src\".equals(name)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (\"-marker\".equals(name)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (\"arguments\".equals(name)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (\" instances\".equals(name)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (\"Lineno\".equals(name)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (\"Infinity\".equals(name)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (\" triplets\".equals(name)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (\"str\".equals(name)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (\"Vertical\".equals(name)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (node.getType() == Token. '-' || name.charAt(0) == '[') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (\"iterators\".equals(name)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (node.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (\"Shadow\".equals(name)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (\"ick\".equals(name)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (\"file\".equals(name)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (\" Arrays.equals(name)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (\"pw\".equals(name)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (\" Arrays.isFunction(name)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (\"-localName\".equals(name)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (\"-features\".equals(name)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (\"<name.equals(name)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (\"number\".equals(name)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (\"call\".equals(name)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (\"Multiline\".equals(name)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (\"encoded\".equals(name)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (\"-numeric\".equals(name)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (\"iterables\".equals(name)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (\"cpio\".equals(name)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (\"Odd\".equals(name)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (\"depth\".equals(name)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (\"ivaluesShiftInChar\".equals(name)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (\"InnerClasses\".equals(name)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (\"Change\".equals(name)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (node.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (\"row\".equals(name)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (\"-empty\".equals(name)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (\"Attempt\".equals(name)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (node.getType() == Token. '-' || name.endsWith(\"s\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (\"-number\".equals(name)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (\" Constants\".equals(name)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (\"peek\".equals(name)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (\"token\".equals(name)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (\" catch\".equals(name)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (\"Whitespace\".equals(name)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (\"detach\".equals(name)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (\"eval\".equals(name)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (\"fileName\".equals(name)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (\" Result\".equals(name)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (\"Pm\".equals(name)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (\" Calendar\".equals(name)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (\"ix\".equals(name)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (\"-Refs\".equals(name)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (\"bar\".equals(name)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (\" nulls\".equals(name)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (\"-X\".equals(name)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (\"- '-'\".equals(name)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (\"Cell\".equals(name)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (\"Height\".equals(name)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (\"Use\".equals(name)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (\" without\".equals(name)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (\" annotations\".equals(name)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (\"group\".equals(name)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (\"Buf\".equals(name)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (\"Method\".equals(name)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (\"rapping\".equals(name)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (\"Views\".equals(name)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (\"escape\".equals(name)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (\"Tick\".equals(name)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (node.getType() == Token. '-' || name.charAt(desc)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (node.getType() == Token.TYPEOF && \"Index\".equals(name)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (\"getSource\".equals(name)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (\"or\".equals(name)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (\"MO\".equals(name)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (\"L\".equals(name)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (\" wall\".equals(name)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (\"Edge\".equals(name)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (\"Used\".equals(name)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (\"With\".equals(name)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (\"fieldName\".equals(name)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (\"Own\".equals(name)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (\" isVisible\".equals(name)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (\"trim\".equals(name)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (\"map\".equals(name)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (node.getType() == Token.NEW) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (\"~\".equals(name)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (\" dup\".equals(name)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (\"Rules\".equals(name)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (\"ther\".equals(name)) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
        "fixed_line": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
    },
    "Jsoup-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "return element == null ? this : o;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return element == null ? super.equals(element. o) : element;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return element == null ? super.equals(element.o) : element;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return element == this;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return element == null ? super.equals(element.text) : element;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return element == null ? super.equals(element.tag) : element;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return element == this || this.o != null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return element == this || super.equals(element.tag);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return element == this || super.equals(element.o);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return element == this || this. o;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return element == null ? super.equals(element.o) : o;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return element == this ? super.equals(element.tag) : element;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return element == null ? super.equals(element.position) : element;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return element == null ? JsonNull.createJsonNull() : element;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return element == this ? super.equals(element.o) : element;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return element == this || this.element;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return element == null ? super.equals(element.obj) : element;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return element == null ? super.equals(element.data) : element;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return element == null ? super.equals(element.getName) : element;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return element == null ? super.equals(element.UN : element;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return element == this ? super.equals(element. o) : element;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return element == this || this.o != null ? this : element.equals(element.data);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return element == null ? super.equals(element.sort) : element;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return element == this || super.equals(element.text);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return element == this ? super.dateFormat.equals(element.tag) : element;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return element == null ? super.equals(element.text) : o;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return element == null ? super.equals(element.UNSPECIFIED_SEGMENT_LEN) : element;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return element == null ? super.equals(element.html) : element;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return element == this ? super.dateFormat.equals(element.text) : element;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return element == this ? super.element : element;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return element == null ? super.equals(element.field) : element;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return element == this ? super.equals(element.text) : element;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return element == null ? super.element == null : o;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return element == null ? super.equals(element.desc) : element;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return element == this || super.equals(element.data);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return element == null ? super.equals(element.comment) : element;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return element == this ? super.dateFormat.equals(element.o) : element;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return element == null ? super.equals(element.date) : element;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return element == this ? o.equals(element.o) : element;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return element == this || super.equals(element. o;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return element == this ? null : o;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return element == null ? super.equals(element.dataElement) : element;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return element == this || super.equals(element.html);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return element == this || this.o != null ? this : element.element;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return element == this || super.equals(element.obj);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return element == this || super.equals(element. o);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return element == null ? super.equals(element.attribute.o) : element;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return element == null ? super.hashCode() : o;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return element == null ? super.equals(element.tag) : o;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return element == this || super.equals(element.position);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return element == null ? o.equals(element.o) : element;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return element == this ? o.equals(element.tag) : element;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return element == this || this.o != null ? this : element.equals(element.obj);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return element == this || getClass() != o.element;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return element == null ? super.equals(element.f) : element;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return element == null ? super.equals(element.tagName) : element;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return element == null ? super.equals(element.props) : element;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return element == null ? super.equals(element.parent) : element;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return element == null ? super.equals(element.intervalDelegate) : element;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return element == this ? element : o;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return element == this || this.o != null ? this : element.equals(element.data)) return true;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return element == this || this.o != null ? this : element.data;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return element == null ? super.equals(element.'\") : element;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return element == this || super.equals(element.desc);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return element == null ? super.equals(element.getValue())) : element;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return element == null ? super.equals(element.wanted) : element;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return element == null ? super.equals(element.UNSPECIFIED_PROPERTY) : element;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return element == null ? super.equals(element.attr) : element;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return element == this || this.o != null ? this : element.equals(element. o;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return element == null ? super.equals(element.UNSPECIFIED_SEGMENT_SIZE) : element;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return element == this || getClass() != o.getClass;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return element == null ? super.equals(element.reference) : element;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return element == null ? super.equals(element. stackSize) : element;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return element == null ? super.equals(element.container) : element;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return element == this || getClass() != element.element;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return element == null ? super.equals(element.name) : element;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return element == this || this.o != null && this.element.equals(element.text);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return element == this || super.equals(element.parent)) return true;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return element == null ? super.equals(element.e) : element;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return element == null ? super.equals(element.getValue()) : element;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return element == null ? super.equals(element.o) : this;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return element == null ? super.equals(element.interval) : element;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return element == null ? super.equals(element.attribute.tag) : element;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return element == this || this.o;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return element != null ? this.o.equals(element. o) : element;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return element == null ? super.equals(element. o) : this;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return element == this || this.o != null ? this : element.equals(element.position) : element;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return element != null ? this.element.equals(element.text) : element;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return element == null ? super.equals(element.i) : element;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return element == this || this.o != null ? this : element.equals(element.dataElement);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return element == this || super.equals(element.parent);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return element == this ? super.dateFormat.equals(element. o) : element;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return element == this || this.o != null ? this : element.equals(element.tag);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return element == this || this.o != null ? this : element.equals(element.text;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return element == this || this.o != null ? this : element.i;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return element != null ? this. o.equals(element.text) : element;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return element != null ? this.o.equals(element.text) : element;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return element == null ? super.equals(element.child) : element;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return element == null ? code.equals(element.o) : element;",
                "identical": false
            }
        ],
        "buggy_line": "return this == o;",
        "fixed_line": "return tag.equals(element.tag);"
    },
    "Csv-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c > 0x1F && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c == '\\n' || c == '\\r' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c > 0x1F && c < 128) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c > 0x1F && c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c > '#' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c > 'A' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c > '9' || c < '0') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c > 0x1F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c > 0x1F && c < 'A' || c > 'Z' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c > 0x1F && c <= 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c > 0x1F && c <= 'z') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c > 0x1F && c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c <= '#') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c > 0x1F && c <= 'A' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c > '#' || c < 'a' || c > 0x7F) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c > 0x1F && c <= 'A' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c <= 'D' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c > 0x1F && c <= '9') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c > 'Z' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c > 127) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c > 'F' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2028 || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c <= ' ') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c > 0x1F && c < 'A' || c > 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c > 0x1F && c <= 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c > '#' && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c == '#' || c == '\\n' || c == '\\r' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c > 0x1F && c < INT_0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c <= 'Z') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c <= 'x' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x delta delta >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c == 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0xByte) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c == '_' || c == '\\n' || c == '\\r' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c > 0x1F && c < '8' && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c > 0x1F && c <= 'Z' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x')) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c <= 127) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c > 'D' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c <= 'Z' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2028 || c == 0x') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c > '#') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c > 0x1F && c < limit) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c > 0x1F && c < value.length() - 1) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c == '\\n' || c == '\\r' || c == encapsA' || c == delim) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c == '#' || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c == '\\n' || c == '\\r' || c == encapsulator || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c <= 'B' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c == '\\n' || c == '\\r' || c == encapsulator || c == 0x') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x7F || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c > '#' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c == '\\n' || c == '\\r' || c == encapsulator || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c > 0x1F && c <A' || c > 0x7F) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c > 'A' || c < 'a' || c > 0x7F) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x' || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x delta delta >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0xa' || c == 0x2028 || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x7F || c == 0x2028) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2028 || c == 0x')) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c > '('A' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0xByte) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c >ContainA' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c == 'a' || c == '-') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c > 0x1F && c < SURR2_FIRST || c > 'a' || c < 'z') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c > 0x1F && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x10' || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x' || c == 0x2028 || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x7e' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2028 || c == 0x10' || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2029) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c <= member' || c >= 'a' && c <= 'z') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c == '#') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c > 0x7F && c <= 'Z') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x7F && c >= 'a' || c <= 'z') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0xDouble.parseDouble(c)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c > 0x1F && c < SURR2_FIRST || c > 0x7F) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c > '#' || c < 'A' || c > 'z') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c > '9' || c < 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c > 'F' || c < 'a' || c > 0x7F) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c > 0x1F && c < shouldE') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c == 'a' || c == '\\r' || c == 0x7F) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c > 0x1F && c < encapsulator.length() - 1) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c > 0x1F && c < 'A' || c > 'Z' || c < 'a' || c >= 'z') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x7e' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x() - 1) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c >= 0x7F && c <= 'z') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x2028 || c == 0x0a' || c == encapsulator || c == delim) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2028 || c == 0xByte) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c > '#' || c < 'A' || c > 'Z' || c == 'a' || c >= 0x7F && c <= 'z') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c == '\\n' || c == '\\r' || c == 0x' || c == 0x2028 || c == 0x\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
        "fixed_line": "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {"
    },
    "Codec-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "traverse traverse( -1, -1, out, -1, false);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "traverse traverse( -1, -1, msg, -1, -1, out);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "-1, -1, msg, -1, -1, out);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "traverse traverse( -1, -1, EOF, -1, false);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, msg);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "traverse traverseAll( -1, -1, out, -1, false);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "traverse traverse( -1, -1, outf, -1, -1, false);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "traverse traverseBranch( -1, -1, EOF, -1, false);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "traverse traverse( -1, -1, out);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "traverse traverse( -1, -1, cur cur, -1, -1, out);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "traverse traverse( -1, -1, msg, -1, -1, false);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "traverse traverseAll( -1, -1, EOF, -1, false);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "traverse traverseBranch( -1, -1, out, -1, false);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "traverse traverse( -1, -1, out, 0, -1, -1, false);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "traverse traverse( -1, -1, msg, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, false, -1, -1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "traverse traverse( -1, -1, predicates, -1, false);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "-1, -1,pieces, -1, false);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "traverse traverse( -1, -1, out, -1, -1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "traverse traverse( -1, -1,(\"\\n, -1, -1, out);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, false, -1, -1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "traverse traverse( -1, -1, out, 1, false, -1, -1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "traverse traverse( -1, -1,ializers, -1, -1, out);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "traverse traverse -1, -1, out);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "traverse traverse( -1, -1, out, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "traverse traverse( -1, -1, out, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "traverse traverse( -1, -1, 10, 1, 0, 0, -1, -1, false, -1, -1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "traverse traverse( -1, -1, predicates, -1, -1, out);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "0.0fewerThan -1, -1, msg, -1, -1, out);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, false);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "traverse traverseBranch( -1, -1, out);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "traverse traverse( -1, -1, msg, -1, false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "traverse traverseHeader( -1, -1, out, -1, false);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, out);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, -1); // 0x00 -> UTF32-in- -1, EOF...",
                "identical": false
            },
            {
                "k": 40,
                "patch": "traverse traverse( -1, -1, outf, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, false, -1, false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, -1); // 0x00 -> UTF32-in- -1, EOF",
                "identical": false
            },
            {
                "k": 43,
                "patch": "traverse traverse( -1, -1, EOF, -1, out);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "traverse traverseAll( -1, -1, out);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "traverse traverse( -1, -1, 10, 1, 0, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "traverse traverse(0, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "traverse traverseBranch( -1, -1, msg, -1, -1, out);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "-1, -1, msg, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "traverse traverseTimeZone( -1, -1, EOF, -1, false);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "traverse traverse( -1, -1, outf, -1, false);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "traverse traverse( -1, -1,NONE, 1, 0, 0, -1, msg);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "traverse traverse( -1, -1, serializers, -1, -1, out);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "traverse traverse( -1, -1,NONE, 1, 0, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, msg);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, Integer.MAX_VALUE -1, -1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "traverse traverse( -1, -1, EOF, -1, msg);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, false, -1, -1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "-1, -1,pieces, -1, EOF);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "traverse traverse( -1, -1, EOF, -1, -1, out);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "traverse traverse( -1, -1, false);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "traverse traverse( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "traverse traverse( -1, -1,ializers, -1, false);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "traverse traverseBranch( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "traverse traverseBranch( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false); // should never happen",
                "identical": false
            },
            {
                "k": 65,
                "patch": "traverse traverse( -1, -1, 10, 1, 0, 0, -1, -1, out);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "traverse traverse( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false); // should never happen",
                "identical": false
            },
            {
                "k": 67,
                "patch": "traverse traverse( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false); // should never occur...",
                "identical": false
            },
            {
                "k": 68,
                "patch": "traverse traverseBranch( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false); // should never occur...",
                "identical": false
            },
            {
                "k": 69,
                "patch": "traverse traverseBranch( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "traverse traverse( -1, -1, false, -1, out);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "0.0fewerThan -1, -1, false);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "traverse traverse( -1, -1, cur cur, -1, -1, false);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, false, -1, false);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "traverse traverseBranch( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false); // the number exponent",
                "identical": false
            },
            {
                "k": 75,
                "patch": "-1, -1,pieces, -1, -1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "traverse traverse( -1, -1,NONE, 0, -1, -1, out);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "traverse traverse( -1, -1, out, 1, false, -1, \"UTF8\", 0, -1, msg);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "traverse traverse(0, -1, -1, out);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "-1, -1,pieces, -1, out);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "traverse traverseTimeZone( -1, -1, out);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "traverse traverse( -1, -1, out, 1, false, -1, EOF);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "traverse traverse( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false); // the number exponent",
                "identical": false
            },
            {
                "k": 83,
                "patch": "0.0fewerThan -1, -1, msg, -1, -1, false);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "traverse traverse( -1, -1, -1, out, -1, false);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "traverse traverse( -1, -1, EOF, -1, -1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, -1); // 0x00 -> UTF32- -1, EOF...",
                "identical": false
            },
            {
                "k": 88,
                "patch": "traverse traverseBranch( -1, -1, msg, -1, -1, false);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, false, -1, EOF);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "traverse traverse( -1, -1, deser, -1, out);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "traverse traverse( -1, -1, EOF, -1, \"UTF8\", 0, -1, -1, false);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, false, -1, out);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "traverse traverse( -1, -1, 1, 0, 0, -1, -1, false, -1, msg);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, false, -1, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "traverse traverse( -1, -1,NONE, 1, 0, 0, -1, -1, out);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "traverse traverse( -1, -1, out, 1, 0, 0, -1, -1, false, -1, msg);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "traverse traverse( -1, -1, msg, -1, -1, EOF);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "-1, -1, compiler, -1, -1, msg, -1, -1, out);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "traverse traverse( -1, -1,NONE, 1, 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "0.0fewerThan -1, -1, out);",
                "identical": false
            }
        ],
        "buggy_line": "25, 26, 27, 28, 29, 30, 31, 32,",
        "fixed_line": "25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V"
    },
    "Collections-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "private Object readResolve() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private Object readResolve {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public Object readResolve() {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private Object readResolve) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private Object readResolve = null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private Object readResolve = code.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private final Object readResolve() {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "protected Object readResolve = code.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private Object readResolve = _annotated.get(code);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private Object readResolve = code.hashCode();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private Object readResolve = new Object[keys.length];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "protected Object readResolve() {",
                "identical": true
            },
            {
                "k": 13,
                "patch": "private Object readResolve = ZipLong.valueOf(keys.length)];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private Object readResolve = DEFAULT_DESERIALIZER;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "protected Object readResolve = null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public Object readResolve() { _annotated = code.get(); }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_OLD_SIDE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "protected Object readResolve = code.hashCode();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private Object readResolve = _annotated.get(keys);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "protected Object readResolve = code.get(keys);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private Object readResolve = new Object[symbols.length];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_calculated);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private Object readResolve = code.keys;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private Object readResolve = _annotated.get(Calendar.DAY_OF_STREAM);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "protected Object readResolve = _annotated.get(code);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private Object readResolve = _annotated.get(Calendar.HOUR_OF_DAY);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "protected Object readResolve = code.get();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private Object readResolve = _annotated.get(Calendar.START_OF_STREAM);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_GET);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private Object readResolve = _keys;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private Object readResolve = code.get(keys);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_ZOCCURRENCE_OVERRIDESERIALIZER);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private Object readResolve = ZipLong.getValue(code);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private Object readResolve = _annotated.get(Object.class);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_INSTANCE_FOR_NO_SIDE_EFFECTS);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_OLD_SIDE_EFFECTS);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private Object readResolve = _annotated.get(localName);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_INSTANCE_FOR_NO_SIDE_EFFECTS) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private Object readResolve += _getSlot(code.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private Object readResolve = code.entry;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private Object readResolve = _annotated.get(Calendar.DAY_OF_WEEK)];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private Object readResolve = _annotated.get(ConcreteType.NULL_TYPE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private Object readResolve = _annotated.get(localizationResources.NOT_CONSTANT_NAME);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_GETEFFECTS) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_GETEFFECTS);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Italic\"));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private Object readResolve = _annotated.get(Calendar.DAY_OF_YEAR);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private Object readResolve = code.get();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private Object readResolve = ZipLong.valueOf(keys.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private Object readResolve = _symbols.get(keys);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private Object readResolve = _annotated.get(Calendar.START_OF_DAY_TYPE);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "protected Object readResolve = code.get(code);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_GETEFFECTS);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private Object readResolve += _keys.hashCode();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private Object readResolve = _annotated.get(Calendar.DAY_OF_MONTH);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_SUFFIX_ESCAPE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_CACHE_SIZE);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_SUFFIX_EFFECTS);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_SUFFIX_EMBEDDED_OBJECT);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private Object readResolve = data;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_GETEFFECTS) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private Object readResolve = data.get();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_CRCLEADING_ZEROSS) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private Object readResolve = _annotated.get(Calendar.DAY_OF_WEEK);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private Object readResolve = _annotated.get(ConcreteType.INT_TYPE);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private Object readResolve = _data.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private Object readResolve = ZipLong.getValue(code.length)];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_CRC) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_CRCLEADING_ZEROS_OVERRIDESERIALIZER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private Object readResolve = DEFAULT_NEW_CRC;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_INSTANCE_FOR_NO_SIDEEFFECTS) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"keys\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_ORDER_FOR_SUFFIX_ESCAPE);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private Object readResolve = _symbols.get(code);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_GETTERS);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private Object readResolve = _annotated.get(localizationResources.INTEGER_FOR_REQUIRE_SUFFIX_EMBEDDED_ARRAY);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_GETESCAPE_ARRAY);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private Object readResolve = _annotated.get(Calendar.DAY_OF_MONTH)];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_GETEFFECTS) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "protected Object readResolve = code.get(entry.getKey()) != null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private Object readResolve = ZipLong.valueOf(keys.length());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public Object readResolve() { _annotated = code; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_INSTANCE_FOR_NO_SIDEEFFECTS);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_CRCLESSS) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_SCOPE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"S_PER_DAY)];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private Object readResolve = _annotated.get( beyond);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_OVERRIDESERIALIZER);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private Object readResolve = _buckets.get(code);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_GETESCAPE_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\" mixinsn) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private Object readResolve() { return _readObject; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEPRECATED_GETEFFECTS) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_INSTANCE_OVERRIDESERIALIZER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public Object readResolve() { _annotated = code.getState(); }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_CONSTANT_NAME\"));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_DEFINE_FOR_REQUIRE_GETESCAPE_ARRAYS);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public Object readResolve() { _annotated = code.get(code); }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private Object readResolve = _annotated.get(localizationResources.getString(\"Combined_NEW_CRCLEADING_ZEROS) {",
                "identical": false
            }
        ],
        "buggy_line": "private Object readResolve() {",
        "fixed_line": "protected Object readResolve() {"
    },
    "Math-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (entry.getMethod() != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (entry.getMethod() == DEFLATED) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry.getEntry() != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.getMethod() != DEFLATED) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry.getNode(entry) == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry.getMethod() == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.getial(i) == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.getTwin() != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i.compareTo(entry.getEntry()) == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry.getNodeForCodeInsertion(entry) == null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.getEnclosingMethod() != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry.getMode() != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.getNodeForCodeInsertion(entry) == true) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry.getExterns(entry) == null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.getEntry().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.getDeclaringClass() != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry.getNode(entry) == true) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry.getWindingRule() != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry.getNamedType() != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (entry.geted().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry.getMap().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry.getEntry().isIgnorable()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry.getValue().compareTo(entry.getEntry()) == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry.getEntry().isPresent(entry) && !entry.isLetterOrDigit(entry)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.getControlFlowSlots() != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry.getControlFlowEntry() != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.get exactly().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.getNodeForCodeInsertion(entry) == -1) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry.getImplicitPrototype() != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.getRange().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (entry.get byte().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry.getNextEntry() != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.getPath().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.get exactly().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.getClient().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry.getImplicitReturn() != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry.getSegmentNumber().compareTo(entry) < 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (entry.getMethod() == PlotOrientation.VERTICAL) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.getUID().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.getInSubranges() != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry.getMethod() != DEFLATED && entry.getEntry().isDefine()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry.getNodeEntry() != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.getMethod() != PlotOrientation.HORIZONTAL) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.getNumber().compareTo(entry) < 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.getEntry().isExtern()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry.getMethod() == PlotOrientation.HORIZONTAL) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.getComment().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.getExterns(entry) == true) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry.getradius().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.getHeaderSize() != 1) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.getKeyValue() != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry.getNode(i) == null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.getMethod() != DEFLATED || entry.isInterface()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.getMethod() != DEFLATED && entry.getEntry().isInterface()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry.getSpecification(entry) == null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry.getEntry().mode == null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry.getClipping() != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry.getNodeForCodeInsertion(entry) == 1) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.getMethod() != DEFLATED && entry.getNodeForCodeInsertion(i) == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.getRange().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry.getNodeType() <= functionValue.getClass()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.getRangeDurationType() != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.getNode(entry) == 1) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry.getSegmentNumber().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.getNumber().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry.getMethod() != DEFLATED || entry.isMalformed()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (entry.getN() > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry.getTwin() <= 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.getHeader().compareTo(entry) > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry.getMode() <= functionValue.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.getEntry().isPresent(entry)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.getUID().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.getMethod() != DEFLATED && entry.getValue().equals(entry.getEntry())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry.getArcType() != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.getMethod() != DEFLATED && entry.getEntry().isPresent(entry)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.getDocumentOrder() != 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.getHeaderSize() != 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry.getDomainOrder() == DomainOrder.ASCENDING) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.getMethod() != DEFLATED && entry.getNodeCount() > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.getClipping() <= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.getRecord(i) == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.getNode(entry) == -1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry.getRecord(entry) == null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry.getThresholdType() != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry.getIdentifier(entry) == true) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry.getControlFlowSlots() <= functionValue.get(i)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry.getNodeForCodeInsertion(entry) == 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry.getEntry().isPresent(entry) && !entry.isLetterToDraw()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry.getDialFrame().isMalformed()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry.get numberOf(entry) == true) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry.getComment().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry.getMethod() != PlotOrientation.VERTICAL) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry.getClient().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry.geted().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.getHeader().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.getMethod() != DEFLATED || entry.scope != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.getDomainOrder() == DomainOrder.DESCENDING) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.getMap().compareTo(entry) == null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.getNode(entry) == header) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry.getDomainOrder() != 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "fixed_line": "if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
    },
    "Math-75": {
        "fixes": [
            {
                "k": 1,
                "patch": "return getPct == v) ? 0 : v;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return getPct != v) ? Double.NEGATIVE_INFINITY : (double) v;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getPct<?>((double) v);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return getCumPct(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return getPctArray(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getPct<?> (v == v) ? 0 : v;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return getPct (v == v) ? 0 : v;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getPctArray(v) ? Double.NEGATIVE_INFINITY : (double) v;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return getPctArray(v) ? Double.NEGATIVE_INFINITY : v;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return getCumPctArray(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return getPctSize((double<?>) v);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getPct<?>(v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return getPct * v + (v - v) / 2.0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return getPct<?>(v) || v.getClass().isArray();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return getPct == v) ? 0 : (v > v;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return getPct != v) ? Double.NaN : (double) v;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return getPctArray(v) || v.getClass().isArray();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getPctArray(v) ? 0 : v;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getPctArray(v) ? DEFAULT_EPSILON : v;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return getPctArray(v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return getPct * v) / (double) v;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return getPct<?>((Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return getPct<?>(v) ? this : v;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return getPct(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return getPctArray (v == v) ? 0 : v;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return getPct instanceof Comparable<?>) ? ((double) v) : (v.n - v);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return getPctArray(v) ? Double.MAX_VALUE : v;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return getPct == v) ? 0 : (v - v;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return getPct<?>(v) || v.doubleValue();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return getPct * v + (v - v);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return getPct instanceof Comparable<?>) ? (double) v : 0L;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return getPct == v) ? 0 : (v instanceof Property<?>) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return getPct<?> (v == v) ? 0 : v.getClass();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return getPct<?>(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return getPct (v == v) ? 0 : v.getClass();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return getPct == v) ? 0 : (v.negate(v);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getPcts(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return getPctArray(v) : values.get((double) v);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getPct<?>(v) : values.get((double) v);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return getPct instanceof Comparable<?>) ? ((double) v) : 0L;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return getPct == v) ? NULL : (double) v;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return getPctArray(v) ? NULL : (double) v;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return getPct == v) ? 0 : (v * v);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return getPct == v) ? 0 : (v.getClass());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getPct == v) ? 0 : (v instanceof Property<?>) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return getPctBug<?>((double) v);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return getPct<?>(v) ? this : new double getEmptyValue(v);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return getCumPct(v) && v.getClass().equals(v);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return getCumPct(v) && v.equals(v);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getPct == v) ? 0 : (v.n - v);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return getPct != v) ? Double.NEGATIVE_INFINITY : (v - v);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return getPctArray(v) || v.getClass().getName();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getPct == v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return getPct == v) ? 0 : (v.negate();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return getPct<?>(v) : DEFAULT_EPSILON;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return getPct<?>(v) || v.getClass().getName();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return getPct<?>(v) : getCumPct;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getPct == v) ? 0 : (v > v.getClass());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return getPct != v) ? Double.NEGATIVE_INFINITY : (v % 2));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getPct instanceof Comparable<?>) ? (double) v : values.get(v);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return getPct == v) ? 0 : (v - v);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return getPctArray(v) ? this : new double upPct);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getPct<?> (v == v) ? this : v;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getPctArray((double<?>) v);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return getPctArray(v) : getCumPct;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return getPctReferences(v) : values.get(v);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return getPctArray(v) ? Double.NEGATIVE_INFINITY : d;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return getPct<?>(v) ? 1 : 0L;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return getPctArray(v) || v.doubleValue();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return getPct<?> (v == v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return getPctArray(v) ? this : new double[v.values().length];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getPct != v) ? Double.NEGATIVE_INFINITY : 0L;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return getPct == v) ? 0 : (v > v.getMillisecond(v);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return getPctArray(v) ? this : new double[v];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return getPct instanceof Comparable<?>) ? ((double) v) : values.get(v);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return getPctArray(v) ? -1 : v;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return getPctArray(v) && v.equals(v);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return getPct == v) ? 0 : (v > v.getPct());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return getCumPct(v) : DEFAULT_EPSILON;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return getPcts(v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return getPct<?>(v) ? this : new double upPct);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return getPct<?> (v == v) ? -1 : v;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getPct<?>(v) : DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return getPctObjectPrune || v.getClass().getName();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return getPct<?>(v) || v.equals(v);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getPctArray(v) ? 1 : 0L;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return getPctArray(v) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return getPct<?> (v == v) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return getPct != v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return getPct<?>(v) : getFunction;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return getPct instanceof Comparable<?>) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return getPctArray(v) ? Double.NEGATIVE_INFINITY : 0L;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return getPctArray(v) ? information : (double) v;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return getPctArray(v) && v.getClass().getName();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return getPctReferences(v) ? this : new double[2];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return getPct<?>().value((double) v);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return getPct instanceof Comparable<?>) ? ((double) v) : (v.n);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return getPct<?> (v == v) ? 0 : v.getComparable();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return getPct<?>(v) || v.getClass().isArray()) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return getPct == v) ? 0.0 : (v.negate();",
                "identical": false
            }
        ],
        "buggy_line": "return getCumPct((Comparable<?>) v);",
        "fixed_line": "return getPct((Comparable<?>) v);"
    },
    "JacksonDatabind-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnoredProperty(propertyName);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnored().isIgnorable();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.getIgnoredProperty();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnoredPropertyNames();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.removeIgnored();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignorals.getIgnored ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignorals.getIgnoredMethods();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.getIgnoredCause();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnoredProperty(ignoreAny);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnoredField();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnoredSubtype(ignoreAny);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", ignorals);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnoredInterfaces();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnoredValues();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnoredValue();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnoredProperty(prop).isIgnorable();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignorals.getIgnoredOnly();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignorals.getIgnored != null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnored()) : ignorals;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnoredConstructor();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnoredFor(ignoreAny);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnore\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is\", ignorals);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : ignorals;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnored ? new HashSet : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnored(ignoreAny);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnored still();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignorals.getIgnoredveragedOutals();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = ignorals.getIgnoredPropertyHandler();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.ignored\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnoredProperty(\"eclare\", ignorals);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnoredProperty(prop);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnoredadd(ignoreAny);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnoredDeclared(ignoreAny);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnoredProperty(implName);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnored() != null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnoredProperty(propName).isIgnorable();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getIgnoredComparator();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getIgnoredSibling();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnoredQName();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.contains(ignoreAny);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : new HashSet<String>(ignored);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnoredMutableState();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnoredProperty(prop, new HashSet<String>(ignoredProperties.length));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : ignorals();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>(ignored) ? Boolean.TRUE : ignorals);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getIgnored Min();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\", ignorals);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[prop.length()]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties.size() - 1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnorable\", ignorals);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnoredWith(propName);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnoredProperty(\"Array\", ignorals);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : new HashSet<String>();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignoreUnknown '\"+propName+\"'\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.isIgnorable();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnoredEdges();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnoredPropertyWriter();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName\"));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnorable\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnored().toArray(new Integer(ignoreAny));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getIgnoredProperty(\"msg.no.ignored\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.String\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignored\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored)\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : new HashSet<String>(ignored);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnoredProperty(\"new String\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getIgnoredArguments();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnoredProperty(\"property\", ignorals);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", new HashSet<String>(ignored) ? Boolean.TRUE : ignorals);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is property '\"+propName+\"'\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : new Boolean.values();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.removeIgnored() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnoredMethod();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorals);",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Codec-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "return cs1.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return csUtils.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return cs1.length, 0, Math.max(true, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return csUtils.regionMatches(query1, 0, Math.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(radius1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(maximum, 0, Math.length()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(query1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return csUtils.regionMatches(annotations, 0, Math.max(true, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return cs1.regionMatches(true, 0, Math.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( nullValue1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return cs1.regionMatches(true, 0, Math.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( namer.length1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return cs1.regionMatches(true, 0, Math.max(query1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return csINE.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return cs1.regionMatches(true, 0, Math.max(radius1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return cs1.regionMatches(true, 0, Math.max( nullValue1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return cs1.regionMatches(true, 0, Math.max( volatile1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(low1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return csUtils.regionMatches(true, 0, Math.length, false2));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(query1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( Font1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return cs1.regionMatches(true, 0, Math.max(parameter1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( nullValue1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return csUtils.regionMatches(true, 0, Math.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return cs1.regionMatches(true, 0, out1, 0, Math.length);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(radius1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(theta1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( annotated, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return cs1.regionMatches(true, 0, Math.max( wrap1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return csUtils.regionMatches(true, 0, Math.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( increase1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( increase1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return cs1.length, 0, Math.max(radius1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return cs space1.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( namer.length1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( Not1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( volatile1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(column1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(ascii1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return csUtils.regionMatches(query1, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(line1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return cs1.regionMatches(true, 0, Math.max( namer.length1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return csUtils.regionMatches(target1, 0, Math.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return cs1.regionMatches(true, 0, Math.max(maximum, 0, Math.length()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( : cs1.length()));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return cs1.regionMatches(true, 0, out1, 0, Math.length()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( types1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(wanted1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( samples1.length1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return csINEUtils.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return csEntry.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( samples1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return csBytes.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( recogn1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return cs1.length, 0, Math.max(query1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(maximum, 0, Math.length));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return csays.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return cs1.regionMatches(true, 0, Math.max(relativeAccuracy1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return cs13.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(line1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( Not1, 0, cs.length()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(parameter1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(relativeAccuracy1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( Not1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( volatile1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return csUtils.regionMatches(true, 0, Math.length1, 0, Math.length);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return csUtils.regionMatches(query1, 0, Math.length(), cs1.length()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return cs.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return cs1.regionMatches(true, 0, Math.min(1, true);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return cs1.regionMatches(true, 0, Math.length, false2));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return cs1.length, 0, Math.max( nullValue1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(Modifier1.length1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(index1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return cs writer1.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(parameter1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(Modifier1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(relativeAccuracy1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return csUtils.regionMatches(query1, 0, Math.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return csUtils.regionMatches(true, 0, Math.length(), cs1.length);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(pan1, 0, cs.length()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( nullValue1, 0, cs2));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( recogn1, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return csUtils.regionMatches(annotations, 0, Math.length, false2));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(column1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return csUtils.regionMatches(annotations, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return csUtils.regionMatches(true, 0, Math.length1, 0, Math.length()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(query1, 0, cs.length()));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(theta1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( types1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return csenominator.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(Modifier1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return csUtils.regionMatches(query1, name2, 0, Math.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return cs1.regionMatches(true, 0, Math.min(1, true).length()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return cs space1.regionMatches(true, 0, Math.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return cscar.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return csuri.regionMatches(true, 0, Math.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( samples1, 0, cs1.length()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return csUtils.regionMatches(true, 0, Math.max( namer.length, 0, cs2.length()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return cs.regionMatches(true, 0, Math.length, false2));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return csUtils.regionMatches(true, 0, Math.max(substring(11, 0, cs.length()));",
                "identical": false
            }
        ],
        "buggy_line": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
        "fixed_line": "return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());"
    },
    "Time-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "instantLocal, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "instantLocal, chrono, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "instantLocal, chrono, locale, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "instantLocal, chrono, dayOfMonth, 0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "instantLocal, chrono,12, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "instantLocal, chrono, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "instantLocal, chrono, builder, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "instantLocal, chrono, locale, iPivotYear);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "instantLocal, chrono, selectYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "instantLocal, chrono, value, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "instantLocal, chrono, parser, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "instantLocal, chrono,contentYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "instantLocal, chrono, dayOfMonth, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "instantLocal, chrono, position, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "instantLocal, chrono,that, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "instantLocal, chrono,plotYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "instantLocal, chrono, startIndex, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "instantLocal, chrono,XPath, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "instantLocal, chrono, text, position);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "instantLocal, chrono, parsedYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "instantLocal, chrono, bucket, locale, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "instantLocal, chrono,SERYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "instantLocal, chrono, RectangleYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "instantLocal, chrono,InYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "instantLocal, chrono, hardYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "instantLocal, chrono, |= |= bucket.getZone().getOffset(instantMillis);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "instantLocal, chrono, deserializer, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "instantLocal, chrono,scopeYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "instantLocal, chrono,autoYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "instantLocal, chrono,ArrowOffset, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "instantLocal, chrono, mixinYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "instantLocal, chrono, pivotYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "instantLocal, chrono,iseYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "instantLocal, chrono,existingYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "instantLocal, chrono, iLocale, locale, iPivotYear);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "instantLocal, chrono, root, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "instantLocal, chrono, firstYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "instantLocal, chrono, dayOfYear, bucket, locale, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "instantLocal, chrono, mu, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "instantLocal, chrono, dayOfYear, locale, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "instantLocal, chrono, locale, iLocale);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "instantLocal, chrono, offset, zone, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "instantLocal, chrono,Arrow, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "instantLocal, chrono, ISODateTimeFormat.Locale, iPivotYear);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "instantLocal, chrono, }//, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "instantLocal, chrono, field, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "instantLocal, chrono, endIndex, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "instantLocal, chrono, dataset, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "instantLocal, chrono, mappings, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "instantLocal, chrono, orientation, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "instantLocal, chrono, dayOfYear, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "instantLocal, chrono,order, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "instantLocal, chrono, millis, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "instantLocal, chrono, |= bucket.getZone().getOffset(instantMillis);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "instantLocal, chrono, days, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "instantLocal, chrono, Arrays.binarySearch(bucket.computeMillis(false, text));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateParserBucket(0, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "instantLocal, chrono,Literal, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "instantLocal, chrono, size, iLocale);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "instantLocal, chrono,om, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localYear, iPivotYear);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "instantLocal, chrono,util, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "instantLocal, chrono, |= |= bucket.getZone().getOffset(0L);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateOptionalTimeParserBucket(0, builder, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "instantLocal, chrono, isSupported, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateOptionalTimeParserBucket(0, chrono, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "instantLocal, chrono, iText, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "instantLocal, chrono, |= |= bucket.getZone().getOffsetMillis(bucket.computeMillis(false, text));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "instantLocal, chrono, Arrays.binarySearch(bucket.getZone(), text, position);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "instantLocal, chrono, |= bucket.getZone().getOffset(0L);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "instantLocal, chrono, Arrays.binarySearch(bucket.getOffset(), bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "instantLocal, chrono, iMaxYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "instantLocal, chrono, start, end, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "instantLocal, chrono, |= |= bucket.getZone().getOffset(0));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "instantLocal, chrono, dayOfYear, locale, iPivotYear);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "instantLocal, chrono, Arrays.binarySearch(bucket.isLeapYear(), bucket.iOffsetMillis);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "instantLocal, chrono, |= bucket.getZone().getOffset(0));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateOptionalTimeParserBucket(0, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "instantLocal, chrono, |= bucket.getZone().getOffset(0.0f), iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "instantLocal, chrono, start, end, iLocale);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "instantLocal, chrono, iMinYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localYear(), iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "instantLocal, chrono,12, iPivotYear, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "instantLocal, chrono, |= bucket.getZone().getOffsetMillis(bucket.computeMillis(false, text));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "instantLocal, chrono, |= |= bucket.getZone().getOffset(0.0f), iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "instantLocal, chrono, dayOfYear, bucket, locale, iPivotYear);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateOptionalTimeParserBucket(0, bucket, iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localYear);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "instantLocal, chrono, value, iPivotYear);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "instantLocal, chrono, Arrays.binarySearch(bucket.isLeapYear(), bucket.iLocale, iPivotYear);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "instantLocal, chrono,12, iOffset, saveMillis);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "instantLocal, chrono,12, iMaxYear);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "instantLocal, chrono, locale, iMaxYear);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "instantLocal, chrono, |= bucket.getZone().getOffsetType(instantMillis);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "instantLocal, chrono, bucket, locale, iPivotYear);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateOptionalTimeParser());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "instantLocal, chrono, lastOffset, iMaxYear);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "instantLocal, chrono, ISODateTimeFormat.localDateOptionalTimeParserBucket(0, chrono);",
                "identical": false
            }
        ],
        "buggy_line": "instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
        "fixed_line": "instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));"
    },
    "JacksonDatabind-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new SimpleType(subclass, _class, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new SimpleType(subclass, _class, _typeFactory, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new SimpleType(subclass, _class, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new SimpleType(_class, _typeNames, _typeParameters, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new SimpleType(_class, _typeNames, _typeParameters, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new SimpleType(subclass, _bindings, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new SimpleType(subclass, _bindings, _class, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new SimpleType(subclass, _superClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new SimpleType(subclass, _bindings, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _typeParameters, contentType);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _staticTyping, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new SimpleType(subclass, _bindings, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new SimpleType(subclass, _class, _keyType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new SimpleType(subclass, _prov, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new SimpleType(subclass, _getClassInfo, _superClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _expectedType, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new SimpleType(_class, _typeNames, _staticTyping, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new SimpleType(_class, _typeNames, _typeParameters, contentType);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new SimpleType(Object.class, _valueType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new SimpleType(subclass, _typeFactory, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new SimpleType(subclass, _typeNames, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _typeParameters, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new SimpleType(subclass, _componentType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new SimpleType(subclass, _elementType, null, null, _asStatic);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new SimpleType(subclass, _class, _typeParameters, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new SimpleType(_class, _elementType, null, null, _asStatic);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new SimpleType(subclass, _getClass, _superClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new SimpleType(subclass, _class, _typeFactory,EnumClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _typeParameters, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new SimpleType(subclass, _class, _elementType, null, null, _asStatic);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new SimpleType(subclass, _bindings, _typeNames, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new SimpleType(_class, _typeNames, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new SimpleType(subclass, _delegateType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new SimpleType(subclass, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new SimpleType(_class, _elementType, null, null, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new SimpleType(subclass, _bindings, _typeFactory, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new SimpleType(subclass, _State, _superClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new SimpleType(subclass, _getClassInfo, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new SimpleType(subclass, _getClassInfo, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new SimpleType(subclass, _getClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _asStatic);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new SimpleType(subclass, _valueType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new SimpleType(subclass, _elementType, null, null, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new SimpleType(subclass, _class, _typeFactory);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new SimpleType(subclass, _bindings, _staticTyping, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _superClass, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new SimpleType(subclass, _typeFactory, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _prov, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new SimpleType(subclass, _class, _elementType, null, null, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new SimpleType(subclass, _class, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new SimpleType(subclass, _typeFactory, _class, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new SimpleType(subclass, _class, _expectedType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new SimpleType(subclass, _class, _typeFactory, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new SimpleType(Object.class, _subclass, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new SimpleType(subclass, _typeFactory, _class, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new SimpleType(subclass, _class, _keyClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new SimpleType(subclass, _class, _typeFactory._constructType(valueType, contentType));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new SimpleType(subclass, _class, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new SimpleType(subclass, _class, _typeFactory, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new SimpleType(subclass, _typeNames, _staticTyping, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new SimpleType(_class, _keyType, _valueType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new SimpleType(subclass, _bindings, _typeParameters, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new SimpleType(subclass, _class, _keyType, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _property, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new SimpleType(_class, _elementType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new SimpleType(subclass, _class, _typeFactory, _asStatic);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new SimpleType(_class, _typeNames, _superClass, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new SimpleType(subclass, _TimeZoneType, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new SimpleType(subclass, _class, _typeParameters, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new SimpleType(subclass, _getClass, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new SimpleType(subclass, _optClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _typeParameters, null, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new SimpleType(subclass, _class, _superClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _staticTyping, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new SimpleType(Object.class, _typeNames, _typeParameters, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new SimpleType(subclass, _typeNames, _superClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new SimpleType(Object.class, _optClass, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new SimpleType(subclass, _typeNames, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new SimpleType(subclass, _class, _keyClass, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new SimpleType(subclass, _Types, _valueHandler, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _generator, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new SimpleType(subclass, _typeNames, _class, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new SimpleType(subclass, _class, _typeFactory, contentType, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new SimpleType(subclass, _class, _keyType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _superClass, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new SimpleType(subclass, _getClass, _class, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new SimpleType(_class, _typeNames, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new SimpleType(subclass, _class, _typeChange, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _expectedType, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new SimpleType(Object.class, _typeNames, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new SimpleType(subclass, _class, _typeNames, _prov, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new SimpleType(Object.class, _valueType, _valueHandler, _asStatic);",
                "identical": false
            }
        ],
        "buggy_line": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
        "fixed_line": "return new SimpleType(subclass, _bindings, this, _superInterfaces,"
    },
    "JacksonDatabind-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (previous == null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (previous == null) ? null : previous.equals(ann);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (previous == null) ? null : previous.equals(_annotations);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while !=",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while-",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while != null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while whileCount);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (previous == null) ? null : previous.equals( while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while while);",
                "identical": false
            }
        ],
        "buggy_line": "return (previous != null) && previous.equals(ann);",
        "fixed_line": "return (previous == null) || !previous.equals(ann);"
    },
    "Chart-20": {
        "fixes": [
            {
                "k": 1,
                "patch": "super(paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "super(paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "super(paint, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "super(paint, stroke, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "super(paint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "super(paint, stroke,a, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "super(paint, stroke, DEFAULT_PAINT, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "super(paint, stroke, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "super(paint, paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "super(paint, stroke, alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "super(paint, stroke, paint, outlinePaint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "super(paint, stroke, Color.black, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "super(paint, paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "super(paint, stroke, shape, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "super(paint, stroke, paint, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "super(paint, stroke, Color.gray, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "super(paint, paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super(paint, stroke, paint, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, stroke, alpha);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "super(paint, Color.black, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "super(paint, stroke, Color.black, stroke, alpha);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_OUTLINE_PAINT);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "super(paint, stroke, DEFAULT_PAINT, stroke, alpha);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "super(paint, stroke, Color.black, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "super(stroke, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "super(paint, stroke, argument, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "super(Arc, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "super(paint, stroke, NodePointer, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "super(paint, stroke, minor, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "super(paint, stroke, Color.gray, stroke, alpha);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "super(paint, stroke, outlinePaint, DEFAULT_PAINT);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "super(paint, stroke, style, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "super.paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "super(paint, stroke, g2, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "super(paint, stroke, outlinePaint, Color.black);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, alpha);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "super(paint, Node, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "super(paint, stroke, Color.gray, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "super(paint, stroke, outlinePaint, Stroke stroke, alpha);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "super(paint, outlinePaint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "super(paint, stroke, formatter, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "super(paint, stroke, font, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "super(paint, Stroke stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "super( paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "super(paint, stroke, argument, stroke, alpha);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "super(paint, minor, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_AXIS_LINE_PAINT);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "super(paint, stroke, Color.black, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "super(paint, stroke, paint, DEFAULT_PAINT);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "super(paint, stroke, paint, stroke, alpha / 2.0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, Color.red, alpha);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "super(paint, stroke, outlinePaint, Color.gray);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "super(paint, style, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "super(paint, stroke, paint, Stroke stroke, alpha);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, DEFAULT_AXIS_LINE_PAINT);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_PAINT);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "super(paint, stroke, paint, stroke, alpha / this.paint);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "super(paint, stroke, outlinePaint, paint, alpha);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "super(paint, stroke, Color.red, alpha);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "superHelper(paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "super(paint, stroke, paint, stroke, mixin, alpha);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "super(paint, stroke, paint, stroke, alpha / 2.0f);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "super(paint, stroke, Color.blue, stroke, alpha);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "super(paint, stroke, argument, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, DEFAULT_OUTLINE_PAINT);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "super(_paint, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "super(label, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_OUTLINE_WIDTH, alpha);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "super(paint, stroke, paint, stroke, 1.0f);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_OUTLINE_STROKE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "super(alpha, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, DEFAULT_PAINT);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "super(paint, stroke, Stroke outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, Color.lightGray, alpha);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "super(paint, stroke, 1.0f, stroke, alpha);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "super(paint, stroke, paint, stroke, Color.red);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_AXIS_LABEL_FONT, alpha);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "super(paint, stroke, Color.black, stroke, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "super(paint, outlinePaint, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "super(paint, stroke, paint, stroke, Color.black);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "super(value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "super(paint, Stroke stroke, outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, 1.0f);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_GRIDLINE_PAINT);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "super(paint, stroke, paint, stroke, DEFAULT_AXIS_OBJECT, alpha);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, DEFAULT_AXIS_LABEL_PAINT);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "super(paint, stroke, outlinePaint, Color.red);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "super(paint, stroke, paint, stroke, Color.gray);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "super(paint, stroke, paint, stroke, outlinePaint, DEFAULT_GRIDLINE_PAINT);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "super(paint, stroke, formatter, stroke, alpha);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "super(paint, stroke, minor, stroke, alpha);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "super(paint, stroke, central, stroke, alpha);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "super(paint, stroke, outlinePaint, alpha);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "super(paint, stroke, DEFAULT_OUTLINE_PAINT, Stroke outlineStroke, alpha);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "super(paint, stroke, 20, stroke, alpha);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "super(tip, stroke, paint, stroke, alpha);",
                "identical": false
            }
        ],
        "buggy_line": "super(paint, stroke, paint, stroke, alpha);",
        "fixed_line": "super(paint, stroke, outlinePaint, outlineStroke, alpha);"
    },
    "Closure-62": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& 0 <= charno && charno < systemExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "&& 0 <= charno && charno < current.length()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "&& 0 <= charno && sourceExcerpt.length() < end.length()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| 0 <= charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "&& 0 <= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& 0 <= charno && charno < line.length()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& 0 <= charno && charno < sourceName.length()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& 0 <= charno && charno < sourceExterns.length()) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& 0 <= charno && sourceExcerpt.length() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ?",
                "identical": false
            },
            {
                "k": 20,
                "patch": "&& 0 <= lineno, charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& 0 <= charno && sourceExcerpt.length() == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "&& 0 <= charno && charno < baseExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& 0 <= charno && charno < names.length()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&& 0 <= charno && charno < functionExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : endLcerpt.length();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "&& 0 <= charno && charno < assignmentExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "&& 0 <= charno && charno < str.length()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& 0 <= charno && charno < ((String) ? -1 : sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "&& 0 <= charno && charno < externs.length()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& 0 <= charno && charno < end-cerpt.length()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "&& 0 <= charno && charno <sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "&& 0 <= charno && charno <<Excerpt.length()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& 0 <= charno && charno < end.length()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& 0 <= charno && charno < Character.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& 0 <= charno && charno < info.length()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& 0 <= charno && c == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& 0 <= charno && charno < end, sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()).append(sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" : end of charno;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& 0 <= charno && charno < declarations.length()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "&& 0 <= charno && charno < upperExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "&& 0 <= charno && charno <FromExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" names : end/sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length() ? -1 : 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()).append(c)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& 0 <= charno && charno < sourceExports.length()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& 0 <= charno && charno < Character.toUpperCase(c)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : endLcerpt.length()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"sourceExcerpt.length() : endLcerpt.length()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()DateTimeField.length()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" 0) : end of charno;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"sourceExcerpt.length() : end of charno;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length() {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" names : end of charno;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : end;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& 0 <= charno && charno < name.length()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "&& 0 <= charno && charno <Manager.length()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() iterable.length()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& 0 <= charno && charno < replaceChars.length()) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : \"\";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()-1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& 0 <= charno && charno <Limit.length()) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length() ? -1 : endLcerpt.length();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& 0 <= charno && charno < replaceTop.length()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length() ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& 0 <= charno || charno < sourceExcerpt.length() ? \" : end of charno;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"sourceExcerpt.length() : end isExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& 0 <= charno && charno < replaceBreak.length()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& 0 <= charno && charno < Match.length()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& 0 <= charno && charno <0 && charno.length()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" : end-i;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "&& 0 <= charno && charno < encapsulator.length()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() Coding.length()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "&& 0 <= charno && charno < sourceMap.length()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"\" : endLcerpt.length();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "&& 0 <= charno && charno < sourceTop) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& 0 <= charno && charno < set.length()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() file.length()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& 0 <= charno && charno <Function.length()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" names : end-line.length()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : 1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"sourceExcerpt.length() : endLcerpt.length();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& 0 <= charno && charno < replaceString.length()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \" names : end-i;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()ENTRIES.length()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? \"sourceExcerpt.length() : end;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()).append(sourceExcerpt.length() - 1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()).append(line.length() - 1) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length()).append(line.length()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? null : charno;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& 0 <= charno && charno < sourceExcerpt.length() ? -1 : DEFAULT_LINE_LENGTH;",
                "identical": false
            }
        ],
        "buggy_line": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
        "fixed_line": "&& 0 <= charno && charno <= sourceExcerpt.length()) {"
    },
    "Math-105": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sumYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sumYY - sumXY * sumXX / sumXX;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sumYY -sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sumYY - sumXX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sumYY - sum* * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return sumYY - Double.NaN * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sumYY - sumXY * sum* / sumXX;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return sumYY - sumXY * sumXY / (sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return sumXY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return sumYY - sumXY * sumXX;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sumYY - min * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sumYY - minSquaredErrors * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sumYY - sumXY * sumXY / sumSet;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sumYY - sumXY * sumX / sumXX;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sumYY - sumsqXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sumYY - sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return sumYY - meanXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sumYY - sumXY * sumSet / sumXX;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return sumYY - sumXY * sumXY / sumXX) / sumXX;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return sumYY - minSquaredErrors / sumXX;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sumYY - sumXY * sumXY / sumX;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sumYY - sumXY * sumXY / x;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sumYY - sumXY * sumXY / this.copyOf(sum, sumXX) / sumXX;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sumYY -testXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sumYY - sumSet * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sumYY + sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sumYY - pXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sumYY - sumXY * sumXY / summodifier;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sumYY - sum front * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sumYY - sumX * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sumYY - sumXY * sum[]) / sumXX;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sumYY1 - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // n-th element in x",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return sumYY - sumXY * sumXY / (sumXY * sumXX));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sumYY - sumCross * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sumYY - sumLog * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return maxYY - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return sumYY - sumXY * sumXY / this.axis;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sumYY - sumXY * sum front / sumXX;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sumYY - sumXY * sumXY / sum props;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return sumYY - sumXY * sumXY / this.copyOf(sumX, sumXX) / sumXX;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return sumYY - sumXY * sumXY / (sumXY * sumXX) / sumXX;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return sumYY - sumXY * sumXY / sum37;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_YEAR;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return sumYY - sumXY * sumXY / sumrows;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return sumYY - sumY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sumYY - sumXY * sumXY / n;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sumYY - sumXY * sumY / sumXX;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sumYY - sumPanel * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sumYY / sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sumYY - sumXY * sumXY / this.copyOf(sumX) / sumXX;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_MINUTE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sumXX - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sumYY - sumXY * sumPosition / sumXX;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sumYY - sumXY * sumXY / getPropertyXX;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_coefficients;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sumYY - sumXY * sumXY / this.copyOf(sumXX) / sumXX;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sumYY - sumXY * sumXY / (sumXY * sumXXL) / sumXX;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sumYY - sumXY * sumXY / this.sumXY;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sumYY - sumXY * sumXY / sumXX; // n-th element in the sum",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sumYY -StandardXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sumYY - sumXY * sumXY / sumPER;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return sumYY - sumOn * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sumYY - summodifier * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sumYY - sum[]) * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sumYY - sumXY * sumXY / sum extra;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sumYY - sumXY * sumXY / firstXX;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sumYY - sumHeight * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sumYY - sumXY * sumXY / sumvertical;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sumYY - sumL * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sumYY - sumXY *testXY / sumXX;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sumYY - sum 0.5 * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sumYY - sumXY * sumPanel / sumXX;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_RC;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sumYY - MathXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sumYY - sumXY * sumer / sumXX;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sumYY - sumXY * sum minimal / sumXX;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sumYY - sumXY * sumXY / sum1[;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sumYY - getSumSquaredErrors / sumXX;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sumYY - sumC * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sumYY - sum modifier * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sumYY - sumiator * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sumYY - sum f * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sumYY - sumXY * sumXY / sumer;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sumYY - sumXY * sumXY / sum startIndex;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sumYY - sumXY * summodifier / sumXX;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sumYY - sumXY * sumXY / sumPointer;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sumYY - sumPosition * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sumYY - sumXY * sumXY / sumATION;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sumYY - sumaint * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sumYY - sumXY * sumXY / sumy;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sumiator - sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_ += sumXX;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_bar;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sumYY - sumXY * sumA / sumXX;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sumYY - sumdataset * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sumYY - sumXY * sum props / sumXX;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sumYY - sumXY * sumXY / sumiator;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sumYY - sumA * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sumYY - sumXY * sumXY / sumTO_OF_OCC;",
                "identical": false
            }
        ],
        "buggy_line": "return sumYY - sumXY * sumXY / sumXX;",
        "fixed_line": "return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
    },
    "Codec-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = spaceData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = getEncodeLength(arrayData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = dateData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = getEncodeLength(eData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = getEncodeChar(null, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = getEncodeLength(null, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = getEncodeLength(maxSize, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = getEncodeLength(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = chars.length + MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = getEncodeLength(locale, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = getEncodeLength(totalSize, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = getEncodeCount(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = getEncodeLength(maxCData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = getEncodeLength(maxValue, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = getToolTipTextLength(eData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = getEncodeSize(arrayData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = VerificationData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = getEncodeLength(Top, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = getEncodeCount(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = getEncodeCount(maxSize, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = getEncodeSize(bufferedData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = getEncodeLength(>) MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = getEncodeLength(maxCData,JAVA_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = getEncodeLength(bufferedData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = getEncodeLength(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = getEncodeSize(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = getEncodeLength(maxStream, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = getEncodeLength(minY, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = getEncodeLength(Base64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = getIndex(null, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = getEncodeLength(TopData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = getEncodeCount(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = getEncodeEnd(maxData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = getEncodeLength(len, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = getEncodeSize(null, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = getEncode.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len = getEncodeLength( getter, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = getEncodeLength(maxCData, enclosing_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = MIMEData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = getRawData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = getEncodeLength(maxData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = getEncodeLength(maxBase64Data, MIME_SEPARATOR_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len =Data.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = getEncodeCount(maxData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = getEncodeLength(maxBase, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "long len = MIMEData(null, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = getEncodeLength(quad, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = getEncodeLength(length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = lengthDataLength - MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = getEncodeLength(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = getEncodeLength(chars, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = getEncodeLength(skipData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len =LegendData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = getEncodeLength(Start, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len =PData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = getEncodeLength(attrs_CHUNK_SIZE, ptr, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = getEncodeCount(maxStream, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = getEncodeSize(array, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = lengthData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = getEncodeLength(ZData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = toEncode.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = getEncodeLength(arrayData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = getEncodeLength(bigBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = getEncodeCount(maxBase, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = barData.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = getEncodeLength(maxCData,real_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = getEncodeLength(max, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = testDataLength - MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = getEncodeLength(arrayData,JAVA_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = getEncodeLength(cdBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = getEncodeLength(attrs_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = getEncodeLength(eData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len =Groups.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = getEncodeLength(decodeBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len = getEncodeLength(Reader.CHUNK_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len = getEncodeCount(maxBase64Data, MIME_SEPARATOR_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = spaceData.length, MIME_CHUNK_SIZE + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = getEncodeLength(arrayData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = getEncodeLength(maxBase64Data, MIME_SEPARATOR_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = getEncodeLength(ThrowableData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = getEncodeLength(maxBase64Data, first_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = getEncodeLength((\"-Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = getEncodeLength(maxValue, MIME_SEPARATOR_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = dateData.length, MIME_CHUNK_SIZE + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = getEncodeLength(null, MIME_CHUNK_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = getEncodeLength(eData,JAVA_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = getEncodeCount(maxBase64Data, MIME_SEPARATOR_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = getparamCount, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = chars.length, MIME_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = getEncodeLength(eData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = getEncodeLength(eData, enclosing_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = getEncode.length, MIME_CHUNK_SIZE + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = getEncodeLength(Base64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = getToolTipTextLength(attrs_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = getEncodeLength(maxData,JAVA_CHUNK_SIZE, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = getEncodeLength(maxBase64Data, ch, CHUNK_SEPARATOR_SIZE);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = getEncodeLength(unknown_CHUNK_SIZE, CHUNK_SEPARATOR, CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = getEncodeLength(maxCData,JAVA_CHUNK_SIZE, CHUNK_SEPARATOR);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = getEncodeLength(maxBase64Data, MIME_SEPARATOR_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = getEncodeSize(maxBase64Data, MIME_CHUNK_SIZE, CHUNK_SEPARATOR + CHUNK_SEPARATOR.length);",
                "identical": false
            }
        ],
        "buggy_line": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "fixed_line": "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);"
    },
    "Closure-65": {
        "fixes": [
            {
                "k": 1,
                "patch": "case '\\0': sb.append(\"\\\\r\"); break;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case '\\0': sb.append(\"\\\\t\"); break;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case '\\0': sb.append(\"\\\\x\"); break;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case '\\0': sb.append(\"\\\\\\\\\"); break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case '\\0': sb.append(\"\\\\u\"); break;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case '\\0': sb.append(\"\\\\s\"); break;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case '\\0': sb.append(\"\\\\\\'\"); break;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case '\\0': sb.append(\"\\\\n\"); break;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case '\\0': sb.append(\"\\\\>\"); break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case '\\0': sb.append(\"\\\\0, c; break;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case '\\0': sb.append(\"\\\\v\"); break;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case '\\0': sb.append(\"\\\\b\"); break;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case '\\0': sb.append(\"\\\\f\"); break;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case '\\0': sb.append(\"\\\\y\"); break;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case '\\0': sb.append(\"\\\\\\\"\"); break;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case '\\0': sb.append(\"\\\\enum\"); break;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\\0': sb.append(\"\\\\0); break;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case '\\0': sb.append(\"\\\\Up\"); break;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case '\\0': sb.append(\"\\\\B\"); break;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case '\\0': sb.append(\"\\\\{\"); break;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case '\\0': sb.append(\"\\\\0,\"); break;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case '\\0': sb.append(\"\\\\ space\"); break;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case '\\0': sb.append(\"\\\\$24\"); break;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case '\\0': sb.append(\"\\\\i\"); break;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case '\\0': sb.append(\"\\\\l\"); break;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case '\\0': sb.append(\"\\\\Rendering\"); break;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case '\\0': sb.append(\"\\\\/\"); break;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case '\\0': sb.append(\"\\\\min\"); break;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case '\\0': sb.append(\"\\\\js\"); break;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case '\\0': sb.append(\"\\\\tkn\"); break;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case '\\0': sb.append(\"\\\\cast\"); break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case '\\0': sb.append(\"\\\\RC\"); break;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case '\\0': sb.append(\"\\\\equ\"); break;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case '\\0': sb.append(\"\\\\gap\"); break;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case '\\0': sb.append(\"\\\\\">\"); break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case '\\0': sb.append(\"\\\\'\"); break;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case '\\0': sb.append(\"\\\\denominator\"); break;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case '\\0': sb.append(\"\\\\$3\"); break;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case '\\0': sb.append(\"\\\\Flag\"); break;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case '\\0': sb.append(\"\\\\json\"); break;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case '\\0': sb.append(\"\\\\ deep0\"); break;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case '\\0': sb.append(\"\\\\update\"); break;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case '\\0': sb.append(\"\\\\\"; break;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case '\\0': sb.append(\"\\\\$29\"); break;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case '\\0': sb.append(\"\\\\==\"); break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case '\\0': sb.append(\"\\\\array\"); break;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case '\\0': sb.append(\"\\\\1, c; break;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case '\\0': sb.append(\"\\\\Hint\"); break;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case '\\0': sb.append(\"\\\\$5\"); break;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case '\\0': sb.append(\"\\\\(':\"); break;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case '\\0': sb.append(\"\\\\Invalid line\"); break;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case '\\0': sb.append(\"\\\\Children\"); break;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case '\\0': sb.append(\"\\\\config\"); break;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case '\\0': sb.append(\"\\\\chars\"); break;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case '\\0': sb.append(\"\\\\: \"); break;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case '\\0': sb.append(\"\\\\ first\"); break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case '\\0': sb.append(\"\\\\ hex\"); break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case '\\0': sb.append(\"\\\\Leaf\"); break;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case '\\0': sb.append(\"\\\\0)\"); break;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\0': sb.append(\"\\\\scope\"); break;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case '\\0': sb.append(\"\\\\enter\"); break;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case '\\0': sb.append(\"\\\\ there\"); break;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case '\\0': sb.append(\"\\\\ string\"); break;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case '\\0': sb.append(\"\\\\coordinate\"); break;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\\0': sb.append(\"\\\\Invalid\"); break;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case '\\0': sb.append(\"\\\\Min\"); break;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case '\\0': sb.append(\"\\\\size\"); break;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case '\\0': sb.append(\"\\\\decode\"); break;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case '\\0': sb.append(\"\\\\IO\"); break;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case '\\0': sb.append(\"\\\\a\"); break;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case '\\0': sb.append(\"\\\\Var\"); break;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case '\\0': sb.append(\"\\\\local\"); break;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case '\\0': sb.append(\"\\\\}); break;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case '\\0': sb.append(\"\\\\By\"); break;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case '\\0': sb.append(\"\\\\utation\"); break;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case '\\0': sb.append(\"\\\\ad\"); break;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case '\\0': sb.append(\"\\\\Instruction\"); break;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case '\\0': sb.append(\"\\\\ document\"); break;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case '\\0': sb.append(\"\\\\Token\"); break;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\\0': sb.append(\"\\\\ge\"); break;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case '\\0': sb.append(\"\\\\Class\"); break;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case '\\0': sb.append(\"\\\\j\"); break;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case '\\0': sb.append(\"\\\\top\"); break;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case '\\0': sb.append(\"\\\\ component\"); break;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\\0': sb.append(\"\\\\will\"); break;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case '\\0': sb.append(\"\\\\dep\"); break;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case '\\0': sb.append(\"\\\\/ break;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case '\\0': sb.append(\"\\\\token\"); break;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case '\\0': sb.append(\"\\\\non\"); break;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case '\\0': sb.append(\"\\\\ft\"); break;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case '\\0': sb.append(\"\\\\ialized\"); break;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case '\\0': sb.append(\"\\\\intern\"); break;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\\0': sb.append(\"\\\\doc\"); break;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case '\\0': sb.append(\"\\\\8,\"); break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case '\\0': sb.append(\"\\\\ checks\"); break;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case '\\0': sb.append(\"\\\\ cx\"); break;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case '\\0': sb.append(\"\\\\check\"); break;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case '\\0': sb.append(\"\\\\0. break;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case '\\0': sb.append(\"\\\\ 1)) break;",
                "identical": false
            }
        ],
        "buggy_line": "case '\\0': sb.append(\"\\\\0\"); break;",
        "fixed_line": "case '\\0': sb.append(\"\\\\000\"); break;"
    },
    "Codec-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringUtils.newString(binaryData, true));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringUtils.newString( binaryData, true));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringUtils.newString(binaryData, false));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringUtils.newString(this, binaryData, true));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringUtils.newString(getBase64Data, true));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringUtils.newString(oldData, true));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringUtils.newString(Base64Data, true));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringUtils.newUTF8(binaryData, true));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringUtils.newString( binaryData, false));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringUtils.newString(oldBase64Data, true));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringUtils.newString(TimeZoneData, binaryData, true));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringUtils.newString(TimeZoneData, true));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringUtils.newString(Token.STRING, binaryData, true));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringUtils.new String[] { encodeBase64(binaryData, true));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64( binaryData, true));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringUtils.newString(binaryData, binaryData, true));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringUtils.newString(Token.STRING_BUFFER, null));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringUtils.newString(IDData, true));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringUtils.newString(Character.encodeBase64, true));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(nextData, true));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringUtils.newString(Token.STRING_BUFFER, false));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringUtils.newUTF8(getBase64Data, true));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64( binaryData, false));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringUtils.newString(encodeBase64Data, true));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringUtils.newString(resetBase64Data, true));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringUtils.newString(fullBase64Data, true));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringUtils.newString(getAllData, true));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(nextData, false));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringUtils.newString(Token.STRING_BUFFER, true));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringUtils.newString(this, binaryData));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringUtils.newString(.\";Base64Data, true));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringUtils.newString(base64Data, true));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(b64variant, true));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(maximumData, true));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringUtils.newString(pdData, true));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64( binaryData, true);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringUtils.newString(bufData, true));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringUtils.newString(dData, true));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringUtils.newString(collData, true));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringUtils.newString(b64variant, true));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringUtils.newString(isBase64Data, true));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringUtils.newStringUtf8(binaryData, true));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringUtils.newString(andData, true));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringUtils.newString( CachedData, true));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(maximumData, true);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringUtils.newString( Boolean.valueOf( binaryData, true));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringUtils.newString(UnicodeData, true));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringUtils.newString(quotedBase64Data, true));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringUtils.newString(valueData, true));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringUtils.new String(binaryData, true));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringUtils.newString(nextData, true));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(tickData, true));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringUtils.newString(ixBase64Data, true));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringUtils.newString(TARGETBase64Data, true));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringUtils.newString(getItemData, true));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringUtils.newString(escapeData, true));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringUtils.newString(ReplacementData, true));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(charset, false));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringUtils.newString(Base64Data, false));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(getDataData, false));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(b64variant, false));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringUtils.newString(baselineData, true));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringUtils.newString(QUData, true));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringUtils.newString(bufData, binaryData, true));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(oldData, true));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringUtils.newString(Chars, binaryData, true));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringUtils.newString(Token.VALUE_STRING, true));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringUtils.newString(binaryData));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringUtils.newString(tickData, true));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringUtils.newString(oog.encodeBase64Variant(binaryData, true));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringUtils.newString(IntBase64Data, true));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringUtils.newString( OneData, true));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringUtils.newString(Character.encodeBase64Variant(binaryData, true));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(nextData, true);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringUtils.newString( pBase64Data, true));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(value, true));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(pData, false));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringUtils.newString(oog.encodeBase64Variant(b64variant, true));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(getDataData, true));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(getBase64Data, true));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64( getMapData, true));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringUtils.new String[] { encodeBase64(binaryData, true);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64( getBaseData, true));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64Variant(b64variant, true));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(tickData, true);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringUtils.newUTF8( binaryData, true));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringUtils.newString(Character.encodeBase64Variant( binaryData, true));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(maximumData, false));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(b64variant, true);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(this, true));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringUtils.newString(IDData));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(getItemData, true));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringUtils.newString(valData, true));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(JSONData, true));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringUtils.newString( UnsupportedData, true));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringUtils.newString(Token.VALUE_STRING, binaryData));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(uesData, false));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringUtils.newString(Token.STRING, binaryData));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringUtils.newString( CAData, true));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringUtils.newString(binaryData) == null ? null : StringUtils.encodeBase64(this, true);",
                "identical": false
            }
        ],
        "buggy_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "fixed_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
    },
    "Math-58": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sigma.new Parameter( guess);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sigma == null ? null : guess.getN();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sigma == null ? null : guess.get(\"\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sigma == null ? null : guess.getParam();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sigma == null ? null : guess.getDeclarations();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return sigma == null ? null : guess.getLeading();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sigma == null ? null : guess.get();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return sigma == null ? null : guess.createTransformedShape( guess);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return sigma == null ? null : guess.getForetricMean();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return sigma.new Parameter( guess,functionParamTypes);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sigma == null ? null : guess.apply();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sigma == null ? null : guess.getForetrics();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sigma == null ? null : guess.getForetricMean()];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sigma.new Parameter(x, y);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sigma == null ? null : guess.copyOf( guess, blindScope);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return sigma == null ? null : guess.new Parameter();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sigma == null ? null : guess.getArguments();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return sigma == null ? null : guess.apply(functionParam);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return sigma.new Parameter( guess,functionParam));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sigma == null ? null : guess.getParam().toString();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sigma == null ? null : guess.getPredetricMean();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sigma == null ? null : guess.getParameters().length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sigma == null ? null : guess.getSimpleName();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sigma == null ? null : guess.getTest().getSimpleName();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sigma == null ? null : guess.getdispose();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sigma == null ? null : guess.getBigetricMean();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sigma == null ? null : guess.getString();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sigma == null ? null : guess.values().length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sigma == null ? null : guess.getForetricMean() + 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sigma == null ? null : guess.getTest();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sigma == null ? null : guess.getAlternate();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess.getN(), guess);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return sigma == null ? null : guess.getForetricMean()[0];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sigma == null ? null : guess.connect();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sigma == null ? null : guess.new Parameter( guess);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return sigma.new Parameter( guess, SWT.NONE);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return sigma == null ? null : guess.get 46etricMean();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sigma == null ? null : guess.createSibling();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sigma == null ? null : guess.getEncoding();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return sigma == null ? null : guess.createTry();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess.second);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return sigma == null ? null : guess.copyOf(function, r);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sigma == null ? null : guess.getcolumns();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return sigma == null ? null : guess.getForetricMean() - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return sigma == null ? null : guess.parameters;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sigma == null ? null : guess.createTransetricMean( guess, blindScope);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sigma == null ? null : guess.getPredicates();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess.next(), guess.y);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sigma == null ? null : guess.getTwin();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sigma == null ? null : guess.getForetrics() + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sigma == null ? null : guess.markers;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sigma == null ? null : guess.getWidth();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sigma == null ? null : guess.getReferences();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sigma == null ? null : guess.get integers();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sigma == null ? null : Arrays.binarySearch( guess, blindScope);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sigma.new Parameter( guess,functionParam);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sigma == null ? null : guess.get serial();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sigma == null ? null : guess.intercept;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess.getParameterTypes());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sigma == null ? null : guess.newInstance();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sigma == null ? null : Arrays.copyOf( guess, blindScope);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return sigma == null ? null : guess.content.toString();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sigma == null ? null : guess.clz;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sigma == null ? null : guess.getEncoding().toString();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sigma == null ? null : guess.getIsSynthetic();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sigma == null ? null : guess.getSubetricMean();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sigma == null ? null : guess.createShell( guess);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sigma == null ? null : guess.createTransetricMean( guess);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sigma == null ? null : guess.getMinutes();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sigma == null ? null : guess.get[2]();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sigma == null ? null : guess.evaluate(x);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sigma == null ? null : guess.get starts();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return sigma == null ? null : guess.copyOf( guess, bl);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sigma == null ? null : guess.getForetricMean()[1];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sigma == null ? null : guess.copyOf( guess, getShape());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sigma == null ? null : guess.copyOf( guess,function);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sigma.new Parameter();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess.y);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sigma == null ? null : guess.copyOf( guess, r);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sigma == null ? null : guess.getForetricMean() / 2.0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sigma == null ? null : guess.copyOf(x, y);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sigma == null ? null : guess.copyOf( guess, longest.length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sigma.new Parameter( guess, blindScope);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess. Comparing);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sigma.new Parameter( guess.next(), guess.value);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess.next());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sigma == null ? null : guess.getDeclarations().compareTo(x);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sigma == null ? null : guess.createEmptyBorder( guess. factor);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sigma == null ? null : guess.getConstructors();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sigma == null ? null : guess.create();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sigma == null ? null : guess.copyOf( guess, random.y);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sigma == null ? null : guess.copyOf( guess, intern);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sigma == null ? null : guess.apply( guess);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sigma == null ? null : guess.getAlternatives();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sigma == null ? null : guess.getTarget();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sigma == null ? null : guess.getForetricMean() > 2) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sigma == null ? null : guess.copyOf( guess,load.length);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sigma == null ? null : guess.getChecker();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sigma == null ? null : guess.copyOf(p);",
                "identical": false
            }
        ],
        "buggy_line": "return fit(new Gaussian.Parametric(), guess);",
        "fixed_line": "return fit(guess);"
    },
    "Chart-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "double v = (int) Math.max(this.lowerBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "double g = (int) Math.max(this.lowerBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "double v = (this.lowerBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "double v = (this.lowerBound - this.upperBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "double v = (int) Math.log(value) / this.upperBound);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "double v = (this.upperBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "double v = (int) Math.log(v) / this.upperBound);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "double g = (int) ((value - this.lowerBound) / this.upperBound);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "double v = (int) Math.max(v, this.upperBound);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "double g = (int) Math.max(v, this.upperBound);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "double v = (int) ((value - this.lowerBound) / this.upperBound);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "double v = (int) (this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "double v = (int) Math.max(this.upperBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "double v = (value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "double v = (int) Math.log(v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "double v = (int) Math.abs(v - this.lowerBound);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "double v = (double) Math.max(this.lowerBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "double v = (int) Math.max(this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "double v = (int) (this.lowerBound * this.upperBound);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "double v = (int) (value > this.upperBound);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "double v = (int) Math.max(this.lowerBound - this.upperBound);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "double g = (int) Math.max(this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "double v = (int) ((value - this.lowerBound) / 2.0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "double v = (this.upperBound - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "double g = (int) Math.cos(this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "double g = (int) Math.abs(v - this.lowerBound);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "double v = (int) (this.lowerBound - this.upperBound);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "double v = (int) (this.upperBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "double v = (this.lowerBound - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "double w = (this.lowerBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "double g = (int) ((value - this.lowerBound) / 2.0, (this.upperBound);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "double g = (int) ((this.lowerBound - v) / this.upperBound);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int g = (int) Math.max(v, this.upperBound);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "double v = (int) Math.max(this.upperBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "double g = (int) Math.floor(v * this.upperBound);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "double g = (int) ((value - this.lowerBound) / 2.0);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int g = (int) ((value - this.lowerBound) / this.upperBound);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "double v = (int) Math.min(v, this.upperBound);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "double g = (int) ((value - this.lowerBound) / SUBDIVISIONS) + this.upperBound);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int g = (int) Math.max(this.lowerBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "double h = (int) Math.max(this.lowerBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "double g = (int) Math.log(value) / this.upperBound);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "double v = (this.lowerBound - this.upperBound) / 2.0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "double v = (int) Math.floor(this.upperBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "double v = (int) Math.rint(this.lowerBound);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "double v = (double) Math.max(this.upperBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "double v = (int) Math.floor(this.lowerBound);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "double g = (int) Math.max(this.lowerBound - this.upperBound);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "double v = (int) Math. be(this.lowerBound);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "double v = (int) Math.floor(v * this.upperBound);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "double g = (int) Math.rint(v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "double g = (int) Math.cos(this.lowerBound);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "double v = (int) Math.floor(this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "double g = (int) Math.max(this.upperBound, this.upperBound);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "double v = (int) (value / this.upperBound);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "double v = (int) ((value - this.lowerBound) / SUBDIVISIONS) + this.upperBound);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "double g = (int) Math.floor(this.lowerBound);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "double v = (int) Math.abs(this.lowerBound - this.upperBound);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "double v = (int) Math.abs(v - this.upperBound);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "double g = (int) Math.ceil(this.lowerBound);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "double g = (int) Math.max(v, this.lowerBound);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "double g = (this.lowerBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "double v = (int) (this.lowerBound / 2.0, this.upperBound);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "double value = (value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "double g = (int) Math.rint(this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "double g = (int) Math.ceil(this.lowerBound / this.upperBound);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "double g = (int) Math.round(v * this.upperBound);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "double v = (int) (value < this.lowerBound);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "double label = (value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "double g = (int) Math.rint(this.lowerBound);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "double v = (int) ((this.lowerBound - this.upperBound) / 2.0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "double v = (double) Math.max(this.lowerBound - this.upperBound);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "double v = (v * this.upperBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "double g = (int) Math.log(v) / this.upperBound);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "double g = (int) Math.round(v);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "double g = (int) Math.cos(v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "double g = (int) Math.log(v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "double b = (this.lowerBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "double v = (int) Math.abs(value - this.lowerBound);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "double H = (this.upperBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "double w = (this.upperBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "double g = (int) Math. be(this.lowerBound);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "double w = (value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "doubledoubleBound = (this.lowerBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "double v = (int) Math.log(value) / this.upperBound;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "double v = (int) Math.pow(10, v);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "doubleFile = (value - this.lowerBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "double h = (this.lowerBound - v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "double v = (int) Math.max(value, this.upperBound);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "double v = (int) ((value - this.lowerBound) / 2.0, (this.upperBound);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "double v = (int) ((this.lowerBound - this.upperBound) / (this.upperBound);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "double v = (value - this.lowerBound) / 2.0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "double v = (this.upperBound - this.lowerBound) / 2.0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "double g = (int) Math.pow(10, v) / this.upperBound;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "double v = (int) ((value - this.lowerBound) / 2.0, this.upperBound);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "double v = (int) ((this.upperBound - this.lowerBound) / 2.0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "double g = (int) ((value - this.lowerBound) / SUBDIVISIONS) * this.upperBound);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "double g = (int) Math.rint(v) / this.upperBound);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "double v = (int) (value - this.lowerBound);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int g = (int) ((value - this.lowerBound) / 2.0, (this.upperBound);",
                "identical": false
            }
        ],
        "buggy_line": "int g = (int) ((value - this.lowerBound) / (this.upperBound",
        "fixed_line": "int g = (int) ((v - this.lowerBound) / (this.upperBound"
    },
    "Lang-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone.getTime());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.SHORT());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getDefault());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.LONG);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.WEEK_OF_YEAR);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, m.getTime());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getInstance());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, mTimeZoneForced);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getTime());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneW);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone.getInstance());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Date c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone().getTime());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfoForced, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.DAY_OF_MONTH);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Date c = new GregorianCalendar(mTimeZone);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.TIME_OF_YEAR);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo(mTimeZoneForced, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getDefault());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, this.timeZone);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.DEFAULT);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, m.getTime());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar c = new GregorianCalendar(mMaxLengthEstimate);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mStyle);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.PREFIX);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, date);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneOfSecond(), this.millisecond);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone(), date, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneW, mTimeZoneForced);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getDefault().getTime());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, zone);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.DAY_OF_MONTH));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone. ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.SHORT());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.centuryOfSecond());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar c = new GregorianCalendar();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.MILLISECOND);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone.getTime(), this.millisecond);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getDefault().getDSTSavings());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.YEAR);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, mStyle);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getDefault().getID());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.DAY_OF_YEAR);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, range.getTime());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.NOTATION);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, string);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneSize);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getDate());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.HOUR);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, m);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.TIME_OF_MONTH);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.SOUTH);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.LEADING);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.NULL);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, range);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.CASE_IN_YEAR);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, zone);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, this.millisecond);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone, zone);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.LONG);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, this.millisecond);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.class);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo(), date, mLocale, TimeZone.SHORT);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.user);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo(mTimeZone);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForSelf(mTimeZone));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.WEEK_OF_MONTH);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.Config());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.CODE);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.google);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.FULL);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, month);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.PUSHED);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getTime());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, minute);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfoForced, mLocale, TimeZone.SHORT());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo, month, day).toString();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZone.getTime());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneDate.getTime());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Calendar c = new GregorianCalendar(mTimeZone()).getTime();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.START);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneMaxLengthEstimate);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, FIELDS_STORE_SIZE);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, this.mMaxLengthEstimate);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "GregorianCalendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.getInstance());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneSeries);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.TIME_OF_MONTH));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, TimeZone.Custom());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneForced, mLocale, this.dateFormat);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo(), date, cal);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar c = new GregorianCalendar(mTimeZoneInfo(), this.millisecond);",
                "identical": false
            }
        ],
        "buggy_line": "Calendar c = new GregorianCalendar(mTimeZone);",
        "fixed_line": "Calendar c = new GregorianCalendar(mTimeZone, mLocale);"
    },
    "Closure-67": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& n.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& lhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& n.getFirstChild() == assign) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "while (parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parent.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "while (n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "while (parent.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& parent.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "while (n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& lhs.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& n.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& lhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "switch (n.getType()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "else if (parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "switch (assignLhs.getType()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (assignLhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Preconditions.checkArgument(assignLhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (Node n = assignChainedName(assignLhs.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&= n.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "setChain(assignLhs.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "setChain(assignLhs.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Preconditions.checkArgument(assignLhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (assignLhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& n.getFirstChild().getString().equals(\"prototype\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && parent.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "isChainedProperty) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "setChain(assignLhs.getFirstChild().getType() == Token.ASSIGN)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "isChainedProperty = lhs.getFirstChild().getNext() != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& n.getFirstChild().getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && t.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (Node assign = assign.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& value.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "0 && assign.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (Node assign = assign.getFirstChild();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& lhs.getString().equals(\"prototype\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Equal(assignLhs.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Equal(assignLhs.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& parent.getFirstChild() == assign) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (Node n = assignChainedNames.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Node lhs = assign.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (Node n = assignChainedNames.getFirstChild().getFirstChild();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "lhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (Node assign = assign.getFirstChild().getFirstChild();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (Node n = assignChainedNameNode.getFirstChild().getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && t.getFirstChild().getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (Node n = assignChainedName(assignLhs.getFirstChild()) && lhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& n.getString().equals(\"prototype\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& assign.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "parent.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "0 && lhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& lhs.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "lhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (Node n = assignChainedName(assignLhs.getFirstChild()) && lhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (Node n = assignChainedNames.getFirstChild().getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& lhs.getFirstChild() == assign) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "while (assignLhs.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Preconditions.checkArgument(assign.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "getNativeType(JSError.make(t, n, assign));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& n.getFirstChild().getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (Node n = assignChainedNameNode.getFirstChild().getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (Node n = assignChainedNameNode.getFirstChild()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& parent.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Node lhs = n.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Node valueChain = n.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "leftChain.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && t.getScope().isDeclared(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Preconditions.checkArgument(assign.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "InferredProperty(assignLhs.getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "while (assignLhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && parent.getFirstChild() == assign);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (Node n = assignChainedNameNode.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && t.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (Node n = assignChainedName(assignLhs.getFirstChild()) && lhs.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (Node n = assignChainedNameNode.getFirstChild().getNext()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "InferredProperty(assignLhs.getFirstChild().getString())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (Node assign = n.getFirstChild().getFirstChild();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& n.getFirstChild().getType() == Token.CALL) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "InferredProperty(assignLhs.getFirstChild().getQualifiedName())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& n.getFirstChild().getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (Node n = assignChainedNameNode.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "setChain(assignLhs.getFirstChild().getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "isChainedProperty = lhs.getFirstChild().getNext()) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (Node assign = n.getFirstChild().getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Node valueChain = n.getFirstChild().getFirstChild();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (Node n = assignChainedNames.getFirstChild().getFirstChild().getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && parent.getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (Node assign = n.getFirstChild();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "parent.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "NodeUtil.isGetProp(assignLhsOfThis) && parent.getType() == Token.ASSIGN) {",
                "identical": false
            }
        ],
        "buggy_line": ") {",
        "fixed_line": "&& assign.getParent().getType() == Token.EXPR_RESULT) {"
    },
    "Jsoup-47": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (in) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c >= '0' && c <= '9') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (in instanceof Text || c == 'e' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c >= '0' && c <= '9') break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c == '.') break;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (offset >= 2 && c <= '9') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (in instanceofgetContent) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c == '.' && c >= '8') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (in instanceof Element) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (in instanceof Text || c == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c == '\\\\') break;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fields[i] == 'e' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (in instanceof String) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (fields[i] == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (in instanceof Text || c == '-') break;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c == 'e' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c == '\\n') break;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (in instanceof Text || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (in instanceof Text || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c == '\\' || c == 'e' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c == '\\n' || c == EOF_CHAR) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c == TimeZone.DEFAULT && c >= '8') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c == '\\n' || c == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (in instanceof Text || c == 'l' || c == '[' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c == 10 && c >= '8') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'z') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (in instanceof Text || c == 'e' || c == 'E')) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c == '.' && c >= '0' && val <= '9') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c == '\\' || c == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (offset >= 2 && c <= '9') break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (in instanceof Text || c == 'e' || c == 'E');",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c >= 0 && c < 128) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c == '+' || c == '-') break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c == '.' && c >= '8') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (in instanceofByDefault && !in.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c == '\\n' || c == 'J' || c == 'a' || c == 'z') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fields[i] == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c == '.') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c == TimeZone.DEFAULT || c == '\\n') break;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'z') break;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c == '\\' || c == '[' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c >= '0' && c <= '9') || c < '8') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c == '\\' || c == 'J' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'z') ? 2 : in.toString();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c == '.' && c < 128) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (in instanceof Text || c == 'l' || c == ']') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c == '\\' || c == 'J' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c ==html && c >= '8') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (in instanceof String) && !in.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (in instanceof Text || c == 'l' || c == '[' || c == '-') break;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (in instanceof Text || c == 'e' || c == 'E') continue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c == '\\' || c == '[' || c == '-') break;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c == 'e' || c == 'E') continue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E');",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c == '\\n' || c == cfg.getEntry().getValue()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'z') ? \"\" : in.toString();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c == '\\n' || c == 'J' || c == 'a' || c == 'z') break;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (in instanceof JDOM && in.ineno() < 20) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (in instanceof c && !in.hasChildren() && val.get(fields[i] != null)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (offset >= 2 && val <= '9') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (in instanceof Text || c == 'l' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (in instanceof char) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (in instanceof JDOM && in.ineno() < out.length) Kit.codeBug();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c == '\\n' || c == 'J' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c == TimeZone.DEFAULT || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c == '\\' || c == 'J' || c == 'D' || c == 'e' ? 2 : 1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c == '+' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (in instanceof Text || c == 'l' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'E') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c >= '0' && c <= '9') || c < '8' && val <= 037) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c == '\\' || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c == '\\' || c == 'J' || c == 'D') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c >= '0' && c <= '9') || c > '9') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (in instanceof Text || c == '-') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (in instanceof c && !in.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (in >= 0 && val <= 200) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c == '\\' || c == 'J' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c >= '0' && c <= '9') || c < '0') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E') continue;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c == '\\n' || c == EOF_CHAR) throw Kit.codeBug();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c == '.' && c >= '8') break;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c == '.' && c >= '0' && val <= '9') break;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (in instanceof Text || c == 'l' || c == '[' || c == '-') ? 1 : -1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (in instanceof Text || c < '8' && val <= 037) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' && c == 'z') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fields[i] == 'e' || c == 'E') continue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (in instanceof NoSuch && !in.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c == '\\' || c == 'J' || c == 'D' || c == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'e' || c == 'E') break;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == '-') Kit.codeBug();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c == '\\' || c == 'e' || c == 'E') continue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c >= 0 && c < 128) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c == '\\' || c == 'J' || c == 'a' || c == 'z') ? 2 : 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c == '\\n' || c == 'J' || c == 'E') Kit.codeBug();",
                "identical": false
            }
        ],
        "buggy_line": "if (!inAttribute)",
        "fixed_line": "if (!inAttribute || escapeMode == EscapeMode.xhtml)"
    },
    "JacksonDatabind-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "visitFloatFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "h.getProvider().isNumberType(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "visitNumberFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "h.getProvider().isPrimitiveType(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "h.getProvider().isEnabled(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "t, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "h.getProvider().findNumberType(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return createLongFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return createFloatFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return buildFloatFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "visitFloatFormat(typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "t, visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "match.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "h.getProvider().isEnabled(SerializationFeature.USE_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "h.getProvider().isAssignableFrom(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_LONG);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "h.getProvider().isEnabled(DeserializationFeature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "visitLongFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "h.getProvider().visitNumberType(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "hType, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "h.getProvider().isEnabled(SerializationFeature.BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "h.getProvider().isEnabled(SerializationFeature.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "h.getProvider().isEnabled(Feature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "visitDoubleFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "parseNumberFormat(typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "h.getProvider().isEnabled(SerializationFeature.INDENT_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "h.getProvider().isEnabled(SerializationFeature.INVOKEST_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "visitNumberFormat(typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "h.getProvider().isEnabled(SerializationFeature.USE_BIG_INTEGER_INTEGER);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "t, visitor.getProvider().findNumberType(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGINT);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return visitFloatFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "parseNumberFormat(typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "t, visitor.getProvider().isEnabled(SerializationFeature.BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, h.NumberType());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "match.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "limit, visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "h.getProvider().isEnabled(DeserializationFeature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "h.getNumberType() == JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "h.getAsFloatType(JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "h.getProvider().isEnabled(SerializationFeature.INARY_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "t, visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "h.getProvider().isEnabled(SerializationFeature.FAIL_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "visitFloatFormat(t, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "h.getProvider().isEnabled(SerializationFeature.INARY_INTEGER_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "h.setNumberType(typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "weekValueFormat(typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "h.getProvider().isEnabled(SerializationFeature.USE_BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "h.getProvider().isEnabled(DeserializationFeature.USE_BIG_INTEGER_INTEGER);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_objectCodec, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_INTEGER_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN, h)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "h.getProvider().isEnabled(Feature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, _typeHint);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "h.getProvider().isEnabled(SerializationFeature.denominator_INTEGER_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "t, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "h.getProvider().isEnabled(SerializationFeature.INVOKEST_INTEGER_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, v.intValue());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "hAsNumber, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, h.denominator);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "h.getProvider().isEnabled(SerializationFeature.class, v_INTEGER_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_LONG);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "h.getProvider().isEnabled(SerializationFeature.BIG_INTEGER_FOR_INTEGER);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "limit, visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "h.getProvider().isEnabled(SerializationFeature.USE_BIG_INTEGER_FOR_INTEGER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "visitor.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, h.NumberType());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "h.getNumberType() == JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, h.bit_INTEGER);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "h.getProvider().isEnabled(SerializationFeature.LAST_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "visitor.getProvider().isEnabled(SerializationFeature.BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_FOR_INTEGER);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "h.getProvider().isEnabled(DeserializationFeature.IN_BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "h.getNumberType(), v.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "h.getProvider().isEnabled(SerializationFeature.class_BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "typeHint, v, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_INTEGER_BIGDECIMAL_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return createFloatFormat(JsonParser.NumberType, h_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "h.getProvider().isEnabled(DeserializationFeature.USE_BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "h.getProvider().isEnabled(SerializationFeature.IN_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "h.getProvider().isEnabled(SerializationFeature.IN_INTEGER_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_TIMESTAMPS);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "hNumberFormat.format(hHint, h.getBigIntegerType());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "h.getProvider().isEnabled(SerializationFeature.IN_BIG_INTEGER_AS_INTEGER);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "visitFloatFormat(typeHint, v.toBigInteger(), h.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, h.getClass());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "visitNumberFormat(typeHint, _valueType, h.getIG_INTEGER);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "visitor.getProvider().isEnabled(SerializationFeature.USE_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "h.getProvider().isEnabled(SerializationFeature.WRITE_BIGDECIMAL_INTEGER, v);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "h.getProvider().isEnabled(SerializationFeature.class, v_BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "t, visitor.getProvider().isEnabled(SerializationFeature.WRITE_INTEGER_BIGDECIMAL_INTEGER);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "h.getProvider().isEnabled(DeserializationFeature.WRITE_BIGDECIMAL_AS_LONG);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "h.getProvider().visitNumberType(JsonParser.NumberType.BIG_INTEGER, _valueType);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "h.getProvider().isEnabled(JsonParser.NumberType.BIG_INTEGER, _valueToUpdate);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "hNumberFormat.format(hHint, h.BIG_INTEGER);",
                "identical": false
            }
        ],
        "buggy_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "fixed_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);"
    },
    "Math-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "double sum = 0;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "double sum = 0 && p.ySet().size() > 0) ? y - d : 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "double sum = 0 && p.ySet().contains(x.doubleValue() > 0) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "System.arraycopy(x, 0, result, 0, x.length);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1s.contains(y));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1}, d.ySet.class.isAssignableFrom(y))) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y))) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 due to Integer.MAX_VALUE)",
                "identical": false
            },
            {
                "k": 11,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i)",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (int sum = 0; n != 0 ? p.hashCode() : 0; k <= maxSet; ++i) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y))) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1s.height)",
                "identical": false
            },
            {
                "k": 15,
                "patch": "double sum = 0 && p.ySet().contains(x.doubleValue() > 0) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 for def.y))) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "double sum = 0 && p.ySet().size() > 0) ? y1 : 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedValue(y));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_NEW_CRCDUPLICITEDGE/x0-i)",
                "identical": false
            },
            {
                "k": 21,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON (x0-i)",
                "identical": false
            },
            {
                "k": 22,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1s.contains(y))) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 due tobooleanValue(y));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedContext.height)",
                "identical": false
            },
            {
                "k": 25,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedValue(y)",
                "identical": false
            },
            {
                "k": 26,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, y + 1s.contains(y));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int sum = 0; n != 0 ? p.length : 0; k <= maxSet; ++i) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "double sum = 0 && p.ySet().doubleValue() > 0) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "double sum = 0 && p.ySet().size() > 0) ? y : 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y)) return result.y;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOverriding the n-i] on bounds.size() - 1 ExceptionUtils.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedConstants.FREQUENCY)",
                "identical": false
            },
            {
                "k": 33,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON (x0-i][0])",
                "identical": false
            },
            {
                "k": 34,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i][1];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1s.y == 0.0) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y - 1 for def.y))) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int sum = 0; n != 0 ? p.length : 0; i > 0; --i) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "double sum = 0 && p.ySet().size() > 0) ? y[i - 1 : 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 due tobooleanValue(y))) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 on bounds.height)",
                "identical": false
            },
            {
                "k": 41,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y - 1 for deflatedValue(y));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULKSUMAutoRange.size() - 1 ExceptionUtils.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int sum = 0; n != 0 ? p.length : 0; c.nopSet; ++i) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i][0])",
                "identical": false
            },
            {
                "k": 46,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_DIED_TO_RADIUS || p.y == 0.0) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "System.arraycopy(x, y, 0, result, 0, x.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON (x0-i]\"));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 for def.y));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, y + 1s.contains(y))) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "double sum = 0 && p.ySet().size() > 0) ? y - d : 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y))",
                "identical": false
            },
            {
                "k": 53,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOverriding the n-i] on bounds.size() - 1 ExceptionUtils.isStatic(y)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 for def.y)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int sum = 0; n != 0 ? p.hashCode() : 0; k <= maxSet.size; ++i) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1d",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int sum = 0; n != 0 ? p.y : 0; k <= y; ++i) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1}, d.ySet.class.isAssignableFrom(x03) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1Context.height)",
                "identical": false
            },
            {
                "k": 61,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y))",
                "identical": false
            },
            {
                "k": 62,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1s.height-i)",
                "identical": false
            },
            {
                "k": 63,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON (x0-i][0]) == 0",
                "identical": false
            },
            {
                "k": 64,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULKSUMAutoRange.getComponentCount() - 1 due to Double.POSITIVE_INFINITY, 2*(n+1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedConstants.CONSTRUCTOR_STATIC)",
                "identical": false
            },
            {
                "k": 66,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedConstants.ILLEGAL_STATEMENT)",
                "identical": false
            },
            {
                "k": 67,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i]HasFREQUENCY)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int sum = 0; n != 0 ? p.hashCode() : 0; i > 0; --i) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1}, d.ySet.class.getTickCount() > 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_DIED_TO_RADIUS || p.y < 1) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y)) return result.y;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_NEW_CRCDUPLICITEDGETips, 1 for deflatedValue(y));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedpointSet.contains(y));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 due to set",
                "identical": false
            },
            {
                "k": 77,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON (x > 0.0)",
                "identical": false
            },
            {
                "k": 78,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i] static final double[] {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_NEW_CRCDUPLICITEDGETips, 1 for deflatedValue(x)",
                "identical": false
            },
            {
                "k": 80,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for each uniqueSet.contains(y));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "double sum = 0 && p.ySet().doubleValue() > 0) ? y - d : 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 due to set via this class not found",
                "identical": false
            },
            {
                "k": 83,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1 due to set via this.y))) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflatedParser.contains(y));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_NEW_CRCDUPLICITEDGETips, 2*(n+1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i]\"));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for each uniqueSet.size());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1}, d.ySetUtil.getCount(y));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for deflated as per [JACKSON-i]LIMITEDGETips)",
                "identical": false
            },
            {
                "k": 90,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1}, d.ySet.class.isAssignableFrom(x03) ? 1 : 0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_NEW_CRCDUPLICITEDDED",
                "identical": false
            },
            {
                "k": 92,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.ySet.size() - 1 for deflatedValue(y));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isStatic(y - 1d)));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_DIED_TO_RADIUS-i)",
                "identical": false
            },
            {
                "k": 95,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_ILLEGAL_STATE)+\") && p1}, d.ySet.contains(y));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BZip2Constants.CONSTRUCTOR_BIT_OLD, 2*(n+1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 for tickSet.contains(y));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOverriding the n-i] on bounds.size() - 1 for deflatedValue);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 ExceptionUtils.isNaN(y - 1 due to set via this.y))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "double sum = 0; // now belongs to do a new Double(x.length * BULB_ANGLEADING_ZOCCURRENCE_FACTOR), p1}, d.y + 1 due to (\"-i)",
                "identical": false
            }
        ],
        "buggy_line": "int sum = 0;",
        "fixed_line": "double sum = 0;"
    },
    "Lang-61": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = str.length - strLen;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = size - strLen;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = size - thisBuf.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = size - str.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = searchBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = str.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = thisBuf.length - position;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = chars.length - strLen;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = month.length - strLen;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = ensureBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = thisBuf.length - startIndex;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = iBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = buffer.length - strLen;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = thisBuf.length - MAX_deserialize(strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = str.length -thisBuf.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = startIndex + thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = thisBuf.length - 1 ? thisBuf.length : 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = thisBuf.length -(strLen);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = chBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = thisBuf.length - MAX_deserialize(strLen, buffer, startIndex);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = thisBuf.length - MAX_CODE_LENGTH;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = thisBuf.length -thisBuf.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = s.length - strLen;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = startIndex - thisBuf.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len =thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = characters.length - strLen;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = length - strLen;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = startIndex - strLen;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = root.length - strLen;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = thisBuf.length - MAX_OF_STREAM;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = array.length - strLen;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = thisBuf.length - MAX_CONSTRUCTOR_CHAR_ARRAY;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = thisBuf.length - mvLen;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = parameters.length - strLen;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = thisBuf.length - MAX_CONSTRUCTOR_GAP_CHAR_ARRAY;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len = startIndex - str.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = sBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = thisBuf.length - MAX_CODE_CHAR_ARRAY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = 0, thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = thisBuf.length - separatorLen;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = thisBuf.length - i;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = thisBuf.length - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = (thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = toBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = thisBuf.length - searchLen;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = thisBuf.length - MAX_ZOCCURRENCE_COMPARATOR;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int size = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = recordBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = thisBuf.length - MAX_CODE_LEN;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = thisBuf.length -(strLen, buffer, startIndex);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len =FloatingBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = thisBuf.length - strLength;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = thisBuf.length - MAX_CODE_ARRAY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = thisBuf.length - mv;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = thisBuf.length - 1 ? thisBuf.length : startIndex;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = i - str.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len =nullBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int str = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = (thisBuf.length - strLen) / thisBuf.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = b.length - strLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = baseBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = varBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = thisBuf.length -(strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = thisBuf.length - MAX_CONSTRUCTOR_ARRAY;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = thisBuf.length - MAX_CONSTRUCTOR_BUFFER;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = sourceBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = thisBuf.length - MAX_CONSTRUCTOR_CHAR_BUFFER;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = newSize.length - strLen;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = otherBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = thisBuf.length - MAX_deserialize(strLen, size);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = thisBuf.length - MAX_ZOOM_3) + strLen;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = children.length - strLen;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = thisBuf.length - MAX_LINE_SEPARATOR.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len = thisBuf.length - MAX_ZOCCURRENCE_SIZE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len =otherBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = i - strLen;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = inputsBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = Container.length - strLen;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = rightBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = implementedBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = R.length - strLen;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = thisBuf.length -(strLen;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = thisBuf.length - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = thisBuf.length - str;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = str.length - startIndex;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = text.length - strLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int startIndex = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = nonBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = thisBuf.length - MAX_deserialize(strLen, buffer, size + strLen);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = thisBuf.length - MAX_CONSTRUCTOR_GAP_ARRAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = maybeBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = rangeBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = thisBuf.length - MAX_STORE_SIZE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = tolerance.length - strLen;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = thisBuf.length - MAX_BYTE_ARRAY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = thisBuf.length - MAX_ZOOM_IN_MINUTE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len =res.length - strLen;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = state.length - strLen;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = buf.length - strLen;",
                "identical": false
            }
        ],
        "buggy_line": "int len = thisBuf.length - strLen;",
        "fixed_line": "int len = size - strLen + 1;"
    },
    "Math-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (entry == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (entry == null || entry.scope != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry == null || entry.isNaN()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry == null || entry.i == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry == null || entry.scope != table) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry == null || entry.BOTTOM) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry == null || entry.scope != header) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry == null || entry.isResource(entry)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (entry == null || entry.BOTH) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_UNQUOTED_FIELD_NAMES)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry == null || entry.getValue().equals(lhs)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry == null || entry.getValue().compareTo(lhs)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry == null || entry.value != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry == null || entry.getValue().equals(entry.MIN_VALUE)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry == null || entry.ineno.equals(entry.getEntry())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry == null || entry.sealed) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry == null || entry.isEnabled(SerializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry == null || entry.scope != reflectUp) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (entry == null || entry.isInitializingDeclaration()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry == null || entry.isEnabled(SerializationFeature.ALLOW_UNQUOTED_FIELD_NAMES)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.AUTO_DETECT_GET)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry == null || entry.is wrapper()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry == null || entry.inGlobalScope()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry == null || entry.getValue().equals(entry.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry == null || entry.isLetter()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry == null || entry.Bands) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry == null || entry.isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry == null || entry.getValue().equals(entry.getName())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry == null || entry.scope !=Sibling.length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (entry == null || entry.booleanValue() < min) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_UNQUOTED_TO_LIST)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry == null || entry.getValue().equals(entry.getEntry())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry == null || entry.ineno.equals(entry.getCharno())) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry == null || entry.getValue().length() < min.length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_NON_NUMERIC_LEADING_ZEROS)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry == null || entry.is w()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (entry == null || entry.length < rhsPos) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry == null || entry.scope != 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry == null || entry.getValue().compareTo(loopRatio) < min) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry == null || entry.ineno != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry == null || entry.ineno.isNaN()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_AS_PLAIN)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BOTH)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry == null || entry.isSymbol()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry == null || entry.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry == null || entry.getValue().compareTo(lhs, 0, rhs.length) < min;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry == null || entry.getValue() != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry == null || entry.length < min) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry == null || entry.getValue().length() < min;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry == null || entry.BeginsWithStripType(lhs)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_NON_NUMERIC_NUMBERS)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry == null || entry.getHeight() < min) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.getMethod() == DEFLATED && hasDesc[i] != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry == null || entry.getValue().equals( FIELDS_STORE_SIZE)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry == null || entry.getValue().compareTo(lhs, rhs) < min;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry == null || entry.is variables()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_SINGLE_QUOTES)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.getMethod() == DEFLATED && has wrong[i] != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry == null || entry.getValue().compareTo( FIELDS_STORE_SIZE) < min;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry == null || entry.getValue().length() < min.doubleValue()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry == null || entry.length > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_INTEGER_FOR_LENGTH)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_AS_CENTER)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_SIZE)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry == null || entry.scope !=Sibling.getEntry()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_FOR_METHODS)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry == null || entry.getWidth() < min) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry == null || entry.getHeight() < rhsPos) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry == null || entry.isExplicitlyIncluded()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry == null || entry.scope != '0') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry == null || entry.scope !=All.length) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry == null || entry.isAll()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry == null || entry.getValue().length() < min) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.getMethod() == DEFLATED && hasIndex < length) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry == null || entry.i == table) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.getMethod() == DEFLATED && hasIndex < names.length) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry == null || entry.BOTTOM_CENTER < min) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry == null || entry.isExtern()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry == null || entry.length < min + 1 || entry.isNaN()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry == null || entry.isEnabled(SerializationFeature.ALLOW_UNQUOTED_TO_LIST)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_AS_level)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_FOR_TO_SIZE)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.AUTO_DEPRECATED)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_SINGLE_VALUE)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_AS_NAMES)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.AUTO_DETECT_SETTER)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_FOR_PROPERTY)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry == null || entry.getValue().equals(entry.MINIMUM_VALUE)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BOLD_LENGTH)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry == null || entry.isExplicit(entry)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry == null || entry.length < min;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry == null || entry.getValue().equals(entry.min)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry == null || entry.getValue().equals(entry.node)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_FOR_SIZE)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.ALLOW_NON_NUMERIC_LEADING_ZOTES)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry == null || entry.getValue().equals(entry.scope)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry == null || entry.isEnabled(MapperFeature.USE_BIG_DECIMAL_FOR_LENGTH)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry == null || entry.getValue().equals(entry.sealed)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry == null || entry.ineno.equals(entry.getChk())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
        "fixed_line": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
    },
    "Math-80": {
        "fixes": [
            {
                "k": 1,
                "patch": "int j = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int j = n - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int j = n * k - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int j = array.length - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int j = (n - k)) / 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int j = (k * n - k)) / 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int j = (n - k) / 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int j = Math.min(n - k, n - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int j = Math.min(k * n - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int j = Integer.MIN_VALUE * n - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int j = (n % 2 == 0 ? 0 : n - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int j = 2 * n - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int j = (n - k * n) / 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int j = n * ((n - k) / n - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int j = Math.min(k, n - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int j = Math.min(k - n - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int j = end1 * n - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int j = (k * n - k)) / 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int j = (k * n - k;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int j = Math.min(k - k, n - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int j = (n - k % 2d) - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int j = ((n - k) / n - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int j = (k == 1) ? 0 : n - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int j = (n - k * sum - 1));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int j = (n - k % 2 * n) - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int j = (n - k % 2 == 0 ? 1 : 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int j = (n - k % 2 == 0 ? 1 : n - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int j = Math.min(array, n - k);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int j = Math.min(n - k, sum / n - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int j = Math.min(array, n - k - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int j = ((n - k) * n - 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int j = (n - k)) / n - 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int j = L * n - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int j = (k * n - k);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int j = Math.min(k, n - k);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int j = Math.min(k * n - k;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int j = Math.min(array, k - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int j = Math.min(array, n - k)) / 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int j = (o * n - k)) / 2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int j = (n - k % 2 == 0 ? 1 : -1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int j = getNe[0] * n - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int j = (n % 2 == 0 ? 1 : n - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int j = bbits[0] * n - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int j = n * ((n - k)) / n;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int j = n * ((n - k)) / n) - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int j = (n - k)) * n;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int j = array.length * n - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int j = (n - k / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int j = (n % 2 == 0 ? 1 : -1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int j = (n - k * n + 1 - k;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int j = (n - k * n);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int j = 4 * n - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int j =p[0] * n - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int j = (n - k / n - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int j = Math.min(k - n, k - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int j = Math.min(k * n - k);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int j = private.length * n - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int j = end1 * k - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int j =n * k - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int j =n - k * n - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int j = n * ((n - k) / 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int j = (o * n - k)) / 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int j = (n - k)) * 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int j = (n - k + 1 * n) - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int j = data.length - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int j = (n - k * n) / 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int j = ((n - k) * (1 - k)) / n;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int j =56 * n - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int j = ((n - k) / 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int j = Math.min(k - m, n - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int j =set.length * n - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int j = Math.min(k / n - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int j = k * n - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int j = Math.min(n - k, sum) / n - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int j = 0, n - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int j = (n - k % 2 == 0 ? 0 : n - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int j = (4 * n - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int j = (n - k % 2 == 0 ? 1 : 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int j = Math.min(k - n) / 2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int j = (n % 2 == 0 ? -1 : n - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int j = (1 << n - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int j = (n - k)) / 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int j = (n % 2 == 0 ? 1 : 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int j = private.length - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int j = (n - k * n - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int j = (n - k << 1) - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int j = Math.min(array, n - k + 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int j = Math.min(n - k, sum + 1 - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int j = Math.min(n1, k - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int j = (n - k + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int j = Math.min(k - k, sum / n - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int j = 1 - k;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int j =Emitter.length - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int j = n * k + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int j = (n % 2 == 0 ? 0 : 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int j = bbits[0] - i - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int j = (n - k)) * 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int j =(\"\\n - k - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int j = (n - k / 2d) - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int j = Math.min(n - k, sum * n - 1;",
                "identical": false
            }
        ],
        "buggy_line": "int j = 4 * n - 1;",
        "fixed_line": "int j = 4 * (n - 1);"
    },
    "Jsoup-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "accum.append(escapeMode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accum.append(clazz.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accum.append(\"Mode\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accum.append(String.valueOf(c));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accum.append(clazz.getEntry().toString());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accum.append(String.valueOf(escapeMode));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accum.append(clazz.toString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accum.append(clazz.getLineno()).append('\\n');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "accum.append(N.next());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accum.append(clazz.getLineno());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accum.append(String.valueOf(clazz.getName()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accum.append(titleMode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "accum.append(cbuf);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accum.append(clazz.ineno(), node.getCharno());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accum.append(String.valueOf(cArg));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(\" <\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accum.append(clazz.getLineno()).append(\".\\n\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accum.append(cArg);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accum.append(cMode);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accum.append(clazz.getLineno()).append('\\'');",
                "identical": false
            },
            {
                "k": 22,
                "patch": "accum.append(cDefaultMode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accum.append(\" <<\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accum.append(clazz.getLineno()).append(\">\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accum.append(clazz.get upper());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accum.append(String.valueOf(cMode));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accum.append(\" | \");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accum.append(N.toString());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accum.append(\" <\").append(String.valueOf(escapeMode));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accum.append(cOfSuccesses);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accum.append(clazz.inGlobalScope()).append(\"]\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accum.append(N.nextMode());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accum.append(clazz.getLineno()).append(\"]\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accum.append(min);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "accum.append(clazz);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "accum.append(clazz.parent().getLineno());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accum.append(value);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "accum.append(clazz.getConcrete().toString());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accum.append(N.next().toString());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accum.append(clazz.getLineno()).append(\":\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accum.append(clazz.ineno(), n.getCharno());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(String.valueOf(cArgMode));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accum.append(clazz.escapeHtml());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accum.append(cOfSuccessor());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accum.append(clazz.ineno()).append('\\n');",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accum.append(clazz.scope);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accum.append(Long.valueOf(clazz.getName()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accum.append(String.valueOf(clazz.getLineno()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accum.append(clazz.\").append(escapeMode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accum.append(\" || c == '\\n\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accum.append(clazz.get0().toString());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accum.append(clazz.min());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accum.append(N.escapeHtml());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "accum.append(clazz.parent().getSimpleName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "accum.append(switchMode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accum.append(clazz.ineno(), node.getChksum());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "accum.append(Long.toString());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accum.append(String.valueOf(cbuf));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accum.append(Feature.AUTO_CLOSE_SOURCE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accum.append(String.valueOf(escapeMode).append('\\n');",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accum.append(clazz.numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accum.append(clazz.parent().getFeature.AUTO_CLOSE_SOURCE);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accum.append(String.valueOf(clazz.getEntry().toString()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accum.append(backslashMode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accum.append(clazz.getLineno()).append('>');",
                "identical": false
            },
            {
                "k": 66,
                "patch": "accum.append(clazz.getInvalidIndex()).append(\"]\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accum.append(clazz.scope.toString());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accum.append(clazz.inGlobalScope()).append('\\n');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accum.append(\";\\n\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accum.append(clazz.getMode());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accum.append(\", \");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append(clazz.getEntry().ineno());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accum.append(clazz.getLineno()).append(\", \");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accum.append(clazz.getLong().toString());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "accum.append(String.valueOf(escapeMode) + \"\\n\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accum.append(String.valueOf(clazz.intValue()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accum.append(charno);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accum.append( PeriodMode);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accum.append(cOfThis);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accum.append(cOfSuccessor);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accum.append(clazz.getCharacterIndex() + 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accum.append(cOfSuccessor()).append('\\n');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accum.append(clazz.dineno()).append('\\n');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accum.append(Context.escapeHtml());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accum.append(iMode);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accum.append(clazz.getLineno()).append(\"&G\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accum.append(\" || c == '\\n');",
                "identical": false
            },
            {
                "k": 88,
                "patch": "accum.append(numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accum.append(clazz.getImplicitPrototype());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accum.append(\" <\").append(cArg);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accum.append(clazz.getSimpleName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accum.append(clazz.getDouble().toString());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accum.append(clazz.value());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "accum.append(clazz.getLineno()).append(\"/\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accum.append(clazz.escapeJsonMode());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accum.append(\" <\").append(String.valueOf(c));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accum.append(clazz.getLineno()).append(']');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "accum.append(\" <\").append(String.valueOf(cArg));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accum.append(clazz.getLineno()).append(\" known properties\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accum.append(Long.MAX_VALUE);",
                "identical": false
            }
        ],
        "buggy_line": "accum.append(c);",
        "fixed_line": "accum.append(\"&#xa0;\");"
    },
    "Chart-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (endIndex < 0) { // end period is not in original series",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (endIndex < 0) { end period is not in original series",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (endIndex < 0) { last item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (endIndex < 0) { // end period is first item AFTER end period",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (endIndex < 0) { last item contains end period is not in original series",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (endIndex < 0) { // end period isns the end period is not in original series",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (endIndex < 0) { // end period is ignored are arranged ANTICLOCKWISE",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (endIndex < 0) { // end period is first item BEFORE end period",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (endIndex < 0) { // end period is a new item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (endIndex < 0) { // end period is a new item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (endIndex < 0) { last item contains the end period is not in original series",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (endIndex < 0) { // end period is item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (endIndex < 0) {K represents the end period is not in original series",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (endIndex < 0) { // end period is AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (endIndex < 0) { // end period is last item BEFORE end",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (endIndex < 0) { recv the end period is not in original series",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (endIndex < 0) { item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (endIndex < 0) { proxy contains end period is not in original series",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (endIndex < 0) { // end period is not in the series",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (endIndex < 0) { // end period is not in start",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (endIndex < 0) { // end period is empty in original series",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (endIndex < 0) { // end period is after the end period",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (endIndex < 0) {this represents the end period is not in original series",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (endIndex < 0) {idx the end period is not in original series",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (endIndex < 0) { // end period is after this represents the item AFTER end period",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (endIndex < 0) { new TimeSeries end period is not in original series",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (endIndex < 0) { // end period is not a new TimeSeries end period is not in original series",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (endIndex < 0) {As end period is not in original series",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (endIndex < 0) { item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (endIndex < 0) { // end is not in original series",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (endIndex < 0) { // end period is not in the end period",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (endIndex < 0) { // end period is empty",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (endIndex < 0) {CALL the end period is not in original series",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (endIndex < 0) {xx end period is not in original series",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (endIndex < 0) { // end period is not in copy from item AFTER end period",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (endIndex < 0) { // end period is copy from item AFTER end period",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (endIndex < 0) { // end period is after this represents the item BEFORE end period",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (endIndex < 0) { // end period is after last item BEFORE end",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (endIndex < 0) { PRINT end period is not in original series",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (endIndex < 0) { skip the end period is not in original series",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (endIndex < 0) {write end period is not in original series",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (endIndex < 0) { // end period is copy in original series",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (endIndex < 0) { // end period is not inull the end period",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (endIndex < 0) { // end period is last item AFTER end period",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (endIndex < 0) { item contains end period is not in original series",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (endIndex < 0) {ATURE end period is not in original series",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (endIndex < 0) { // end period is item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (endIndex < 0) { // end period is after this represents the series",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (endIndex < 0) { // end period is not in instance the end period",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (endIndex < 0) { // end period is not in original this is first item AFTER end period",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (endIndex < 0) { // end period is not a new item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (endIndex < 0) { key end period is not in original series",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (endIndex < 0) { // end period is item AFTER end period",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (endIndex < 0) { // end period is not in the item AFTER end period",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (endIndex < 0) {get end period is not in original series",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (endIndex < 0) { // end period is not in parsed at the end period",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (endIndex < 0) { exp: end period is not in original series",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (endIndex < 0) { Arithmetic end period is not in original series",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (endIndex < 0) { TimeZone end period is not in original series",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (endIndex < 0) { // end period is not a new item BEFORE end period",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (endIndex < 0) { // end period is not in the item BEFORE end period",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (endIndex < 0) { // end period is after the series",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (endIndex < 0) { // end period is not in last item",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (endIndex < 0) { // end period is not in original this is last item BEFORE end",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (endIndex < 0) { // end period is ignored in original series",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (endIndex < 0) { // end period is not in original this is first item BEFORE end",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (endIndex < 0) {getString end period is not in original series",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (endIndex < 0) { // end period is after this represents the item JSON object is not in original series",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (endIndex < 0) { // end period is item BEFORE end period",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (endIndex < 0) { // end period is not in last item BEFORE end",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (endIndex < 0) { // end period is empty handle positive for next is not in original series",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (endIndex < 0) { lastRange period is not in original series",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (endIndex < 0) {ual end period is not in original series",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (endIndex < 0) { // end period is not in the item JSON object is not in original series",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (endIndex < 0) { // end period is not in8 the item AFTER end period",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (endIndex < 0) { // end period is not in parsed at end period",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (endIndex < 0) { // end period is a new item BEFORE end period",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (endIndex < 0) { // end period is not in one series",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (endIndex < 0) { last end period is not in original series",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (endIndex < 0) { // end period is not in8 the series",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (endIndex < 0) { // end period is ignored are arranged ANT Short is not in original series",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (endIndex < 0) {call is not in original series",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (endIndex < 0) { // end period is not in instance of item AFTER end period",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (endIndex < 0) { // end period is not in the item BEFORE end",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (endIndex < 0) { still end period is not in original series",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (endIndex < 0) {\"); end period is not in original series",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (endIndex < 0) { // end period is after last item",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (endIndex < 0) { // end period is not in current order",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (endIndex < 0) {System.data is not in original series",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (endIndex < 0) { // end period is not in JSON last item BEFORE end",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (endIndex < 0) { // end period is not a new item AFTER end period is not in original series",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (endIndex < 0) { // end period is a new item AFTER end period",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (endIndex < 0) { // end period is empty get the end period",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (endIndex < 0) { // end period is not in instance of last item",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (endIndex < 0) { // end period is ignored are arranged ANT Short is last item BEFORE end",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (endIndex < 0) { // end period is after last item BEFORE end period is not in original series",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (endIndex < 0) { // end period is not in copy from item BEFORE end",
                "identical": false
            }
        ],
        "buggy_line": "if (endIndex < 0) {",
        "fixed_line": "if ((endIndex < 0)  || (endIndex < startIndex)) {"
    },
    "Math-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "return multiplyValue();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "returntt <= 0.0 ? 1.0 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "returntt <= 0.0 ? Double.MAX_VALUE : fraction.doubleValue();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(fraction.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "returntt <= 0.0 ? Double.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return multiplyOCCURRENCE_COMPARATOR;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(numerator);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returntt <= 0.0 ? 1.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "returntt <= 2.0 ? Double.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "returntt <= 0.0 ?fraction.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return multiplyValue(fraction.doubleValue());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "returntt <= 0.0 ? 2.0 : multiplyValue(fraction.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returntt <= 0.0 ? fraction : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returntt <= 2.0 ? Double.MAX_VALUE : fraction.doubleValue();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returntt <= 0.0 ? Double.MAX_VALUE : multiply;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return if (this.numerator >= 0) ? Double.doubleValue() : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 2 ? 1.0 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 2 ? 1.0 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(numerator);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(1.0f);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return if (this.numerator >= 0) ? 1 : area;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "returntt <= 0.0 ? 1.0 : fraction.doubleValue();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "returntt <= 0.0 ? Double.MAX_VALUE : 1.0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return multiplyOCCURRENCE_MINIMUM_SIZE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return multiplyLEADING_ZOCCURRENCE_COMPARATOR;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "returntt <= 2.0 ? Double.MAX_VALUE : multiply;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "returntt <= 0.0 ? Integer.MAX_VALUE : fraction.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return multiplyOLE_COLLECTION;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return multiplyInteger.valueOf(this.xValue);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.doubleValue());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE) );",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? 1.0 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.upperBound);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE) + 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "returntt <= 0.0 ? multiplyValue : (doubleValue() + 1));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return multiplyValue(fraction.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returntt <= 0.0 ? 1.0 : max;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return multiplyValue(fraction.doubleValue() * 4);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "returntt <= 0.0 ? multiplyValue : (doubleValue() + fraction.doubleValue());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 2 ? 1.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : fraction.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(numerator) );",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return multiplyInteger.valueOf(this.numerator / 2 - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returntt <= 2.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 1 ? 1.0 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(1.0f);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 2 ? 1.0 : Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "returntt <= 0.0 ? 2.0 : multiplyValue(numerator);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(1.0) );",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : fraction.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : fraction;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(1.0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE) + \"CIRCLE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(upper);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return if (this.numerator >= 0) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returntt <= 0.0 ? 2.0 : multiplyValue();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(numerator) + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "returntt <= 0.0 ? multiplyValue : (doubleValue() * 4);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return if (this.numerator >= 0) ? Double.doubleValue() : fraction.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "returntt <= 0.0 ? fraction : (doubleValue() * denominator);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returntt <= 0.0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return multiplyOListeners(new Double(fraction.doubleValue() / denominator;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return if (this.numerator >= 0) ? Double.doubleValue() : fraction.denominator;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.chipValue());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return multiply NodePointer.doubleValue();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "returntt <= 0.0 ? fraction : (doubleValue() * 2L) + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return multiplyValue(fraction.recipValue());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(fraction.MAX_VALUE) + \"CIRCLE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(1.0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : fraction;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return multiplyOListeners(new Double(fraction.doubleValue() * 4));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return multiplyOListeners(new Double(fraction.doubleValue() / 2));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "returntt <= 0.0 ? multiplyValue : (doubleValue() * 2));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 2 ? 1.0 : 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return surroundingInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : 0L;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returntt <= 0.0 ? Integer.MAX_VALUE : multiply;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "returntt <= 0.0 ? multiplyValue : (doubleValue() * denominator);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return multiplyValue(fraction.MAX_VALUE) + 2 * @doubleValue();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return multiplyValue(fraction.MAX_VALUE) + 2 * 4) % 7;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return multiplyValue(fraction.MAX_VALUE) + 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "returncomputeValue(a) * Math.sin(x)) / 2 - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(fraction.MAX_VALUE );",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returntt <= 0.0 ? 1.0 : multiplyValue(1.0) + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(fraction.MAX_VALUE) + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : 2;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returntt <= 0.0 ? Integer.MAX_VALUE : fraction.doubleValue();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return multiplyInteger.valueOf(fraction.MAX_VALUE) > 1 ? Double.MAX_VALUE : area;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "returntt <= 0.0 ? multiplyValue : (doubleValue() * 2L) + 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "returntt <= 0.0 ? fraction : multiplyValue(upper);",
                "identical": false
            }
        ],
        "buggy_line": "return multiply(100).doubleValue();",
        "fixed_line": "return 100 * doubleValue();"
    },
    "Jsoup-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "clone.classNames = (Element) super.clone();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "clone.classNames = super.clone();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "clone.classNames = new Element(this.seriesNames);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "clone.classNames = (Element) Object.classNames.clone();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "clone.classNames = new Element(this.dataElement, clone.class);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "clone.classNames = new Element(clone);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "clone.classNames = new Element[super.size()];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "clone.classNames = new Element(this.keySet());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "clone.classNames = new Element(clone, this.classNames);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "clone.classNames = (Element) Object.class;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "clone.classNames = new Element(this.class, clone.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "clone.classNames = new Element(this.data, clone.class);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "clone.classNames = new Element(clone, baseUri);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "clone.classNames = new Element(this.parent, clone);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "clone.classNames = new Element(this.seriesNames, this.seriesNames);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "clone.classNames = new Element(this.dataElement);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clone.classNames = new Element(this.name, clone.classNames);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "clone.classNames = new Element(this.obj, clone.class);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "clone.classNames = (Element) this.classNames.clone();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "clone.classNames = new Element(keys, baseUri);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "clone.classNames = new Element(this.seriesNames, Object.class);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "clone.classNames = new Element(this.class);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "clone.classNames = new Element(this.parent, clone.class);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "clone.classNames = new Element(keys, this.classNames);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "clone.classNames = new Element(this.class, clone.seriesNames);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "clone.classNames = new Element(this.seriesNames, 19);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "clone.classNames = new Element(this.seriesNames, parser);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "clone.classNames = new Element(this.Key, clone);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "clone.classNames = new Element(this.text, clone);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "clone.classNames = new Element(this.value, clone.class);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "clone.classNames = new Element(this.seriesNames, baseUri);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "clone.classNames = new Element(this.name, clone.class);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "clone.classNames = new Element(this.e, clone.class);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.seriesNames);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.dataElement);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "clone.classNames = new Element(this.rawClass, clone.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "clone.classNames = new Element(this.seriesNames, this.value);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "clone.classNames = new Element(this.quads, clone);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.listener);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "clone.classNames = new Element(this.seriesNames, this.maximumItemCount);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "clone.classNames = new Element(keys);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "clone.classNames = new Element(this.class, clone.baseUri);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "clone.classNames = new Element(this.seriesNames, this.dataElement);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.paint);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "clone.classNames = new Element(this.seriesNames, that.seriesNames);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "clone.classNames = new Element(lower, this.dataElement);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "clone.classNames = new Element(keys, clone.class);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "clone.classNames = new Element(this.dataset, clone);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "clone.classNames = (Element) Object.clone();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "clone.classNames = new Element(this.seriesNames,array, 1));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "clone.classNames = new Element[super.clone();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.text);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "clone.classNames = new Element(this.seriesNames, super.clone());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "clone.classNames = (Element) Object.classNames;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "clone.classNames = new Element(this.seriesNames, this.iName);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "clone.classNames = new Element(lower, clone.class);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "clone.classNames = new Element(this.obj, clone.dataElement);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "clone.classNames = new Element(this.seriesNames, item);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "clone.classNames = new Element(this.class, clone.iElement);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.class);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "clone.classNames = new Element(this.externs);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "clone.classNames = new Element[this.size()];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "clone.classNames = new Element(clone, this.dataElement);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "clone.classNames = new Element(this. startElement, clone.class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "clone.classNames = new Element(this.tagNames, clone.class);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "clone.classNames = new Element[super.size()]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "clone.classNames = new Element(this.class, clone.dataElement);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "clone.classNames = new Element(this.e);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "clone.classNames = new Element(this.keys, clone.class);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "clone.classNames = new Element(clone, this.obj);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "clone.classNames = new Element(lower, this.seriesNames);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "clone.classNames = new Element(clone, this.seriesNames);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "clone.classNames = new Element(this.parser, clone.class);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "clone.classNames = ((Element) this.classNames).clone();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "clone.classNames = new Element(this.name, clone.value);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "clone.classNames = new Element(this.seriesNames, clone.seriesNames);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "clone.classNames = new Element(this.node, clone);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "clone.classNames = new Element(this.seriesNames, null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "clone.classNames = new Element(this.dataElement, baseUri);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "clone.classNames = new Element(this.rawClass, clone.class});",
                "identical": false
            },
            {
                "k": 81,
                "patch": "clone.classNames = new Element(this.seriesNames, clone.iElement);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "clone.classNames = new Element(this.tagNames, clone.dataElement);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "clone.classNames = new Element(this.obj, clone.baseUri);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "clone.classNames = new Element(this.function, clone);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "clone.classNames = new Element(this.keySet, clone.class);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "clone.classNames = (Element) ObjectUtilities.deepClone(this.value);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "clone.classNames = new Element(this.tagNames, clone.seriesNames);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "clone.classNames = new Element(this.seriesNames, out);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "clone.classNames = new Element(this.seriesNames, this.iElement);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "clone.classNames = new Element(this.tagName, clone.class);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "clone.classNames = new Element(this.keySet);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "clone.classNames = new Element();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "clone.classNames = new Element(this.array, clone);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "clone.classNames = new Element(this.array, clone.class);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "clone.classNames = new Element(this.dataElement, clone);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "clone.classNames = new Element(this.name, clone.class});",
                "identical": false
            },
            {
                "k": 97,
                "patch": "clone.classNames = new Element(this.historyCount);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "clone.classNames = new Element(this.tagNames);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "clone.classNames = new Element(this.key, clone.class);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "clone.classNames = new Element(iterator.class, baseUri);",
                "identical": false
            }
        ],
        "buggy_line": "clone.classNames();",
        "fixed_line": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
    },
    "Math-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (getN() > m Range.MAX_VALUE) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (double) (n - 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (nopcode * 2.0) / (double) n);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (nestable) (size() * 2));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (double) (n >>> 8)) / 2.0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (getLowerBound() / 2.0) + (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (getLowerBound() / 2.0) + (double) getSumSize();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (double)mean().getLowerBound() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (nopcode * getNumberOfSuccesses() / 2.0) + (double) n);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (double) (n - 2);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (double)mean().getSegmentSize() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (nopcode * 2.0) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (double)mean().getSize() * 2 + (n - 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (nopcode * 2.0) / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (nopcode * getNumberOfSuccesses()) / 2.0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (double) (nopulationSize * 2));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (nestimateSize() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (nestable) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (double)mean().getLowerBound() / (double) getPopulationSize);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (getN() > m Range.length) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (getLowerBound() / 2.0) + (double) * n);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (getN() > m Range.doubleValue()) / 2.0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (double)mean().getLowerBound() / 2.0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (double)mean().getLowerBound() / (double) getSumSize);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (double)mean().getLowerBound() / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (getLowerBound() / 2.0) * (double) n);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (nestable)(millisecond) / 2.0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (double)mean().getLowerBound() / (double) n);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (n-1) / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (double)estimateSize() * (n - 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (Double.getLowerBound() / 2.0) + (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (double)estAtStartMap.get(n) / 2.0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (double) getMinutes() * (n - 1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (double)mean().getSegmentSize() / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (double)mean().getSize() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (Double.getLowerBound() / 2.0) + (double) getSumSize();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (getLowerBound() / 2.0) + (double) n);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (n % 2 == 0) ? mQuad() : (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (n < 3) ? -1 : (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (getLowerBound() / 2.0) * getPopulationSize();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (double) (n+1)) / 2.0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (double)m.getSize() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (getLowerBound() / 2.0) + (double) 3;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (getN() > mQuadSize) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (double)estAtStartMap.get(millisecond);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (double)mean().getLowerBound() / (double) (n - 1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (getN() > mPatternSize) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (double) (nopcode * 2));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (double) n * getNumberOfSuccesses();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (getLowerBound() / 2.0) + (double) n - 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (getLowerBound() / 2.0) + (double)translated * n);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (getN() > m.getLowerBound()) / 2.0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (n-1) / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (double) (narySize / 2.0);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (double)m.getSampleSize() / (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (nestable) / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (double)mean().getSize() / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (double) (narySize * 2));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (n < 3) ? -1 : (double) moment.getN();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (double)nopcodeBug();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (double)mean().getSegmentSize() / (double) n);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (double)m.getSampleSize() * 2 + (n - 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (getLowerBound() / 2.0) + (double)PrettySize();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (getLowerBound() / 2.0) + (double) moment.getSize();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (nestable) (not.getN() / 2.0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (Double.getLowerBound() / 2.0) + (n - 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (Double.getLowerBound() / 2.0) + (double) * n);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (getLowerBound() / 2.0) + (double)EntryCount * 2));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (nopcode * 2.0) / (double) n;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (getLowerBound() / 2.0) + (double) IllegalArgumentSize();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (getLowerBound() / 2.0) + (double)resultArraySize();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (getLowerBound() / 2.0) * Math.sqrt(m);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (double) getPopulationSize() * 2 + (n - 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (getLowerBound() / 2.0) + (double)52L * n);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (double) (n * 2));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (double) (nopcode * 8)) / 2.0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (getLowerBound() / 2.0) + (double) getMinuteSize();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (narySize / 2.0) + (double) getPopulationSize();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (double) (m.getLowerBound() / 2.0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (nestimateSize() / (double) (n - 1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (double) getMinSize() * (n - 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (nestable)(n-1) / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (getN() > mQuadSize()) ? getPopulationSize : 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (getLowerBound() / 2.0) * Math.log(millisecond);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (double)m.getSize() / (double) getSumSize();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (double) ((nopcode + 3) / 2.0) + (double) getSumSize();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (double) (n - power) / 2.0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (nopcode * getNumberOfSuccesses() / 2.0) + (double) getSumSize();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (Double.getLowerBound() / 2.0) * (n - 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (getLowerBound() / 2.0) + (double)bodySize();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (getN() > m Range.doubleValue()) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (sum / 2.0) * Math.sqrt(m);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (getLowerBound() / 2.0) + (double) keySize();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (getLowerBound() / 2.0) + (double) SWTSize();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (double) (narySize - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (getLowerBound() / 2.0) + (double)millisecond * n);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (double) (m.getSize() * 2 + (n - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (getLowerBound() / 2.0) + (double)checkSize();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (double) ((nopcode + 3) / 2.0) + (double) n);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (getLowerBound() / 2.0) + (double) 9);",
                "identical": false
            }
        ],
        "buggy_line": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
        "fixed_line": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"
    },
    "Closure-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (x < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (x == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c == '\\n' || c == '-') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c == '-') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( parent.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (xZeroSetting == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c == '_' || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (msw == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (xPos < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (x < 0 && c == '-') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (offset < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (x < 0 && Math.abs(x - 1.0) == '-') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (xZeroSetting == x && prev == '-') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c == '\\r' || c == 'e' || c == 'E') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (x < 0 && prev == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (xZeroSetting == xiae' || prev == '-') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (xZeroSetting == '-') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (d < 0.5 && prev == '-') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (x3 < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (descZeroSetting == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (xv == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (xZeroSetting == x + 1 && prev == '-') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (x < 0 && prev == text.length() - 1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (x < 0 && prev == '-' || c == '+') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (x < 0 && prev == '-' || c == '-') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (x < 0 && Math.abs(y - 1.0) == '-') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c == '\\\\') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (xLocal < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (x < 0 && outerZeroSetting == '-') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c == '_' || c == 'a' || prev == '-') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c == '_' || c == 'a' || c == '-') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c == '\\r' || c == '-') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (x < 0 && prev == '-' || prev == '-') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (v < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (xZeroSetting == x1) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (xADD < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (x < 0 && Math.abs(x - 1.0) == '-' || prev != '-') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (xZeroSetting == xiae' || prev != 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c == '_' || c == '-') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c == '\\r' || c == '\\n') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (xZeroSetting == xiae' || prev < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c == '\\n' || c == 'e' || c == '-') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( parent.getType() == Token.NOT && prev == '-') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c == '_' || c == 'e' || prev == '-') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (xZero < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (x < 0 && Math.abs(value) == '-') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (xZero text == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (xv < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( parent.charAt(position) == '-') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c == '\\n' || c == 'e' || prev == 'E') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (xZeroSetting == x) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c == '\\n' || c == '+') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (xZero == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (xsw == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (xZeroSetting == xiae' || prev == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c == '\\n' || c == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (d < 0.5 && prev > 0 && prev < 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( parent.getType() == Token.NUMBER) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (x < 0 && first == '-') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c == '_' || c == 'p') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (d < 0.5 && prev > 0 && prev < '-') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (next == '-') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c == '_' || c == 'e' || c == '-') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (x < 0 && Math.abs(x - width) == '-') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (x < 0 && prev == str.length() - 1) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( parent.getType() == Token.EOF) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (x < 0 && Math.abs(x - 1.0) == '-' || prev == '-') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (x < 0 && exp == '-') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (x < 0 && Math.abs(x - u) == '-') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (x < 0 &&modifiable == '-') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (xZeroSetting == xiae' || c == '-') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c == '\\n' || c == 'e' || prev == '-') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (x < 0 && Math.abs(y - 1.0) == '-' || prev != '-') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (x < 0 && str == '-') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (xZeroSetting ==Generation && prev == '-') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (xZeroSetting == x20 || prev < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (d < 0.5 && prev > 0x7F) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (xZeroSetting == x\\\" && prev == '-') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (m < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (x < 0 && Math.abs(value) == '-' || prev == '-') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (x < 0 && Math.abs(x - 1.0) == '-' || prev != '0') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (x < 0 && b == '-') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (xZeroSetting == x' || prev == '-') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (x < 0 && Math.abs(y - isZero) && prev == '-') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c == '-') { // x is this",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (xZeroSetting == x && prev == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c == '\\n' || c == 'e' || c == 'E')) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (x < 0 && Math.abs(x - 1.0) == '-' || prev == '+') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (x < 0 && Math.abs(x - xZero) == '-') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (x < 0 && prev == '-')) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (d < 0.5 && prev > 0 && prev < limit) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (x < 0 && prev == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (VALUE < 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (x < 0 && Math.abs(yZeroSubtract) == '-') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (x < 0 && y == '-') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c == '\\n' || c == 'e' || ch == 'E') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (x < 0 && Math.abs(x - 4, yZero) == '-') {",
                "identical": false
            }
        ],
        "buggy_line": "if (x < 0 && prev == '-') {",
        "fixed_line": "if ((x < 0 || negativeZero) && prev == '-') {"
    },
    "Math-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // version 1 for serialization",
                "identical": false
            },
            {
                "k": 4,
                "patch": "protected static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // lower case",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // could make it 1.0",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive for serialization",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive value",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final double DEFAULT_EPSILON = 10e-92;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // to 250 (double)",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // full triplets",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // could make this configurable",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // index of the first value",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, so it will not apply unless",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //slash 1 for serialization",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // should never happen",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // msg",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // to 127 (double)",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // version 1 for def",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle as per [JACKSON-is",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // version 1 for out",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a new double",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // version 1 for label",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //808 on bounds values",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //load 0, 1 for serialization",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive forMIN > MAX_EPSILON (double)",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive forMIN > MAX_EPSILON",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive forMINIMUM_EPSILON (double)",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //longest (double)",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 1000...",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // may be negative",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, nothing to do a new double DEFAULT",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // twenty percent",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // lower case it's do a new double",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive forMINIMUM_EPSILON",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // gcd is",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value too small",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final double DEFAULT_EPSILON = 10e-91;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //FORMAT for out later",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // to definitely changed",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a new double for serialization",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't be faed when the default value",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle as per [JACKSON-268], false);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // from naming convention",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // nothing to do a new double DEFAULT",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // prevent infinite loops are simplest to do a new double DEFAULT",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't be negated.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // could make positive for serialization",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // version 1 for set",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // to 3.0 (double)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value of log10 value",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // could make it will not encoded",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, but do a new double",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value % 2",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // version 1 for out later",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //VARIABLE this configurable",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a new double DEFAULT",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // for out later",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // Let't need to check forMINIMUM_EPSILON",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // UNINITIALIZED are simplest to do a new double DEFAULT",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // Let't need to check for serialization",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // Map.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can never happen",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, FEB",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value of file",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 2410 value",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a new double');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // ascii value",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // char (double)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // UNINITIALIZED",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't need the default value",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive (double)",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // the default value",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value to check for serialization",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // typed a new double DEFAULT",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive exponent then",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // for serialization",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // to 250 (f8-fA)",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // prevent infinite loops are simplest to check for serialization",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, nothing in root.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // index of the axis",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // debugging flag",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // default value to check for out later",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a new double transformation",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, and make it will not encoded",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // lower case it's used by default value",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive forMIN > MAX_EPSILON, String.class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a non-z!",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive for def",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // Let't need to check for deflated polynomial",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // to check for out later",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // prevent infinite loops are simplest to 250 (double)",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // 100 percent, and make it will not used",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't need to check for serialization",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // handle positive for out",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't do a new double});",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // lower case it's default value",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; //\": can't be removed",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9; // lower case of later on bounds",
                "identical": false
            }
        ],
        "buggy_line": "private static final double DEFAULT_EPSILON = 10e-9;",
        "fixed_line": "private static final double DEFAULT_EPSILON = 10e-15;"
    },
    "Math-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (number instanceof Vector) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (number == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (number.getSize() == 1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.getMethod() == DEFLATED) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (v == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (number.length == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (number.length == 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (number != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (number.equals(ZOOM_IN_BIG2D)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (MAX_VALUE == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (number.isNaN()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.y)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (number.equals(file.getLanguage()) == false) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (number.getNodeType() == Node.ELEMENT_NODE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (number.width > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (number.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (numberOfValid == null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (number.getSize() == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.index)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (number instanceof Vector == false) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (denominator == 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (base == null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Manager == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (now == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (now.getSize() == 1) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (number.equals(ZOOM_IN_BOTH)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (number.intValue() == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (number.equals(file.getLanguage()) && !Double.isNaN(v.y)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (number.readInt()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (now.isNaN()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c == 0.0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (((long) v).getSize() == 2) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (number.doubleValue() == 0.0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (numberOfE == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (((long)v) == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (number.size() == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && Modifier.isNaN(v)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (number.length == 2) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (out instanceof Vector) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.getSize())) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (number.getNodeType() == Node.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (((long) v).height > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.height)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.class)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (All.length == 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (radix == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (MAX_VALUE == null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (number.equals(file.getLanguage()) && !Double.isNaN(v)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buckets.length == 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && tree.equals(obj)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.length)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && tree.equals(writeObject.class)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (format == null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (number.getNodeType() == Node.DOUBLE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (number.doubleValue() == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.charAt(0)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v. anyWidth)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.doubleValue()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (number.getWidth() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (number.getNodeType() == Node.DOUBLE_TYPE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (cl == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (number.getNodeType() == Node.RELATIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !base.equals(writeObject.class)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (height.getSize() == 1) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (number.equals(file.getLanguageVersion())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.max)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.toString()) == false) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (number.getNodeType() == Node.COMMENT_NODE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (number.equals(ZOOM_IN_THROWABLE) && !Double.isNaN(v.y)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (number.equals(ZOOM_IN_RANGE)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && DateTimeConstants.TYPE_DOUBLE.equals(y)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.width)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && bits.equals(writeObject.class)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (number.getNodeType() == Node.BYTE_NODE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Index == -1) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !base.equals(Indexed2D.class)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (file.getSize() == 1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.trim())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.type)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (file != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (MAX_VALUE == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (number.equals(ZOOM_IN_THROW) && !Double.isNaN(v.y)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !base.equals(y)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (file.isDirectory()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (number.equals(file.getLanguage())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Long.isNaN(v.y)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.true)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.doubleValue())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Long.isNaN(v.index)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.PIESCAPE)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (ializers == null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && DateTimeConstants.TYPE_DOUBLE.equals(Top)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.doubleValue());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && !Double.isNaN(v.next())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (alternatives.contains(v)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && tree.equals(y)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (number.equals(ZOOM_IN_BOTH) && DateTimeConstants.TYPE_DOUBLE.equals(this.base)) {",
                "identical": false
            }
        ],
        "buggy_line": "if ((Boolean) tree.getAttribute()) {",
        "fixed_line": "if (tree.getCut() == null && (Boolean) tree.getAttribute()) {"
    },
    "Cli-40": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return createURL(str);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (str == null) ? null : str;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return String.format(\"new String(str) == null ? null : str;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return String.format(\"new String(str) == null ? \"null\" : str;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return createURL(str) || constructor.length() == 0) ? null : str;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return String.format(\"new String(str)+\"\\\" (value == null) ? null : str;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return createURL(str) || constructor.indexOf('$') < 0) ? null : str;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) == null ? null : str;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return String.format(\"new String(str) == null ? Collections.emptyMap() : str;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return createURL(str) ? null : str;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return createURL(str) + \" not found in the '\"+str+\"'\", str);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return String.format(\"new String(str) == null ? EMPTY : str;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return createURL(str) ? EMPTY : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return createURL(str) + \" not found in the '\"+str+\"'\", str;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)+\")\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return String.valueOf(str) == null ? null : str;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return createURL(str) + \" not found in the '\"+str+\"'\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return String.format(\"new String(str)+\" vs \"+str.length()+\" is not a valid number\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return String.format(\"new String(str)+\" != null ? str.toString() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return String.format(\"new String(str)+\"\\\" (className == null) ? null : str;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return createURL(str) || constructor.indexOf('$') < 0) ? -1 : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BasicURL.new String(str) == null ? null : str;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) == null ? 0 : str;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return createURL(str) || str.indexOf('$') < 0) ? null : str;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)+\": expected '\"+str+\"'\")) ? null : str;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) == null ? \"null\" : str;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return String.format(\"new String(str) == null ? 0 : str;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return String.format(\"new String(str) == null ? Object.class : str;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return String.format(\"new String(str) == null ? super.getName() : str;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str) + \" is not a valid number.\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return String.format(\"new String(str) == null ? -1 : str;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \\\"\" + str.replace('$') - static final String.valueOf(str));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return String.format(\"new String(str)+\"\\\" (value == null) ? 0 : str;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return String.format(\"new String(str) == null ? Collections.toURL() : str;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return String.format(\"new String(str)+\" vs \"+str.length()+\" is not a subtype of: \"+str);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return createURL(str) : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return String.format(\"new String(str)+\"\\\" (value == null) ? \"null\" : str;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) == null ? EMPTY : str;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return createURL(str) == null ? null : str;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return String.format(\"new String(str)+\"\\\" (value == null) ? -1 : str;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') < 0) ? null : str;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)+\")\";",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) == null ? -1 : str;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)+\": expected '\"+str+\"'\")) ? -1 : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return String.format(\"new String(str) == null ? default: \"null\" : str;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return createURL(str) || constructor.length() == 0 ? \"null\" : str;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return createURL(str) || str.length() == 0) ? null : str;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)+\": expected '\"+str+\"'\", str;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return createURL(str) || constructor.length() == 0 ? null : str;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) == null ? 1 : str;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \\\"\" + str.substring(1));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return String.format(\"new String(str)+\"'s '\"+str+\"'\")) ? null : str;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return String.format(\"new String(str) + \" is not a valid number.\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') + \" is not a valid number.\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (str == null) ? EMPTY : str;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return createURL(str) || constructor.indexOf('$') + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \\\"\" + str.replace('_', '/') + \" is not a valid number);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \\\"\" + str.length());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return String.format(\"new String(str)+\" vs '\"+str+\"' (found \"+str)+\")\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return String.format(\"new String(str)+\" vs '\"+str+\"'\")) ? null : str;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return createURL(str) == null ? EMPTY : str;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return String.format(\"new String(str)+\"'t remove(str));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return createURL(str) + \" not found in the '\"+str;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \"+str)+\")\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return createURL(str) == null ? Collections.emptyMap() : str;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)+\"]\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return createURL(str) + \" not found in the '\"+str+\"'\")) ? 1 : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str) == null ? 0 : str;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return createURL(str) || ArrayUtils.isEmpty(from)) ? null : str;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return createURL(str) || constructor.contains(from)) ? null : str;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return createURL(str) + \" not found at the '\"+str+\"'\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') < 0 ? str : null), createURL);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') < 0 ? null : str;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str)\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') < 0 ? -1 : null), createURL(str);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return createURL(str) + \" not found at the '\"+str+\"'\", str);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return createURL(str) || constructor.contains(from)) ? -1 : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \\\"\" + str.replace('_', '/') + \"}\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') < 0) ? -1 : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return String.format(\"new String(str)+\" vs '\"+str+\"' (found \"+str) constructor.getName()+\"': \"+str+\")\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return String.format(\"new String(str)+\" vs '\"+str+\"' (found \"+str)\";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return String.format(\"new String(str)+\" vs \"+str.length()+\" is not a subtype of char array\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return createURL(str) || constructor.hasURL(new String(str));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') + \" is not assignable to \" + str;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return createURL(str) || str.indexOf('$') + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return String.format(\"new String(str) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return String.format(\"new String(str)+\" vs \"+str.length()+\" is not a subtype of: \"+str+\", can not be null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return String.format(\"new String(str)+\" vs '\"+str+\"'\", str);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \"+str)+\"]\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (str == null) ? null : str.toURL();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str) == null ? EMPTY : str;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return String.format(\"new String(str)+\"\\\" (: \\\"\" + str.replace('$') + \" is not a valid number);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return String.format(\"new String(str)+\"\\\" (value == null) ? EMPTY : str;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return createURL(str) + \" not found in the '\"+str+\"' or 'a'\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return String.format(\"new String(str)+\"\\\" (found \"+str) + \" is not a valid number\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return String.format(\"new String(str)+\"\\\" (toURL) constructor.indexOf('$') + \" is not assignable to \" + str);",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "throw new ParseException(\"Unable to handle the class: \" + clazz);"
    },
    "Chart-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(time, time, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, time.getDefault());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(time, time, locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, new Locale(zone));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(time, time, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone.getDefault());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(timePeriod, time, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(time, time, TimeZone.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, null);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Locale.getDefault());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(timePeriod, time, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(time, time, timeZone, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, TimeZone.getDefault());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, new Week.getDefault());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, timeZone.getDefault());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(time, time, ch, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(timePeriod, time, locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(time, time, week.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(time, time, DateTime.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(timePeriod, time.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(time, time, zone.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this( time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(timePeriod, time, TimeZone.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(time, MILLIS_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(time, TimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(timePeriod, time, week.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(time, time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(time, time, pref.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(time, time, Boolean.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, false);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(timePeriod, time, timeZone, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(time, time, Calendar.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(time, style, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(time, period.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(time, ch, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, time.getDefault());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(time, time, ISOPeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(time, time, Minute.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(time, time, Date.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(timePeriod, time, DateTime.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, zone);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(time, time, TimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(time, time, pt.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,zone.getDefault());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, week.getDefault());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, new Date(zone));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, new TimeZone.getDefault());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(time, time, Locale.DEFAULT_TIME_ZONE, null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(time, time, st.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(time, TimeZone.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(time, Date.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(time, time, number.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(timeZone, RegularTimePeriod.DEFAULT_TIME_ZONE, time.getDefault());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, zone);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(time, time, Locale.DEFAULT_TIME_ZONE,Locale.getDefault());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(time, time, new MILLIS_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(time, time, Locale.DEFAULT_TIME_ZONE, zone);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(time, enc.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(time,Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, stroke, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, new Locale(zone));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(time, filename, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(time, time, new Date(zone));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Date.getDefault());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(timePeriod, time, ch, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(time, time, Week.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(time, time.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(time, time, MILLIS_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, chrono);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(timePeriod, enc.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(time, time, DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, style, zone);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(time, time, RegularTimePeriod.DEFAULT_TIME_ZONE, zone);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, time.getDefault());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, enc.getDefault());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Integer.getDefault());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(time, Minute.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, false, zone);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, zone.getDefault());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(time, Minutes.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, false, TimeZone.getDefault());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, fieldType.getDefault());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, integer.getDefault());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,pattern.getDefault());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, LE.getDefault());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(time, time, null, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Generator.getDefault());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, locale.getDefault());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, timeZone.getDefault());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,y);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, new Week());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(time, Week.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.timePeriod, RegularTimePeriod.DEFAULT_TIME_ZONE, zone.getDefault());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, getChronology());",
                "identical": false
            }
        ],
        "buggy_line": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "fixed_line": "this(time, zone, Locale.getDefault());"
    },
    "JacksonCore-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (!_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (!_hasSegments) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (!_hasSegments) return _segmentSize;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (!_hasSegments) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (!_hasSegments) return _segmentStart;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_hasSegments) return _segmentSize;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_hasSegments) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_hasSegments) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_segmentSize < 1) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (!_hasSegments) return _segmentPtr;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_segmentSize < MIN_SEGMENT_LEN) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (_hasSegments) return _segmentStart;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_segmentSize >= Segment.TOKENS_PER_SEGMENT) return _currentSegment;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (!_hasSegments) return _segment;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_currentSegment != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_resultString != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (segmentSize == 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!_hasSegments) return _segmentEnd;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_segmentSize >= Segment.TOKENS_PER_SEGMENT) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (segment.hasSegments()) return _currentSegment;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (!_hasSegments) return _segmentLen;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_segmentSize == 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_segmentSize < MIN_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_segmentSize >= MIN_SEGMENT_LEN) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_segmentSize >= Segment.TOKENS_PER_SEGMENT) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_closed || _segmentSize == 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (segmentSize < 1) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_segmentSize < 1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_closed || _segmentSize < 1) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (segmentSize <= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (_currentSegment != null) return _segmentSize;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (!_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSegment.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSegment.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_hasSegments) return _segment;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_segmentSize >= Segment.TOKENS_PER_SEGMENT) return _currentSegmentCount;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_inputStart >= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSegment.length) > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (!_hasSegments) return _segment.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_currentSegment.length > 0) return _segmentStart;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (!_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSegment.length) > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (!_hasSegments) return (_currentSegment.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_currentSegment != null) return _segmentStart;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (!_hasSegments) return _segment.inException(_currentSegment, 0, _currentSegment.length) > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_segmentSize <= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (!_hasSegments) break;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSegment.length) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (!_hasSegments()) return _segmentSize;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (!_hasSegments) return _segment.get(key.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!_hasSegments) return _segment.inException(_currentSegment, 0, _currentSegment.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!_hasSegments) return result;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_resultString != null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (!_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSegment.length());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_segmentSize < 1) return _currentSegmentCount;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSegment.length());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSegment.length)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (!_hasSegments) return _segmentBuffer;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (!_hasSegments) return _segment.inException(_currentSegment, 0, _currentSegment.length);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (segmentSize != 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSegment.length);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_segment.hasSegments()) return _currentSegment;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (!_hasSegments) return _currentSegmentCount;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_resultArray != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (!_hasSegments) return _segment.get(_currentSegment, 0, _currentSegment.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_segmentStart >= 0) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (!_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSize);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (!_hasSegments) return _segment\".equals(segmentSize)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (!_hasSegments) return _segment.get(fromString.valueOf(segmentStart));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_hasSegments) return _segment.get(key.length) > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (!_hasSegments) return _segmentBuf.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (!_hasSegments) return _segment.get(ptr);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (!_hasSegments) return _currentSegment.isEmpty(_segmentStart, _currentSegment.length());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (!_hasSegments) return _segment.get(_currentSegment, 0, _currentSegment.length) > 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSize);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_segments != null) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (!_hasSegments) return _segment.get(key.length());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSegment.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (!_hasSegments) return _segment.inException(resultArray.length)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (!_hasSegments) return _currentSegment.isEmpty(_segmentStart, _currentSegment.length) > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (!_hasSegments) return _segment.get(_currentSegment, 0, _currentSegment.length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_hasSegments) return _segment.get(key.length) == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (!_hasSegments) return _segment\".equals(from(_currentSegment, 0, _currentSegment.length);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (!_hasSegments) return _segment\".equals(from(_currentSegment, 0, result.length)) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_segmentSize >= MIN_SEGMENT_LEN) return _currentSegment;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_segmentSize >= Segment.TOKENS_PER_SEGMENT) return _resultString;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (!_hasSegments) return _segmentArray.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSize);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (!_hasSegments) return _segmentCache.get(key.length) + _currentSegment.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_segmentSize < MIN_SEGMENT_LEN) return _currentSegmentCount;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (!_hasSegments) return _segment.get(from(_currentSegment, 0, _currentSegment.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_segment.hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_currentSegment.length > 0) return _segmentSize;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (!_hasSegments) return _segment.get(resultString.valueOf(segmentStart));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (!_hasSegments) return _segment.inException(_currentSegment, 0, _currentSize);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_hasSegments) return _segment.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (!_hasSegments) return _currentSegment.inArray()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (!_hasSegments) return _segment.inException(from(_currentSegment, 0, _currentSegment.length+1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (!_hasSegments) return _segment.get(_currentSegment, 0, _currentSize);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (!_hasSegments) return _segment.get(++_segmentPtr;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_hasSegments) return _segmentEnd;",
                "identical": false
            }
        ],
        "buggy_line": "if (!_hasSegments)  return _currentSegment;",
        "fixed_line": "if (!_hasSegments && _currentSegment != null)  return _currentSegment;"
    },
    "Jsoup-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static String nullString = String.valueOf(x.length() - 1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static String nullString = String.valueOf(0x0000\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static String nullString = String.valueOf(x);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static String nullString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static String nullString = String.valueOf(0xCAF);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static String nullString = String.valueOf(x.length() - 8);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static String nullString = String.valueOf(x.intValue);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static String nullString = String.valueOf(x.length());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static String nullString = String.valueOf(0x0000 >= 0x00;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private final static String nullString = String.valueOf(x.length() - 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static String nullString = String.valueOf(x++);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static String nullString = String.valueOf(0x0000Map.class);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static String nullString = String.valueOf(0x0000Length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static String nullString = String.valueOf(x.length()) < 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static String nullString = String.valueOf(0x0000[0]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static String nullString = String.valueOf(x.length()) + 20;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static String nullString = String.valueOf(0xCAFEB_2);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static String nullString = String.valueOf(0x0000BACK_ARRAY);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static String nullString = String.valueOf(x.length()-1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static String nullString = String.valueOf(xObject.class);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static String nullString = String.valueOf(0x0000loor;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static String nullString = String.valueOf(x.length() - 3);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static String nullString = String.valueOf(0x00000000000L);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static String nullString = String.valueOf(0x0000];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static String nullString = String.valueOf(0x00004);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static String nullString = String.valueOf(0x0000MethodName);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static String nullString = String.valueOf(0xCAFEBABE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static String nullString = String.valueOf(0x0000).toCharArray();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static String nullString = String.valueOf(0x0000loor\";",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static String nullString = String.valueOf(x.length()) + 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static String nullString = String.valueOf(x.length() - 20);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static String nullString = String.valueOf(0x00000, 0x00);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static String nullString = String.valueOf(0x0000 - 1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static String nullString = String.valueOf(0x0000 %s);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static String nullString = String.valueOf(0x0000 + 1L);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static String nullString = String.valueOf(0xCAFEBValue);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static String nullString = String.valueOf(0xCAES);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static String nullString = String.valueOf(0x0000\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static String nullString = String.valueOf(0x0000rootType);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static String nullString = String.valueOf(0x0000 Line);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static String nullString = String.valueOf(0x0000 == null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static String nullString = String.valueOf(0x0000[0].toString();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static String nullString = String.valueOf(x.length()) + \" 0x0000;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static String nullString = String.valueOf(x.length()) + 16;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static String nullString = String.valueOf(x.length() - startPos);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static String nullString = String.valueOf(0x00000, 0x00;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static String nullString = String.valueOf(0x00000000000\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static String nullString = String.valueOf(x.length() - 0x0000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static String nullString = String.valueOf(x.length() * 8);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static String nullString = String.valueOf(0x0000loor);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static String nullString = String.valueOf(0x0000 s);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static String nullString = String.valueOf(0xCAFns\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static String nullString = String.valueOf(0xCAFREQUENCY\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private final static String nullString = String.valueOf(x.length() - 8);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static String nullString = String.valueOf(0x0000Valued\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static String nullString = String.valueOf(x.length 0.0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static String nullString = String.valueOf(x.length() - MIN_VALUE);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static String nullString = String.valueOf(x.byteValue);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static String nullString = String.valueOf(x.length()) >= 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static String nullString = String.valueOf(0x0000ROW);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private final static String nullString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static String nullString = String.valueOf(0xCAUSE_METHOD);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static String nullString = String.valueOf(0x0000Result);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static String nullString = String.valueOf(0x0000Index);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static String nullString = String.valueOf(x.length()[0]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static String nullString = String.valueOf(x.length() - 4, 8);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private final static String nullString = String.valueOf(0x0000\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static String nullString = String.valueOf(xStrength.y);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static String nullString = String.valueOf(0x000027\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private final static String nullString = String.valueOf(x.length());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static String nullString = String.valueOf(0xCAFS);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static String nullString = String.valueOf(0x000040);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static String nullString = String.valueOf(x.length() - 0x0000);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static String nullString = String.valueOf(0x0000 col);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static String nullString = String.valueOf(x.length() -(0x0000);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static String nullString = String.valueOf(0x0000s);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static String nullString = String.valueOf(x.length() - 16);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static String nullString = String.valueOf(0x0000root\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static String nullString = String.valueOf(0xCAF;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static String nullString = String.valueOf(0xCAFns);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static String nullString = String.valueOf(0x0000Style);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static String nullString = String.valueOf(0x\"+Integer.toHexString(Character.class);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static String nullString = String.valueOf(0x0000 archive);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static String nullString = String.valueOf(0xCAFREQUENCY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static String nullString = String.valueOf(0x0000: \");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static String nullString = String.valueOf(0x0000Utils.type);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static String nullString = String.valueOf(x.length()) + 8;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static String nullString = String.valueOf(0x0000FF\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static String nullString = String.valueOf(0x0000 Token.y);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static String nullString = String.valueOf(0xCAUSE_AS_LONG);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static String nullString = String.valueOf(0x0000 negative);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private final static String nullString = String.valueOf(x.intValue);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static String nullString = String.valueOf(0xCAUSE_QUOTE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static String nullString = String.valueOf(x.length() - MAX_VALUE);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static String nullString = String.valueOf(0x0000 Line: \");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static String nullString = String.valueOf(x.length()) < 8;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static String nullString = String.valueOf(_x0000.length());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static String nullString = String.valueOf(0xCA0000\";",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static String nullString = String.valueOf(0x0000 hashCode: \");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static String nullString = String.valueOf(x.length()) <= 0x0000;",
                "identical": false
            }
        ],
        "buggy_line": "private static String nullString = String.valueOf(0x0000);",
        "fixed_line": "private static String nullString = String.valueOf('\\u0000');"
    },
    "Jsoup-43": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (element == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (null == element) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (null != element) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (null.equals(element)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (nulls.equals(element)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (null \"+element.getName().equals(element)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (nullValue == element) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (null != element.get(i)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (nullId.equals(element)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (nullList.contains(element)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (nullId == element) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (null.evaluate(element)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (nulls.contains(element)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (element.remove(i) == element) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (nullValue == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (nullList.indexOf(element) >= '0' && element.get(i)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (null = element.next() == null ? JsonNull.createJsonNull() : element.get(i)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (null \"+element.get(i) == element) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (nullField.equals(element)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (null.getValue(element) == null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (nullPoint == element) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (nullPaint == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (nullList.get(i) == element) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (nullList.equals(element)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (null = element.next() == null ? JsonNull.createShell(i) : element.get(i)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (element.remove(i) == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (nullList.indexOf(element) >= element.get(i)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (null = element.next() == null ? JsonNull.createClass() : element.get(i)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (null.doubleValue() == element) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (nullList.indexOf(element)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (null = element.next() == null ? JsonNull.createPath() : element.get(i)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (null = element.next().getValue(i) < index) ? -1 : element.get(i);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (null = element.next() == null ? JsonNull.createShell(element) : element.get(i)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (element.isValidIndex(i) || element.isAssignableFrom(element)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (nullPoint >= element.get(i)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (predicates[i] == element) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (null Validate.notNull(element)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (nullSafeAttribute(element)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (element.getText().equals(element)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (element.isValidIndex(i) || element. null) == element.get(i)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (nullIsPointsInList(element, elements[i], element)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (null \"+element.getText().equals(element)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (null = element.next().getValue(i) < index) ? i : element.last.get(i);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (null = element.next() == null ? JsonNull.createClass() : element.last.get(i)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (null = element.next() == null ? JsonNull.createJsonNull() : element.last.get(i)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (null.getText().equals(element)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (null = element.next().getValue(i) < index) ? -1 : element.last.get(i);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (null = element.next().getValue(i) < index) ? i : element.get(i);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (nullIsPointsInList(element, parent)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (nullIsAttribute(element, i)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (null = element.next() == null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? null : element.get(i);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (nullIsPointsInList(element, parent.get(i))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (null = element.next().getValue(i) < index) ? -1 : element.last.get(i)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (null = element.next().getValue(i) < index) ? i == null : element.last.get(i)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (null = element.next().getValue(i) < index) ? i == false : element.last.get(i)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (nullNulls.containsKey(element)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (element.match == element) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (nullList.size() == 1 && element.get(i).isAssignableFrom(element)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? null : element.get(i].get(i))) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (null \"+element.getName().equals(p)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (null = element.next().getValue(i) < index) ? i == null : element.get(i)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (null).equals(element)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (nullIsPointsInList(element, elements[i], element) == null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (null != element.next()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (null = element.next().getValue(i) < index) ? i == false : element.last.get(i);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (not.equals(element)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (element.isValidIndex(i)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (null \"+element.getText().equals(p)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (nullValue >= element.get(i)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (null = element.next() == null ? JsonNull.createJsonNull() : element.getValue(i)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (null = element.next() == null ? JsonNull.createValues : element.get(i)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (null = element.next() == null ? JsonNull.createClass() : element.getClass().get(i)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? 1 : element.get(i);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? null : element.get(i));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (nullList.remove(element) == null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (nullList.indexOf(element) == -1) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (null = element.next() == null ? JsonNull.createClass() : element.item.get(i)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (nullNulls.contains(element)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (null = element.next().getValue(i) < index) ? i == null : element.last.get(i);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? 1 : element.get(i));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (null = element.next().getValue(i) < index) ? i == null : element.get(i);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (null = element.next().getValue(i) < index) ? getP : element.last.get(i);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (null = element.next().getValue(i) < index) ? i - 1 : element.last.get(i);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (null = element.next().getValue(i) < index) ? -1 : element.get(i)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? null : element.get(i]) == null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (null = element.next().getValue(i) < index) ? i - 1 : element.get(i);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (nullcestors.contains(element)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (nullKey.equals(element)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (nullIsPointsInList(element, elements[i], element) ? i : element.get(i);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (null = element.next().getValue(i) < index) ? i == false : element.get(i)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (nulls.indexOf(element)) >= element.get(i)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (element.isValidIndex(i) || element.is i == false) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (null = element.next() == null ? i : element.get(i)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (null \"+element.getName().equals(p.next())) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (nullList.size() == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (null = element.next().getValue(i) == null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (null = element.next() == null ? JsonNull.createJsonNull() : element.get(i))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (null = element.next() == null ? JsonNull.createShell(i) : element.last.get(i)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (element.equals(search))",
        "fixed_line": "if (element == search)"
    },
    "Mockito-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": true
            },
            {
                "k": 2,
                "patch": "returnStringUtils.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "returnStringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this.m.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.argName.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returnString.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return classDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return fieldDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.argDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this.arg == null ? Boolean.toString() : arg.toString();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return longDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this.arg == null || m.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return m.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this.m.equals(m).append(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null\" + arg.toString());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return arg.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this.m.toString() == null ? m.toString() : arg.toString();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return intr.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.arg == null && m.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringDescription.toString(m).append(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.m.toString() == null ? arg.toString() : arg.toString();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? false : arg.toString());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this.toString.equals(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return System.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return 'Description.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \"Description.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.m.toString() == null && arg.getClass().equals(arg == m.toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.m.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returnDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return Object.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this.argName.toString() == null ? Boolean.TRUE : arg.toString();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return defaultDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? m.toString() : arg.toString());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this.m.toString() == null ? Boolean.TRUE : arg.toString();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? 1 : arg.toString());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.arg == null || m.toString().equals(arg == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return typeDescription.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.m.toString() == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.arg == null && arg.toString().equals(m.toString());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this.m.toString() == null && arg.getClass().getName().equals(arg == m.toString());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this.arg == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.argName.equals(m.toString());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringDescription.toString(m).equals(arg == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? \"\" : arg.toString());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return String.toString(m).equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.argName.toString() == null && arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this.m.toString() == null ? type.toString() : arg.toString();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this.m.toString() == null ? \"\" : arg.toString();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? m.toString() : arg.toString();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? false : arg.toString();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.m.toString() == null ? \"null\" : arg.toString().equals(m.toString());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this.m.toString() == null ? m.getName() : arg.toString();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this.m.toString() == null ? m.toString() : arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.argName.toString() == null ? \"null\" : arg.toString().equals(m.toString());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.m.toString() == null ? Boolean.FALSE : arg.toString();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return m.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return m.toString() == null && arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null)) ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return m.toString() == null && arg.toString().equals(arg == null) ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.m.toString() == null ? m.getName() : arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this.argIndex == 0 && arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return m.toString() == null && arg.toString().equals(arg == null) ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.arg == null && arg.toString().equals(arg == null? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.arg == null && m.toString().equals(arg == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return name.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this.argName.toString() == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this.argObject.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this.argName.toString() == null && arg.toString().equals(arg == null) ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null: \" + arg.toString());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.m.toString() == null ? \"null\" :arg.toString();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringDescription.toString(m).equals(arg == null? : arg.toString());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.m.toString() == null && arg.equals(arg).trim().toString());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.argDescription.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return key.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this.arg == null ? Boolean.toString() : m.toString();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this.m.toString() == null && arg.getValue().equals(arg == null) ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.arg == null ? String.toString() : arg.toString();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null\" : m.toString());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString().substring(0, arg.toString());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "returnStringUtils.toString(m).equals(arg == null? \"null\" + arg.toString());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this.m.toString() == null ? arg.toString() :arg.toString();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null)) ? \"null\" : arg.toString());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this.m.toString() == null && m.equals(arg).trim();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.argName.toString() == null ? false : arg.toString();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return type.toString() == null ? \"null\" : arg.toString();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.m.toString() == null ? false : arg.toString();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.argCount == 0) && arg.toString().equals(arg == null || m.toString());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.m.toString() == null ? \"null\" : arg.toString().substring(0, arg.toString());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == m.toString());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this.m.toString() == null && arg.equals(arg).trim();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this.m.toString() == null && arg.toString().equals(arg == null) ? m : arg.toString());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this.argName.toString() == null ? m.toString() : arg.toString();",
                "identical": false
            }
        ],
        "buggy_line": "return StringDescription.toString(m).equals(arg.toString());",
        "fixed_line": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());"
    },
    "Math-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "return iterator.iterator();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return emptyIteratorIfNull(p.iterator());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "returnCharacters.iterator();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return Fixedos.iterator();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "returnSites.iterator();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "returnAlternate.iterator();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return ptr.iterator();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return untilos.iterator();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return chromos.iterator();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return dependentos.iterator();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return VARos.iterator();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return ReverseList.iterator();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return result.iterator();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return currentIterator.iterator();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return Shouldnos.iterator();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return Reverseos.iterator();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnPTos.iterator();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnfinal Iterator<E> documentation = iterator.iterator();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return windIterator.iterator();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "returnListAdapteros.iterator();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return emptyIterator.<E>emptyIterator();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return propList.iterator();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returnButNotAssignable.iterator();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return declarations.iterator();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "returnfinal Iterator<E>UTCIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return parent.keySet().iterator();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return path.iterator();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return ClassNameFinder.iterator();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return slowos.iterator();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "returnLockos.iterator();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return actions.iterator();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return acknowledgeos.iterator();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returnDispatchos.iterator();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnfinal Iterator<E> option = iterator.iterator();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returnIMPORTos.iterator();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return intValue.iterator();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return addObjectos.iterator();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return parent.iterator();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return put.iterator();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return emptyIteratorIfNull(p ? 1 : iterator.iterator();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return\u0b1dos.iterator();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return emptyIteratorIfNull(p) ? 1 : iterator.iterator();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return filenamesos.iterator();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnfinal Iterator<E> ratherIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "returnfinal Iterator<E> availableIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return paletteos.iterator();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "returnfinal Iterator<E>currentIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return}</os.iterator();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return 155os.iterator();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return emittedos.iterator();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "returnfinal Iterator<E> finallyIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return emptyIterator.<E>unmodifiableIterator(p.iterator());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return 1-os.iterator();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return bigos.iterator();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "returnfinal Iterator<E>CharSequenceIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return emptyIteratorIfNull(p);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return EMPTYos.iterator();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "returngp.iterator();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "returnfinal Iterator<E> iterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return ZER.iterator();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "returnfinal Iterator<E>Variant = iterator.iterator();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "returnfinal Iterator<E> need = iterator.iterator();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return emptyIteratorIfNull(p ? 1 : iterator.iterator());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getPreviousos.iterator();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returnfinal Iterator<E>LIBIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returnfinal Iterator<E> optionIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return runIniterator.iterator();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Charsetos.iterator();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "returnfinal Iterator<E> iterator iterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return spot.iterator();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "returnfinal Iterator<E> viewsIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return EXACTos.iterator();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return restricted.iterator();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \"$Iterator.iterator();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return js.iterator();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return emptyIteratorIfNull(p ? 1 : iterator.iterator().iterator();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return compilationos.iterator();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return emptyIterator.<E>unmodifiableIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "returnfinal Iterator<E> dial = iterator.iterator();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return run.iterator();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return emptyIterator.<E>unmodifiableIterator(this.p);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return elements.iterator();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "returnfinal Iterator<E> getChronology = iterator.iterator();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "returnfinal Iterator<E> views = iterator.iterator();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return dep.iterator();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "returnPointerException.iterator();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "returnachable.iterator();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "returnfinal Iterator<E> result = iterator.iterator();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return parent.entries.iterator();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "returnfinal Iterator<E>toUpperCase = iterator.iterator();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "returnres.iterator();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "returnfinal Iterator<E> triesIterator = iterator.iterator();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return emptyIteratorIfNull(p[0], iterator);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returndig.iterator();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnfinal Iterator<E>Mismatch = iterator.iterator();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return emptyIterator.<E>unmodifiableIteratorIfNull(p.iterator());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returnChecked.iterator();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return emptyIterator.<E>unmodifiableIterator(iterator);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "returnreads.iterator();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return emptyIterator.<E>unmodifiableIterator(this.p[0], iterator);",
                "identical": false
            }
        ],
        "buggy_line": "return chromosomes.iterator();",
        "fixed_line": "return getChromosomes().iterator();"
    },
    "Math-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "return dim.pow(2 * dim.PI / 2.0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return dim.pow(10.0 * dim / 2.0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return dim.pow(td * dim.PI / 2.0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return dim.pow(2 * dim.PI / 2.0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return dim.pow(10.0 * dim / 2) + 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return dim.pow(Hex.PI * dim, - 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return dim.pow( .util.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return dim.pow(x, dim *Property.PI / 2.0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return dim.pow(10.0 * dim / 2.0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return dim.pow(saved.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return dim.pow('. * dim.PI / 2.0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return dim.pow(x, dim * 60.length / 2);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return dim.pow(x, dim * Math.PI / 2.0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return dim.pow(points, dim * Math.PI / 2.0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return dim.pow(Hex.PI * dim / 2.0) + 1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return dim.pow(10.0 * dim / this.PI);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return dim.pow(points * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return dim.pow(10.0 / dim.PI * dim / 2.0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return dim.pow(yz, 0, dim *atural.length / 2);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return dim.pow(Hex.PI * dim / 2 - 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return dim.pow(Hex.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return dim.pow(2 * dim.substring(0, dim.length() - 1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return dim.pow(10.0, - dim *Answer.PI / 2.0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return dim.pow(OID * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return dim.pow(sum / dim.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return dim.pow(2 * dim.PI /dim;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return dim.pow(10.0, - dim *Answer.PI / 2.0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return dim.pow(inant.PI * dim, - 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return dim.pow(10.0 * dim / 2) + 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return dim.pow(points, dim * LENGTH.length / 2);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return dim.pow(2 * dim.log(hm.length / 2 - 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return dim.pow(points, dim *Answer.PI / 2.0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return dim.pow(saved.PI / 2.0) * dim / 2) + 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return dim.pow(-2 * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return dim.pow(10.0 / dim.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return dim.pow(10.0 * dim / 2) - 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return dim.pow(x * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return dim.pow( spot.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return dim.pow(x, dim *Answer.PI / 2.0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return dim.pow(2 * dim.log(hm.length / 2);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return dim.pow(10.0 * dim / 7;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return dim.pow(10.0, - dim * thread.PI / 2.0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return dim.pow(10.0 / dim.PI);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return dim.pow(Hex.PI * dim, m - dim * 2) / 2.0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return dim.pow(2 * dim.substring(0, dim / 2);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return dim.pow(Hex.PI * dim / 2, - 1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return dim.pow(pass * dim / 2.0, 2.0, 2.0 * dim / 2) + 1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return dim.pow(x, dim *Property.length / 2);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return dim.pow(Hex.PI * dim, m - dim * child.length / 2);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return dim.pow(parts.length * 2 * dim / 2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return dim.pow(saved.PI * dim / 2.0) + 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return dim.pow(Hex.PI * dim /dim + 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return dim.pow(lip * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return dim.pow(2 * dim.substring(0, dim / 2 - 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return dim.pow(2 * dim.substring(0, dim.length() * 2);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return dim.pow(2 * dim.substring(0, dim)) / 2.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return dim.pow(vals, dim * LF.length / 2 - 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return dim.pow(10.0 * dim / 2) + 1 * dim / 2.0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return dim.pow(x, dim *Property.length - 1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return dim.pow(10.0, - dim * LENGTH / 2) + 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return dim.pow(vals, dim *Answer.PI / 2.0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return dim.pow(10.0 * dim /Deserializer.pow.length - 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return dim.pow(2 * dim.substring(0, dim)) / 60 * 1000;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return dim.pow(yz, 0, dim *atural.length / 2 - 1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return dim.pow(x * dim / 2.0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return dim.pow(Hex.PI * dim / true) + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return dim.pow(2 * dim.substring(0, dim.length() * dim / 2);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return dim.pow(pass * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return dim.pow(yz, 0, dim *atural.PI / 2.0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return dim.pow(pass * dim / 2.0, 2.0, 2.0 * dim / 2) + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return dim.pow(10.0 * dim / columns;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return dim.pow(saved.PI / 2.0) * dim / 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return dim.pow(10.0, - dim * sum / 2) + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return dim.pow(Hex.PI * dim / 2.0) - dim * LENGTH;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return dim.pow(sum / dim.PI);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return dim.pow(Box.PI / dim, - 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return dim.pow(2 * dim.substring(0, dim.length() * 2 * dim / 2);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return dim.pow(saved.PI * dim, - 1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return dim.pow(sum / dim.PI * dim / 2) + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return dim.pow(Cal * dim / 2.0, 2.0, 2.0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return dim.pow(10.0 * dim / denominator;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return dim.pow(10.0, - dim * thread.PI / 2.0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return dim.pow(saved.length * 2 * dim + 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return dim.pow(inant.PI * dim / 2.0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return dim.pow(yz, 0, dim *atural.length / 2 * 1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return dim.pow(10.0 * dim / this.PI;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return dim.pow(vals, dim * LF.length / (double) - 1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return dim.pow(mapping.PI / dim, 0, dim * 2);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return dim.pow(2 * dim.PI / 2.0 - dim * 60 * 1000;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return dim.pow(saved.length * 2 * dim / 2);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return dim.pow(10.0 * dim /dim;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return dim.pow(vals, dim * LF.length / (double) + 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return dim.pow( .util.PI * dim / 2.0) + 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return dim.pow(2 * dim.substring(0, dim) /dim;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return dim.pow(10.0 * dim / 2) + 1 * dim;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return dim.pow(Hex.PI * dim, m - dim * 2) / 60 * 1000;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return dim.pow(10.0 * dim / true;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return dim.pow(saved.PI * dim / 2, - 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return dim.pow(td * dim.PI / 2.0) + 1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return dim.pow(10.0, - dim *Answer.log(x) / dim;",
                "identical": false
            }
        ],
        "buggy_line": "return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
        "fixed_line": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *"
    },
    "Closure-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "Context rhsContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Context rhsContext = Context.PRESERVE_BLOCK;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Context rhsContext = Context. ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Context rhsContext = Context. ? Context.PRESERVE_BLOCK : Context.OTHER;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Context rhsContext = Context.1) ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Context rhsContext = NodeUtil.precedence(type);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Context rhsContext = Context.BEFORE_ 1) ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Context rhsContext = Context.LeftExpr(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Context rhsContext = Context.PRESERVE_ != -1 ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Context rhsContext = Context.LeftExpr(first, p + 1, context);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Context rhsContext = Context.1) ? Context.PRESERVE_BLOCK : Context.OTHER;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Context rhsContext = Context.LeftExpr(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Context rhsContext = Context.logL ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Context rhsContext = Context.BE ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Context rhsContext = firstContext.getNext().getNext();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Context rhsContext = Context.DirectedLeftExpr(first, p + 1, context);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context.OTHER;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Context rhsContext = Context. flowThrough(first.OTHER, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Context rhsContext = Context.BEFORE_ 1) ? Context.PRESERVE_BLOCK : Context.OTHER;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Context rhsContext = Context.PREVIOUS_SEMICOL ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Context rhsContext = Context.PrintExpr(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Context rhsContext = Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Context rhsContext = firstContext.getNext();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Context rhsContext = Context.PrintExpr(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Context rhsContext = Context.LeftExpr(first, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.PRESERVE_RESULT : Context.OTHER;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Context rhsContext = Context. flowThrough(first.OTHER, p + 1, context);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Context rhsContext = Context. flowThrough(first.getNext(), Context.OTHER, p);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Context rhsContext = Context. ? Context.PRESERVE_BLOCK : Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Context rhsContext = Context.CACHEFor(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Context rhsContext = Context.preparedGetProp(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.PRESERVE_NUMBER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Context rhsContext = Context.DirectedLeftExpr(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Context rhsContext = firstContext.getNext().getNext()) ? Context.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Context rhsContext = NodeUtil.precedence(type), context);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Context rhsContext = Context.preparedGetProp(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Context rhsContext = Context.1) ? Context.PRESERVE_BLOCK : Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? p : Context.OTHER;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK) : Context.OTHER;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? last.OTHER : Context.OTHER;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? last.getNext() : Context.OTHER;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Context rhsContext = Context.PRESERVE_ != -1 ? Context.STATEMENT : Context.OTHER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Context rhsContext = Context.BEFORE_ 1) ? Context.PRESERVE_BLOCK : Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Context rhsContext = Context.BE_ != Context.PRESERVE_BLOCK;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.PRESERVE_BLOCK : Context.OTHER;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Context rhsContext = Context. flowThrough(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Context rhsContext = Context. flowThrough(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Context rhsContext = Context.1) ? Context.OTHER : Context.PRESERVE_BLOCK;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Context rhsContext = Context.prepared(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Context rhsContext = Context. INDEX_NOT_FOUND;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PREVIOUS : Context.OTHER;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextAnchor.START_OF_EXPR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Context rhsContext = NodeUtil.precedence(Token.OTHER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : p;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.STATEMENT : Context.OTHER;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context.VOID;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK) : Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Context rhsContext = Context.precedence(type);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextNodeUtil.mayHaveSideEffects(p);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Context rhsContext = Context.BEFORE_ 1) ? Context.OTHER : Context.PRESERVE_BLOCK;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextAnchor.OTHER;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Context rhsContext = Context. flowThrough(first.OTHER, p);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextNodeUtil.precedence(context);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : Context.PRESERVE_BLOCK;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Context rhsContext = Context.PREVIOUS_SEMICOLON;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Context rhsContext = Context. ? Context.OTHER : Context.PRESERVE_BLOCK;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context.START_OF_EXPR;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Context rhsContext = Context.prepared(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context. & Context.OTHER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Context rhsContext = Context.PrintExpr(first, p + 1, context);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Context rhsContext = Context. ? Context.PRESERVE_BLOCK) : Context.OTHER;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Context rhsContext = Context. INDEX_EXPR_RESULT;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Context rhsContext = Context.CACHEFor(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Context rhsContext = NodeUtil.precedence(first.getType()) + 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Context rhsContext = Context. ? Context.PRESERVE_BLOCK : Context. Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Context rhsContext = Context. flowThrough(first.getNext(), p);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.PRESERVE_OF_MONTH : Context.OTHER;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : Context.OR;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : Context.OR_OF_DAY;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextNodeUtil.mayHaveSideEffects(last);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Context rhsContext = Context.DirectedLeftExpr(first, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : Context. & Context.OTHER;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context.START_OF_DAY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Context rhsContext = Context. flowThrough(first.OTHER, p - rhsContext);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Context rhsContext = Context.DirectedLeftExpr(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Context rhsContext = Context.BEFORE_ 1) ? Context.OTHER : Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Context rhsContext = Context.PREVIOUS_SEMICOL(last, p + 1, context);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Context rhsContext = Context.LeftExpr(last, p - 1, rhsContext);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.PRESERVE_BLOCK : Context.OK_AFTER_COMMA;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? last.getValue() : Context.OTHER;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Context rhsContext = Context.BEFORE_ 1) ? Context.PRESERVE_BLOCK : Context. Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Context rhsContext = Context.PREVIOUS_SEMICOL(last, p + 1, rhsContext);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Context rhsContext = Context. INDEX_EXPR_ != -1 ? Context.OTHER : p;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Context rhsContext = Context.preparedGetProp(first, p + 1, context);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextNodeUtil.precedence(n);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : Context.VOID;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Context rhsContext = firstContext.getNext().getNext() != null ? Context.OTHER : TextNodeUtil.precedence(Token.OTHER);",
                "identical": false
            }
        ],
        "buggy_line": "Context rhsContext = Context.OTHER;",
        "fixed_line": "Context rhsContext = getContextForNoInOperator(context);"
    },
    "JxPath-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return args == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return args == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return context.computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return context.computeValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return context.computeValue(args) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return context.computeValue(args || args.length == 0) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return context.computeValue(context));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return context.getRootValue(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return context.isArrayValue(args)) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return context.getJXPathContext().computeValue(context));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return context.computeValue(args);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return context.getJXPathContext(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return args == null ? Boolean.TRUE : new CoreOperation(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return context.computeValue(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return context.computeValue(args || args.length == 0) ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return context.getJXValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return context.getRootValue(args) == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return context.isArrayValue(args) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (args == null) ? null : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return args == null ? Boolean.TRUE : ((Integer) args).computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return context.computeValue(args) == _context ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return context.computeValue(args[context].computeValue(context));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return functionExpression(context == args) ? null : args.computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return value == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (args == null) ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return context.getArgumentTypes(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return context.getJXPathContext(args) != null ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return context.getJXPathContext(args[args.length - 1].computeValue(context));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return context.getJXPathContext(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return context.getJONodeValue(args) != null ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return args == null ? Boolean.FALSE : new CoreOperation(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return context.getJXValue(args[context].computeValue(context));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return InfoSetUtil.doubleValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return context.getRootValue(args) == null ? \"null\" : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new CoreOperationException(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (args == null ? Boolean.TRUE : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return context.getValue(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return context.computeValue(args) : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return context.computeValue(args) == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return context.getJXValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BasicValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return value == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (args == null ? Boolean.FALSE : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return args == null ? Boolean.TRUE : new CoreOperationException(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return context.getNodePointerByKey(args) : new CoreOperation(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return args == null ? Name.TRUE : args;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return context.getJONodeValue(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (args == null) ? 0 : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return context.getIndex(args) == args.length ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return context.getJXPathContext(args[context].computeValue(context));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return functionExpression(context == args) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return context.computeValue(args || args.length == 0) ? Boolean.TRUE : new CoreOperationException(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return context.getJXPathContext().computeValue(args) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return context.isArrayValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return context.computeValue(args || args == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return n == args ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return functionExpression(context == args) ? null : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return context.getArgumentTypes(args) == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return context.getRootValue(args) == null ? 1 : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return context.computeValue(args) == null ? \"null\" : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return context.getNodeValue(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return functionExpression(context == args) ? Boolean.FALSE : new CoreOperation(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return context.isTrue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return context.computeValue(args));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return args == null ? Boolean.TRUE : ((Number) args).computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return context.getJXPathContext().computeValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return context.computeValue(args || args.length == 0) ? Boolean.FALSE : new CoreOperationException(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return context.computeValue(args || args.length == 0) ? Boolean.FALSE : new CoreOperation(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return context.getRootValue(args) == null ? Boolean.FALSE : new CoreOperation(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return context.computeValue(args) ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return context.computeValue(args) ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return context.getNodeValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return context.isArrayValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return context.computeValue(args) == null ? \"null\" : args.computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return computeValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return computeValue(args[context].computeValue(context));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return context.isEnabled(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return n ? args == null : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return context.getJXPathContext(args) == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return context.computeValue(args || args.length == 0) ? \"null\" : args;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return args == null ? Boolean.FALSE : args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new CoreOperation(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return args == null ? Boolean.TRUE : ((Integer) args).computeValue(args[args.computeValue(context));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new CoreOperationException(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (args == null) ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return args == null ? \"\" : args.computeValue(context));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return context.getRootValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return context.getJXPathContext(args) != null ? args.intValue() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return context.getJXPathContext().computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return context.getIndex(args) == args.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BasicValue(args[context].computeValue(context));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return context.getRootValue(args) == null ? \"null\" : args.computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return context.computeValue(args) : _context.computeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return context.getValue(args) == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return context.computeValue(args || args.length == 0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return n.computeValue(args[0].computeValue(context));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return context.computeValue(args) == _context ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return context.computeValue(args) == _context ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return context.getNodeValue(args[1].computeValue(context));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return context.computeValue(args || args.length == 0) ? \"null\" : Boolean.FALSE;",
                "identical": false
            }
        ],
        "buggy_line": "return compute(args[0].computeValue(context), args[1].computeValue(context))",
        "fixed_line": "return compute(args[0].compute(context), args[1].compute(context))"
    },
    "Codec-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "txt = txt.replaceAll(\"ci\", \"si\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "txt = txt.replaceAll(\"tch\", \"2ch\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "txt = txt.replaceAll(\"ci\", \"m\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "txt = txt.replaceAll(\"ci\", \"si\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 5,
                "patch": "txt = txt.replaceAll(\"tq\", \"m\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "txt = txt.replaceAll(\"e$\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 7,
                "patch": "txt = txt.replaceAll(\"cq\", \"m\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "txt = txt.replaceAll(\"tch\", \"2g\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "txt = txt.replaceAll(\"ci\", \"si2\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "txt = txt.replaceAll(\"r$\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 11,
                "patch": "txt = txt.replaceAll(\"r$\", \"si\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 12,
                "patch": "txt = txt.replaceAll(\"cy\", \"m\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "txt = txt.replaceAll(\"cq\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 14,
                "patch": "txt = txt.replaceAll(\"ce\", \"m\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "txt = txt.replaceAll(\"y\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 16,
                "patch": "txt = txt.replaceAll(\"p+\", \"m\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "txt = txt.replaceAll(\"cq\", \"si\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 18,
                "patch": "txt = txt.replaceAll(\"c+\", \"m\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "txt = txt.replaceAll(\"r$\", \"A\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 20,
                "patch": "txt = txt.replaceAll(\"m+\", \"m\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "txt = txt.replaceAll(\"c$\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 22,
                "patch": "txt = txt.replaceAll(\"tq\", \"s2\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "txt = txt.replaceAll(\"r$\", \"fh\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 24,
                "patch": "txt = txt.replaceAll(\"ci\", \"m2\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "txt = txt.replaceAll(\"v\", \"fh\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 26,
                "patch": "txt = txt.replaceAll(\"tch\", \"2ch2\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "txt = txt.replaceAll(\"x\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 28,
                "patch": "txt = txt.replaceAll(\"r$\", \"p\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 29,
                "patch": "txt = txt.replaceAll(\"ph\", \"fh\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 30,
                "patch": "txt = txt.replaceAll(\"tch\", \"m\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "txt = txt.replaceAll(\"cq\", \"si\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "txt = txt.replaceAll(\"tq\", \"si\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "txt = txt.replaceAll(\"tch\", \"2q\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "txt = txt.replaceAll(\"tor\", \"m\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "txt = txt.replaceAll(\"3$\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 36,
                "patch": "txt = txt.replaceAll(\"tio\", \"s2\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "txt = txt.replaceAll(\"c.replaceAll(\"ci\", \"si\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "txt = txt.replaceAll(\"tch\", \"2charno\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "txt = txt.replaceAll(\"t$\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 40,
                "patch": "txt = txt.replaceAll(\"width$\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 41,
                "patch": "txt = txt.replaceAll(\"tmb\", \"m\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "txt = txt.replaceAll(\"\\\\.replaceAll(\"ci\", \"si\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "txt = txt.replaceAll(\"v\", \"f\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "txt = txt.replaceAll(\"z\", \"m\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "txt = txt.replaceAll(\"t\\n+\", \"m\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "txt = txt.replaceAll(\"v\", \"p\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "txt = txt.replaceAll(\"js\", \"m\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "txt = txt.replaceAll(\"v\", \"si\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 49,
                "patch": "txt = txt.replaceAll(\"tq\", \"fh\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "txt = txt.replaceAll(\"ci\", \"sy\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "txt = txt.replaceAll(\"tch\", \"2mb\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "txt = txt.replaceAll(\"ci\", \"1.0\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 53,
                "patch": "txt = txt.replaceAll(\"m+\", \"M\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "txt = txt.replaceAll(\"ci\", \"fh\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "txt = txt.replaceAll(\"sh\", \"s2\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "txt = txt.replaceAll(\"t+\", \"m\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "txt = txt.replaceAll(\"tq\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 58,
                "patch": "txt = txt.replaceAll(\"ci\", \"sy\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 59,
                "patch": "txt = txt.replaceAll(\"c == null\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 60,
                "patch": "txt = txt.replaceAll(\"c\", \"m\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "txt = txt.replaceAll(\"tq\", \"2ch\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "txt = txt.replaceAll(\" Object\", \"m\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "txt = txt.replaceAll(\"cq\", \"k\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "txt = txt.replaceAll(\"ci\", \"fh\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 65,
                "patch": "txt = txt.replaceAll(\"tq\", \"M\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "txt = txt.replaceAll(\"tch\", \"2ch\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 67,
                "patch": "txt = txt.replaceAll(\"ph\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 68,
                "patch": "txt = txt.replaceAll(\"net\", \"m\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "txt = txt.replaceAll(\"b\", \"p\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "txt = txt.replaceAll(\"ctxt\", \"m\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "txt = txt.replaceAll(\"ce\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 72,
                "patch": "txt = txt.replaceAll(\"tcfg\", \"m\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "txt = txt.replaceAll(\"ce\", \"se\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "txt = txt.replaceAll(\"tq\", \"si\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 75,
                "patch": "txt = txt.replaceAll(\"c\", \"2g\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "txt = txt.replaceAll(\"dg\", \"2g\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "txt = txt.replaceAll(\"s+\", \"m\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "txt = txt.replaceAll(\"ci\", \"used\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "txt = txt.replaceAll(\"ph\", \"m\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "txt = txt.replaceAll(\"tq\", \"k\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "txt = txt.replaceAll(\"tq\", \"fh\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 82,
                "patch": "txt = txt.replaceAll(\"ci\", \"M\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "txt = txt.replaceAll(\"Slot\", \"m\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "txt = txt.replaceAll(\"ph\", \"fh\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "txt = txt.replaceAll(\"gh\", \"22\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "txt = txt.replaceAll(\"tq\", \"m2\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "txt = txt.replaceAll(\"cch\", \"2g\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "txt = txt.replaceAll(\"tlang\", \"m\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "txt = txt.replaceAll(\"tia\", \"m\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "txt = txt.replaceAll(\"c3\", \"Wh3\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "txt = txt.replaceAll(\"Full\", \"m\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "txt = txt.replaceAll(\"ttext\", \"m\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "txt = txt.replaceAll(\"position\", \"m\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "txt = txt.replaceAll(\"p\", \"m\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "txt = txt.replaceAll(\"tq\", \"M\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 96,
                "patch": "txt = txt.replaceAll(\"range\", \"m\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "txt = txt.replaceAll(\"ci\", \"m\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 98,
                "patch": "txt = txt.replaceAll(\"domain\", \"m\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "txt = txt.replaceAll(\"ce\", \"m2\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "txt = txt.replaceAll(\"cy\", \"m2\");",
                "identical": false
            }
        ],
        "buggy_line": "txt = txt.replaceAll(\"^mb\", \"m2\");",
        "fixed_line": "txt = txt.replaceAll(\"mb$\", \"m2\");"
    },
    "JacksonDatabind-97": {
        "fixes": [
            {
                "k": 1,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "gen.writeObjectField(_value);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "gen.writeObject();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "gen.writeObjectField(_valueClass, _valueType);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "gen.writeObjectWithType(_value, jgen, provider, _valueClass);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"overflow, value can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "gen.writeObjectField(_valueClass, key, \"overflow, value can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+_valueClass.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "gen.writeObjectField(_valueClass, context);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "gen.writeObjectProperty(_value);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"overflow, value can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+e.getClass().getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"only \"+_valueType.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "gen.writeObject(value);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+e.getClass().getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "gen.writeObjectField(_valueClass, key, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "gen.writeObjectField(_valueClass, key, \"not a valid representation: \"+builder.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid textual representation\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+e.getClass().getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+_valueType.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+re.getClass().getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+_valueClass.getName()+\", problem: \"+e.getClass().getName());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+iae.getMessage(), context);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "gen.writeObject(_valueClass, _valueType);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+_valueType.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+((int) value);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"only \"+_valueType.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "gen.writeObjectField(_valueClass, propName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "gen.writeObjectCall(_valueClass, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "gen.writeObjectField(_valueClass, key, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+iae.getMessage(), context);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "gen.writeObjectMember(_valueClass, _valueType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+e.getMessage(), _valueClass);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+_valueType.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "gen.writeObjectWithPath(value, jgen, provider, _valueClass);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+e.getClass().getName()+\": can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+iae.getMessage(), context);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "gen.writeObjectWithType(_value, jgen, provider, typeSer);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"only \"+_valueType.getRawClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "gen.writeObjectValue(_valueType, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a value\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\"]\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a value\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+_valueClass.getName()+\", problem: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "gen.writeObjectmit(_valueClass, _valueClass, \"only can not be represented as 8-bit value\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+re.getClass().getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\", problem: \"+((int) value);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+re.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "gen.writeObjectMember(_valueType, _valueClass, \"not a valid representation: \"+iae.getMessage(), context);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\": can not be represented as 16-bit value\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "gen.writeObjectField(_valueClass, key, \"not a valid representation: \"+_valueType.getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "gen.writeObjectField(_valueType, _valueClass);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "gen.writeObject(_valueClass, _valueClass, \"not a valid representation: \"+builder.getClass().getName()+\", problem: \"+e.getMessage());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "gen.writeObjectField(_valueType, _valueClass, \"not a valid representation: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "gen.writeObjectMember(_valueClass, _valueClass, \"only can not be represented as 16-JsonSerializableSchema.Feature.WRAP_ROOT_VALUE);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "gen.writeObjectField(_valueClass, _valueClass, \"not a valid representation: \"+re.getClass().getName()+\"]\");",
                "identical": false
            }
        ],
        "buggy_line": "gen.writeObject(_value);",
        "fixed_line": "ctxt.defaultSerializeValue(_value, gen);"
    },
    "Jsoup-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (++offset >= len) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (length == len) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (length + 1 > lastChar) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (length - 1 >= n) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (length == start) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (length == lastChar || length < 2) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (chars[i] == ch) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (length - 1 >= inputLen) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (length == 0 && (i == lastChar || length < input.length)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (length == 0 && (i == sz)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (length == limit) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (chars[i] == '0' && chars[i] <= '9') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (length - 1 >= lastChar) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (length + 1 < length) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (length - 1 >= input.length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (length == 0 && (i < input.length)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (length == 0 && (i == lastChar || length < inputLen)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (length == i) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (length == 0 && (i == lastChar || i > lastChar)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (length == lastChar || i > lastChar) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (length == lastChar) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (length == 0 && (i == lastChar || length < input.length - 1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (length == 0 && (i == lastChar)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (++offset < length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (length == lastChar || i > lastLen) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (length > lastChar) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (chars[i] == '0' && chars[i] == 'e' || chars[i] == 'E') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (length == 0 && (i == lastChar || length - 1)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (length == lastChar || length > 10) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (length - 1 >= last) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (length == lastChar || i > start) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (length < lastChar) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (++offset < len) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (length == lastLen) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (length == 0 && (i == lastChar || length < i)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (chars[i] == '0' && chars[i] <= last) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (chars[i] == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (length == 0 && (i == lastChar || pos - 1)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (codes[i] == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (length + 1 > limit && lastChar != last) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (length - lastFullOffset > lastChar) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i < input.length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (input[offset] == ch) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (length == lastChar || length < inputLen) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (input == last) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (input.charAt(i) == separatorChar) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (input.charAt(i) == '.' && !fillBuffer[i - 1]) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i < lastChar) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (length - 1 >= end) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (length - 1 >= input.length()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (length == 0 && (i == lastChar || startIndex < input.length)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (length - 1 >= len) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (chars[i] == '0' && chars[i] <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (input.charAt(i) == start) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (input[i] == ch) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (length == 0.5) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (length == 0 && (i == '-' || c == '+') && i < input.length)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (chars[i] == '0' && chars[i] == RectangleEdge.charAt(i)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (inputPtr >= last) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (length == sz) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (codes[i] == ch) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (length == 0 && (i == lastChar || c == lastChar)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (input.charAt(i) == '.' && !fillBuffer[i - 1].length() < inputLen) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (input.charAt(i) == '.' && !fillBuffer[i - 1].length() < length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (input.charAt(i) == '.' && !fillBuffer[i - 1].getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (length == 0 && (i == lastChar || offset + 1 < length) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i == len) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (length == lastChar || i > end) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (input.charAt(i) == this.lastChar) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (length >= n) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (length == lastChar || i > last) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (length == 0 && (i == lastChar || startIndex < input.length - 1) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (length == 0 && (i == lastChar || i > last)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (length == (_inputEnd < length) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (length >= max) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (length == 0 && (i < length) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (length == lastChar || length < i) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (length + 1 > lastLen) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (length < lastChar || i > start) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (length == 0 && (i == lastChar || i > lastChar) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (length == 0 && (i == lastChar || startIndex - 1)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (length == 0 && (i == '-' || c == '+') && iSigned) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (length < lastChar || i > lastChar) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (length == 0 && (i == lastChar || c == '+') && iSigned) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (length < lastChar || i > lastLen) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (length == 0 && (i == lastChar || chars[i]) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (length == 0 && (i == lastChar || length < outputBuffer.length)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (length == 0 && (i == lastChar || c == '+') && i < input.length)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (input.charAt(i) == '.' && !fillBuffer[i - 1].getClass().isAssignableFrom(lastChar)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (inputPtr >= inputLen) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (length + 1 < lastChar) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i < maxCode) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (length == 0 && (i == endChar || length < input.length)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i < lastChar || pos > last) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (length < lastChar || i > end) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (j < input.length) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (length == lastChar || length > max) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (length == lastFullOffset) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (input.charAt(i) == '.' && !fillBuffer[i - 1].length() < inputLen + length) {",
                "identical": false
            }
        ],
        "buggy_line": "if (offset < length) {",
        "fixed_line": "if (offset < length && last <= length) {"
    },
    "Math-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (a < b) ? -1 : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (b < a) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (a < b) ? a : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (a < b) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (a == 0.0F || b == Float.NaN ? new Float(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (b <= 0.0F) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (a < b) ? - b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (a < b) ? 0.0F : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (a < b) ? - a : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (a < b) ? new Float(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (a <= 0.0) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (a < b) ? 1.0 : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (a < b) ? Double.NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (b < a) ? b : Float.NaN(a + b);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (a < b) ?>(Float.NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (a < b) ? -opcode : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (a == 0.0) ? 0.0F : (b <= 0.0F);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (a + b) ? 0.0F : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (a == 0.0F || b == Float.NaN ? 2.0 : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (a == 0.0) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (a < b || b > a) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (a < b) ? -2 : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (a == 0.0F || b == Float.NaN ? 2.0 : Float.NaN(b) + b);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (a < b) ? @Float.TRUE : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.isNaN(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (a == 0.0F || b == Float.NaN ? 2.0 : Float.NaN(b) - b);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (a == 0.0F || b == Float.NaN ? 2.0 : Float.NaN(b) - b;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (a < b) ? -1.0F : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (a + b) ? Float.NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (a < b) ? - findFloat(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (a < b) ? value : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (a < b) ? -all : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN(b) + b);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (b <= 0.0F) ? new Float(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (a == 0.0F || b == Float.NaN ? 2.0 : Float.NaN(b) + b;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (a == 0.0F || b == Float.NaN(b) ? Float.MAX_VALUE : Float.NaN;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (a < b) ? test : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (a < b) ? -1 : Float.NaN(b) + b);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (a == 0.0F || b == Float.NaN ? 0.0F : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (a < b) ? -i : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (a < b) ? -1 : new Float(b);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (b < a) ? - b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (a < b) ? @Float.NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (a < b) ? Double.NaN : Float.NaN;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (a == 0.0F || b == Float.NaN ? 0.0F : new Float(b);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (a < b) ?bit : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (a < b) ? (1 : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.NaN : b);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (a + b) ? Float.NaN() : Float.NaN;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (a >= 0.0) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (a < b) ? -b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (a < b ? -1 : Float.NaN(b) + b;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (a < b) ? -Op : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (a == 0.0F || b == Float.NaN(b) ? new Float : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (a < b) ? -1 : (b <= 0.0F || b / Float.NaN(b);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (a == 0.0F || b == Float.NaN(b) ? Float.NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN(b) + b;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (a < b) ? getDen : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (a == 0.0F || b == Float.NaN ? new Float(b) : Float.NaN;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (b < a) ? b : Float.NaN(a);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (a == 0.0F || b == Float.NaN ? type : new Float(b) ? Float.NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (a < b ? -1 : Float.NaN(b) + b);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (a < b) ?ps : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (a < b) ? DEFAULT_NaN : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (a == 0.0F || b == Float.NaN ? Float.isNaN(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (a == 0.0F || b == Float.NaN ? 2.0 : Float.NaN(b) * new Float(b);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (a > b) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (a == 0.0F || b == Float.NaN(b) ? Float.NaN : new Float(b);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (a == 0.0F || b == Float.NaN(b) ? Float.isNaN(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (a < b) ? @Float.NaN() : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (a < b) ?>(Float.NaN : new Float(b));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (a < b) ? -1 : (b <= 0.0F);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (a + b) ? Float : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (a <= 0.0F) ? b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (a < b) ? Double.NaN : new Float(b);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (a == 0.0F || b == Float.NaN ? Float.NaN : Float.NaN(b) + b;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN(b) - b;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (a < b) ? -1 : (b <= 0.0F || b == Float.NaN(b));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MAX_VALUE : Float.NaN(b) - b);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (a == 0.0) ? - b : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (a + b) ? Float.NaN(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (a < b) ? min : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (a < b) ? - 2.0 : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (a == 0.0F || b == Float.NaN ? 0.0F : Float.NaN(b) - b;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (a < b) ? @Float.NaN() : Float.NaN;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MIN_VALUE : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (b < a ? b : Float.NaN(a) + b;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (a < b) ? maximum : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (a < b) ? -value : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (a < b) ? -1 : Float.NaN(b + b);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (a == 0.0F || b == Float.NaN ? Float.MAX_VALUE : Float.NaN(b) + b);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (b < a) ? b : Float.NaN(a) + b;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (a < b) ? -ret : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (a == 0.0F || b == Float.NaN ? Float.NaN : Float.NaN(b) - b;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (a == 0.0F || b == Float.NaN(b) ? new Float(b) : Float.NaN(b);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (a < b) ? -1 : (b <= 0.0F || b / 2.0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (a == 0.0F || b == Float.NaN ? Double.MIN_VALUE : Float.NaN);",
                "identical": false
            }
        ],
        "buggy_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
        "fixed_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);"
    },
    "Codec-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(false);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(TimeZone);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(null);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(DEFAULT_IMAGINARY_CHARACTER);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(TimeZone_NON_NUMERIC_LEADING_ZEROS);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(SCAPE_NON_EXECUTABLE_PREFIX);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"\"));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(SCAPE_NON_NUMERIC_NUMBERS);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \"]\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \" is not supported\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \"]\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(TimeZoneInfoCache = new HashMap<String, Base64Variant>();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, false));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(TimeZone = supported_JSON_NON_EXECUTABLE_PREFIX);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(TimeZone = new HashMap<String, Base64Variant>();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(SCAPE_NON_EXECUTE_PREFIX);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.class\"));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.class.getName()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .util.ArrayList\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = \"false\";",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" converter\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR), codec);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ID\"));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \"true\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(TimeZone = supported_JSON_NON_EXECUTABLE_PREFIX;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = false;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = new Base64Variant();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(TimeZone = Node.newString(Token.NAME, supported));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_KEY));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZOTED);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_ARRAY));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \"'\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = \" .util.ArrayList\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(TimeZone_NON_NUMERIC_LEADING_ZEROS = new Base64Variant();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"}\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE, DateTimeConstants.TYPE_STRING);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(ATINDENT_EMBEDDED_OBJECT, \"false\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR), false);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" INT_ARRAY\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(TimeZone = Node.newString(Token.STRING));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"false\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, encoding));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(TimeZone_NON_NUMERIC_LEADING_ZEROS = false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.Object\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(DEFAULT_IMAGINARY_PROP, DEFAULT_LOAD_FACTOR);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(TimeZoneInfoCache = new HashMap<String, Base64>();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.Object\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(DEFAULT_IMAGINARY_LOAD_FACTOR, false);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.class.getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"t\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.class\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"0\"));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"XML_ARRAY\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(null, supported);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = DEFAULT_ZOOM_INSETS);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \"}\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, can));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.character\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(SCAPE_NON_NUMERIC_LEAPER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .io.tmpdir\"));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .io.tmpdir\")));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.class\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE + \"[\" + codec);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"null\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(TimeZone_NON_NUMERIC_LEADING_ZEROS = \"false\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(TimeZone_NON_EXECUTABLE_PREFIX);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(TimeZone = Node.newString(Token.STRING_ESCAPE));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.UTF_8\"));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.getClass().getID()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.class\", supported));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = \"[\" + codec;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .util.ArrayList.class\"));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(TimeZone = supported_JSON_NON_EXECUTABLE, false);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, supported));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(SCAPE_NON_EXECUTABLE_PREFIX + \"]\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(TimeZone = Node.newString(Token.NAME, \"\"));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(ATINDENT_EMBEDDED_OBJECT, false);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZODS);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = \"tz\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.character\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZOCCURREN 7 + \"]\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZOTES);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(TimeZone = supported_JSON_NON_EXECUTE_PREFIX;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZOCCURRENCES_ZERO);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .lang.ArrayList.ID\"));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(DEFAULT_MAXIMUM_CACHE_SIZE, \"false\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"polygon\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_INSETS));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \" .util.character\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_OBJECT, \"true\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(SCAPE_NON_NUMERIC_LEADING_ZEROS = \"getter\" + codec;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(TimeZone = Node.newString(Token.STRING_EMBEDDED_ARRAY);",
                "identical": false
            }
        ],
        "buggy_line": "this(false);",
        "fixed_line": "this(0);"
    },
    "Closure-86": {
        "fixes": [
            {
                "k": 1,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) || NodeUtil.isLiteralValue(callNode)) return false;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) return false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (callNode.getFirstChild().getType() != Token.NAME) return false;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (call != null && call.getFirstChild().getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (callSiteType != null && callHasSideEffects.getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.ARRAYLIT) return false;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new Error(\"Expected \" + callName + \" is not a call: \" + Token.name(callNode.getType()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (callNode.getFirstChild().getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (callNode.getFirstChild().getType() != Token.FUNCTION) return false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (callSiteType.getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (callSiteType.getJSDocInfo() != null) return false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (callSite.getFirstChild().getType() != Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (callSite.getFirstChild().getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (callSiteType.getBooleanProp(Node.SOURCENAME_PROP) != null) return false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (callNode.getFirstChild().getType() == Token.FUNCTION) return false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (callNode.getFirstChild().getType() != Token.EXPR_RESULT) return false;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) return false;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw new Error(\"Expected \" + callName + \" is not an object but was \" + Token.name(callNode.getType()));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (callSiteType != null && call.getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (callSiteType.getFirstChild().getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (callSite.getFirstChild().getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) || NodeUtil.isGet(callNode)) return false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() != Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (callSiteType.getFirstChild().getType() == Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (callSite.getFirstChild().getType() == Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (\"Lnull;\".equals(callNode.getFirstChild().getQualifiedName()) return false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (callNode.getFirstChild().getType() != Token.NEW) return false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw new Error(\"Expected \" + callName + \" is not an object but was \" + Token.name);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) || NodeUtil.isFunctionAnonymous(callNode)) return false;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new Error(\"Not a call.\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new callGetProp(callNode.FUNCTION_PROP)) return false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (callSite.getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (callSiteType.inGlobalScope() || call.getType() != Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (callSite.getFirstChild().getType() != Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() != Token.OBJECTLIT) return false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getString())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (call != null && call.getFirstChild().getType() == Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) || NodeUtil.isNew(callNode)) return false;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new ErrorWITHOUT_TYPEDEF_STRING_ARRAY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (callNode.getFirstChild().getType() != Token.REF_SPECIAL) return false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new ErrorWITHOUT_TYPEDEF_EXPR_RESULT;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (call != null && call.getFirstChild().getType() == Token.OBJECTLIT) throw new IllegalArgumentException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (callSite.getFirstChild().getType() != Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new Error(\"Not a call: \" + callName.getMessage());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (\"Lnull;\".equals(callNode.getFirstChild().getString())) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (!callMeArray && callName.equals(callNode.getFirstChild().getString())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new ObjectException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (callNode.getFirstChild().getType() == Token.STRING) return false;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (callNode.getFirstChild().getType() != Token.REGEXPrunLength) return false;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.THIS) return false;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) || NodeUtil.isGetProp(callNode)) return false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (callNode.getFirstChild().getType() != Token.STRING) return false;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (callNode.getFirstChild().getType() != Token.ARRAYLIT) return false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.OBJECTLIT) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) throw new Error(\"Not a call.\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (call != null && call.getFirstChild().getType() == Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (\"prototype\".equals(callNode.getFirstChild().getQualifiedName()) || NodeUtil.isNew(call)) return false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new IllegalStateException(\"Not a call: \" + callName.getMessage());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.CALL) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) throw new Error(\"Not a call: \" + callName.getString();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (\"Lnull;\".equals(callNode.getFirstChild().getQualifiedName())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (call != null && call.getFirstChild().getType() == Token.OBJECTLIT) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new Error(\"Not a call: \" + callName.replace('.', return false;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (call != null && call.getFirstChild().getType() == Token.CALL) return false;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new IllegalStateException(\"Not a call: \" + callName.getMessage());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) throw new Error(\"Not a call: \" + callName.getMessage());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new ErrorWITHOUT_TYPEDEF_STRING_EOL;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new ErrorWITHOUT_TYPEDEF_STRING_EVAL;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new IllegalStateException(\"Not a call is not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (callNode.getFirstChild().getType() == Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (callSite.getFirstChild().getType() == Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (callNode.getFirstChild().getType() == Token.NAME) throw new IllegalStateException(\"Not a call: \" + callName.getMessage());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (callNode.getFirstChild().getType() != Token.OBJECTLIT) throw new Error(\"Not a call.\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) throw new Error(\"Not a call: \" + callName.getMessage());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.ARRAYLIT) throw new IllegalStateException(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (callNode.getFirstChild().getType() != Token.NAME) throw new Error(\"Not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (callNode.getFirstChild().getType() != Token.CALL) throw new IllegalStateException(\"Not a call is not a call: \" + callName);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (callNode.getFirstChild().getType() == Token.OBJECTLIT) throw new Error(\"Not a call: \" + callName;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (callNode.getFirstChild().getType() == Token.CALL) throw new Error(\"Not a call: \" + callName.getString();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.NEW) return false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (callSiteType.isNoObjectType() || parent.getType() == Token.FUNCTION) return false;",
                "identical": false
            }
        ],
        "buggy_line": "return true;",
        "fixed_line": "return false;"
    },
    "Time-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Partial newPartial = new Partial(iChronology, newValues, i + 1, newTypes.length - i - 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Partial newPartial = new Partial(iChronology, newValues, i + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, i + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, i);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? i + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - i);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues * i + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Partial newPartial = new Partial(newChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Partial newPartial = new Partial(iChronology, newValues, i + 1, newTypes.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + i, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Partial newPartial = toTypes(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues) + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.DAY_OF_MONTH, newValues);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues * i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length - 1, i - 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(iChronology), newValues);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.FallThrough(iChronology), newValues);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Partial newPartial = new Partial(iChronology + 1, newTypes, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, i - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.TYPE_OBJECT_ARRAY);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? 0 : newValues.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length - i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes,swt - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Partial newPartial = to.copyOf(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, i + 1, newValues.length - i);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Partial newPartial = new Partial(iChronology, newValues, i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? i - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes,CutoverInstant + 1, newValues.length - i - 1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Partial newPartial = toSwtChronology.getInstance(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Partial newPartial = new Partial(iChronology, newValues, i + 1, newTypes.length - i);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + i, newValues.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(newPartial, newValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.TYPE_OF_MONTH, newValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Partial newPartial = handle.copyOf(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(newPartial, i - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(iChronology), newValues.length);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + 1]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Partial newPartial = to Math.min(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i - 1]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - 1, newValues);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin), newValues.length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Partial newInstant = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? i - 1, newValues.length : i);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Partial newPartial = new Partial(iChronology, new datetime, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Partial newPartial = to.iChronology(newPartial, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.MILLIS_PER_SECOND, newValues);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? this : new Partial(iChronology), newValues);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + i, newValues.length - i);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, new FIRST_month - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Partial newValues = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? this : new Partial(iChronology), newValues.length);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + 2, newValues.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Partial newChronology = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? i() : newValues.length);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + i, newValues.length - 1]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues.length - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Partial newPartial = iChronology.getPartial(newPartial, newValues);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial( //Values[iChronology), newValues.length);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(this, newValues);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "converters = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues * i + 1, newValues.length - i);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Partial newPartial = new Partial(iChronology + 1, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - 1, newValues.length));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues) * i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.TYPE_ADD - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Partial newPartial = new Partial(iChronology, i, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.TYPE_INT);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iNotAssignable : newValues.length);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Partial newPartial = newTypes(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + 1, newValues.length - i);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Partial newPartial = toChronology.getInstance(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(newPartial, i + 1, newValues.length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Partial newPartial = date.copyOf(iChronology, newTypes, newValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes,Values);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Partial newPartial = new Partial(iChronology, newValues, i + 1, newValues.length - i);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMinLevel.length : new Partial(iChronology), newValues);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, iValues);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues[i] + 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(newPartial, i - 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iNotAssignable : newTypes, i);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, new FIRST_length - 1, newValues.length);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - i - 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.BIG_INTEGER_FOR_INT);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.length - 1, newValues.length * i - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? iMin.length : new Partial(newPartial, i);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues == null ? i - 1, newValues.length * i - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues) + 1, newValues.length - i);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Partial newPartial = new Partial(iChronology, newTypes, Constants.TYPE_IN_SECOND, newValues);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Name newPartial = new Partial(iChronology, newTypes, newValues);",
                "identical": false
            }
        ],
        "buggy_line": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
        "fixed_line": "Partial newPartial = new Partial(newTypes, newValues, iChronology);"
    },
    "Lang-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "str.getChars(0, strLen, buffer, size);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "str.getChars(0, strLen, buffer, size + padLen);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "str.getChars(0, strLen, buffer, size + width);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "str.getChars(0, strLen, buffer, size +ROLen);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "str.getChars(0, strLen, buffer, size - padLen);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "str.getChars(0, strLen, buffer, size+len);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "str.getChars(0, strLen, buffer, size+len + padLen);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "str.getChars(0, strLen, buffer, size + padLen;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "str.getChars(0, strLen, buffer, size + height);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "str.getChars(0, strLen, buffer, size).append(strLen);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "str.getChars(0, strLen, buffer, size + currLen);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "str.getChars(0, strLen, buffer, size - width);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "str.getChars(0, strLen, buffer, size+size);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "str.getChars(0, strLen, buffer, size + parentLen);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "str.getChars(0, strLen, buffer, size + length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "str.getChars(0, strLen, buffer, size + resultLen);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "str.getChars(0, strLen, buffer, size + normalLen);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "str.getChars(0, strLen, buffer, size + \"\" + padLen);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "str.getChars(0, strLen, buffer, size = padLen);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "str.getChars(0, strLen, buffer, size + padLen];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "str.getChars(0, strLen, buffer, size + ']');",
                "identical": false
            },
            {
                "k": 22,
                "patch": "str.getChars(0, strLen, buffer, size + PeriodLen);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "str.getChars(0, strLen, buffer, size + newLen);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "str.getChars(0, strLen, buffer, size +InstructionLen);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "str.getChars(0, strLen, buffer, size + i);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "str.getChars(0, strLen, buffer, size + NO_CHARSLen);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "str.getChars(0, strLen, buffer, size + GsonLen);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "str.getChars(0, strLen, buffer, size + yLen);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "str.getChars(0, strLen, buffer, size + xLen);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "str.getChars(0, strLen, buffer, size + inLen);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "str.getChars(0, strLen, buffer, size+strLen);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "str.getChars(0, strLen, buffer, size + maxLen);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "str.getChars(0, strLen, buffer, size + namingLen);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "str.getChars(0, strLen, buffer, size).append( padLen);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "str.getChars(0, strLen, buffer, size + transLen);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "str.getChars(0, strLen, buffer, size + randomLen);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "str.getChars(0, strLen, buffer, size + calculateLen);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "str.getChars(0, strLen, buffer, size +rangeLen);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "str.getChars(0, strLen, buffer, size + compareToLen);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "str.getChars(0, strLen, buffer, size + caseLen);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "str.getChars(0, strLen, buffer, size + jpLen);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "str.getChars(0, strLen, buffer, size+len + width);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "str.getChars(0, strLen, buffer, size +ValuedLen);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "str.getChars(0, strLen, buffer, size + padLen());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "str.getChars(0, strLen, buffer, size + getAnchor().toString());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "str.getChars(0, strLen, buffer, size + mvLen);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "str.getChars(0, strLen, buffer, size +ConstructorLen);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "str.getChars(0, strLen, buffer, size + appendLen);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "str.getChars(0, strLen, buffer, size + gapLen);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "str.getChars(0, strLen, buffer, size + padLen = width);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "str.getChars(0, strLen, buffer, size + += width);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "str.getChars(0, strLen, buffer, size +Keys.length());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "str.getChars(0, strLen, buffer, size + cachedLen);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "str.getChars(0, strLen, buffer, size + itLen);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "str.getChars(0, strLen, buffer, size + instanceLen);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "str.getChars(0, strLen, buffer, size + \"\" + width);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "str.getChars(0, strLen, _toString, buffer, size);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "str.getChars(0, strLen, buffer, size + \"0Len);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "str.getChars(0, strLen, buffer, size + 1), strLen);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "str.getChars(0, strLen, buffer, size +thresholdLen);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "str.getChars(0, strLen, buffer, size +VariableLen);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "str.getChars(0, strLen, buffer, size + padLen - width);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "str.getChars(0, strLen, buffer, size +Size);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "str.getChars(0, strLen, buffer, size +HandlerLen);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "str.getChars(0, strLen, buffer, size +doubleLen);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "str.getChars(0, strLen, buffer, size + \"\".Len);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "str.getChars(0, strLen, _size, buffer, size);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "str.getChars(0, strLen, buffer, size + len);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "str.getChars(0, strLen, buffer, size +notLen);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "str.getChars(0, strLen, buffer, size + 7Len);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "str.getChars(0, strLen, buffer, size + eolLen);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "str.getChars(0, strLen, buffer, size + listenersLen);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "str.getChars(0, strLen, buffer, size + 15,Len);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "str.getChars(0, strLen, buffer, size + getNullText());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "str.getChars(0, strLen, buffer, size +calculateLen);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "str.getChars(0, strLen, buffer, size + forLen);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "str.getChars(0, strLen, buffer, size +MockLen);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "str.getChars(0, strLen, buffer, size +SHLen);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "str.getChars(0, strLen, buffer, size +;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "str.getChars(0, strLen, buffer, size +signatureLen);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "str.getChars(0, strLen, buffer, size + mergeLen);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "str.getChars(0, strLen, buffer, size +EntriesLen);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "str.getChars(0, strLen, buffer, size + 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "str.getChars(0, strLen, buffer, size +BITSLen);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "str.getChars(0, strLen, buffer, size + 2 + width);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "str.getChars(0, strLen, buffer, size = padLen + width);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "str.getChars(0, strLen, buffer, size +appendChildLen);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "str.getChars(0, strLen, buffer, size + openLen);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "str.getChars(0, strLen, buffer, size +currLen);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "str.getChars(0, strLen, buffer, size +@Len);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "str.getChars(0, strLen, buffer, size+2, padLen);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "str.getChars(0, strLen, buffer, size + 2 + padLen);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "str.getChars(0, strLen, buffer, size + ignLen);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "str.getChars(0, strLen, buffer, size +completeLen);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "str.getChars(0, strLen, buffer, size+strLen + padLen);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "str.getChars(0, strLen, buffer, size + k);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "str.getChars(0, strLen, buffer, size + ' ');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "str.getChars(0, strLen, buffer, size + 2 + i);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "str.getChars(0, strLen, buffer, size + item);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "str.getChars(0, strLen, buffer, size).toString();",
                "identical": false
            }
        ],
        "buggy_line": "str.getChars(0, strLen, buffer, size);",
        "fixed_line": "str.getChars(0, width, buffer, size);"
    },
    "Mockito-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "primitiveValues.put(primitive.class, newValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "primitiveValues.put(primitive.long.class, newValues);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "primitiveValues.put(primitive.class, new Double(primitiveType));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "primitiveValues.put(primitive.long.class,primitiveType);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitiveType));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "primitiveValues.put(primitive.class,primitiveType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "primitiveValues.put(primitive.class, new Double(primitiveType), row);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "primitiveValues.put(primitive, new Double(primitive));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "primitiveValues.put(primitive.get(primitive), newValues);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitiveType), row);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "primitiveValues.put(primitive, new Double(primitiveType));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "primitiveValues.put(primitive.class, a.intValue() < primitiveValues.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "primitiveValues.put(primitive.class, Collection.class);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "primitiveValues.put(primitive.long.class, newdoubleValue(primitiveType));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "primitiveValues.put(primitive.value, newValues);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitive));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "primitiveValues.put(primitive.getName(), new Double(primitive));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "primitiveValues.put(primitive.class, new Double(primitiveType), type);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "primitiveValues.put(primitive.class, newdoubleValue(primitiveType));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "primitiveValues.put(primitive.getName(), Short.TYPE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "primitiveValues.put(primitive.long.class, a.intValue() < primitiveValues.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "primitiveValues.put(primitive.intValue(), Short.class, newValues);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "primitiveValues.put(primitive.class, staticTypingValues);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "primitiveValues.put(primitive.class, new Double(primitiveType), false);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "primitiveValues.put(primitive.getName(), type);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "primitiveValues.put(primitive.class, double.class);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "primitiveValues.put(primitive.long.class, newClass);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "primitiveValues.put(primitive.doubleValue(), Short.class, newValues);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.doubleValue()))) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "primitiveValues.put(primitive.class, newdoubleValue(primitiveType), row);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "primitiveValues.put(primitive.long.class, double.class);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "primitiveValues.put(primitive, ai.class, newValues);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "primitiveValues.put(primitive.getTime(), other.class, newValues);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "primitiveValues.put(primitive.getTime(), Double.TYPE, newValues);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "primitiveValues.put(primitive.getName(), Short.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "primitiveValues.put(primitive, new Double(primitive), type);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "primitiveValues.put(primitive.doubleValue(), Short.TYPE);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.doubleValue()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "primitiveValues.put(primitive.long.class, Collection.class);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive), type);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "primitiveValues.put(primitive.long.class, staticTypingValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "primitiveValues.put(primitive.getName(), Object.class, newValues);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.doubleValue()), this.primitiveType);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "primitiveValues.put(primitive.class, ai);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "primitiveValues.put(primitive, new Double(primitiveType), row);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.longValue));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "primitiveValues.put(primitive.long.class, newup);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "primitiveValues.put(primitive.getTime(), new Double(primitive));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "primitiveValues.put(primitive.class, newClass);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.doubleValue()), type);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "primitiveValues.put(primitive.replace(primitive, new Double(primitive));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.longValue()))) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "primitiveValues.put(primitive.getName(), Double.TYPE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "primitiveValues.put(primitive.long.class, newdoubleValue(primitiveType), row);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "primitiveValues.put(primitive.long.class, new Object(primitive));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "primitiveValues.put(primitive.getName(), ai.length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "primitiveValues.put(primitive. createLong(primitive), newValues);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "primitiveValues.put(primitive.class, byte.class);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "primitiveValues.put(primitive.class, Object.class);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "primitiveValues.put(primitive.long.class, new Object[] {primitive});",
                "identical": false
            },
            {
                "k": 62,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.longValue()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "primitiveValues.put(primitive.class, newup);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "primitiveValues.put(primitive.class, String.class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "primitiveValues.put(primitive.getName(), Short.class, newValues);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.longBitsToFloat.class));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "primitiveValues.put(primitive.class, f);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "primitiveValues.put(primitive, new Double(primitiveType), type);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "primitiveValues.put(primitive.intValue(), type);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "primitiveValues.put(primitive.getTime(), Double.class, newValues);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "primitiveValues.put(primitive.long.class, String.class);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "primitiveValues.put(primitive.getName(), Object.class);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitiveType), type);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "primitiveValues.put(primitive.long.class,byteValue.LONG);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "primitiveValues.put(primitive.doubleValue(), Double.TYPE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "primitiveValues.put(primitive.class, new Double(primitiveType), obj.doubleValue());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "primitiveValues.put(primitive, a.class, newValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "primitiveValues.put(primitive.long.class, Object.class);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "primitiveValues.put(primitive.long.class, ai);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "primitiveValues.put(primitive, new Double(primitive.doubleValue()), type);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "primitiveValues.put(primitive.doubleValue(), Short.class);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "primitiveValues.put(primitive. createLong(primitive), type);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitiveType)).put(primitiveType));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitive.doubleValue()))) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "primitiveValues.put(primitive.long.class, newute(primitiveType));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "primitiveValues.put(primitive.long.class, newObject(primitiveType));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitive.doubleValue()));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "primitiveValues.put(primitive.long.class, new Double(primitiveType), false);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "primitiveValues.put(primitive.class, newdoubleValue(primitiveType), false);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "primitiveValues.put(primitive.class,byteValue.class);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "primitiveValues.put(primitive.class, new NumberAxis(primitiveType));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "primitiveValues.put(primitive.getTime(), new Double(primitiveType));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "primitiveValues.put(primitive.class, new Double(primitiveType)).put(primitiveType));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "primitiveValues.put(primitive.class, new Object[] {primitive});",
                "identical": false
            },
            {
                "k": 95,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.longValue()), this.primitiveType);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.intValue() + 1));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "primitiveValues.put(primitive.class,ute);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.long.class), type);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "primitiveValues.put(primitive, newValues);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "primitiveValues.put(primitive.class, new Double(primitive.doubleValue()), 0L);",
                "identical": false
            }
        ],
        "buggy_line": "primitiveValues.put(double.class, 0);",
        "fixed_line": "primitiveValues.put(double.class, 0D);"
    },
    "Math-63": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (x == y) || x == y;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (Double.isNaN(x) || y == y;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (x == y) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (Double.isNaN(x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (Double.isNaN(x) || y == Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (Double.isNaN(x) && x == y;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (x == x) || y == Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (Double.isNaN(x) || x == y;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (Double.isNaN(x) || y == Minute.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (x == x) || y == y;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (Double.isNaN(x) && new Double(y)) || y == y;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (x == x) || y == Double.NaN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (Double.isNaN(x) && !Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == false;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (x == x) || y == null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (x == x) || y == 0.0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (Double.isNaN(x) || y == null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) && y == y;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (Double.isNaN(x) || y == 0 ? Double.isNaN(y) : y;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) ||",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (Double.isNaN(x) && new Double(y)) != y;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (Double.isNaN(x) && !Double.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (x == y) || y == Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (x == y) || Double.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (x == x) || y == Minute.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == 0L;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return ((x == x) || (x == y)) || y == 0L;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (Double.isNaN(x) || y ==(\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (Double.isNaN(x) && !Double.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y ==(\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == false;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (Double.isNaN(x) && y == x;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (Double.isNaN(x) || y == 0 ? new Double.isNaN(y) : y;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (Double.isNaN(x) || y == Array.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) && x == y;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return ((x == x) || (x == y)) || y == null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == 0.0;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==(\";",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (x == y) || y == Minute.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (Double.isNaN(x) || y == h;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (Double.isNaN(x) || y == 0 ? y : y;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (Double.isNaN(x) || y == 0 || y == null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (Double.isNaN(x) || y == this.y;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (x == x) || y == ((y - y) ? y : y == y;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (Double.isNaN(x) || y == -1 ? Double.isNaN(y) : y;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0L;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (Double.isNaN(x) || y == m;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (Double.isNaN(x) || y == Array.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? y : y;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (x == x) || y == SerialDate.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (Double.isNaN(x) && new Double(y)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == x;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) ? y : y;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == h;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == true;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (Double.isNaN(x) || y == Double.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == parent;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (Double.isNaN(x) && y == this.y;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (x >= y && x == y;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (x == x) || y == ((y + y) ? y : y == y;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || y == h;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (Double.isNaN(x) || y == SWT.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (Double.isNaN(x) && Double.isNaN(y)) || this.isNaN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (x == x) || y == Minute.class;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (Double.isNaN(x) || y == new Double.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (Double.isNaN(x) || y == Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (Double.isNaN(x) && y == null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (x == y) || y == null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (x >= y) && x == y;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (x == y) || Double.isNaN(y)) ? y : y;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (x == x) || y == Double.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (Double.isNaN(x) &&getItemCount(y)) != y;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (x == y) || y == ((y + y) ? y : y == y;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (Double.isNaN(x) || y == Time.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return ((Double.isNaN(x) && y == y;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (Double.isNaN(x) || y == 0 ? y : y == null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (Double.isNaN(x) || y == x;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (x == y) || y == Double.NaN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (x == y) || y == 0.0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (Double.isNaN(x) || y == 0 ? false : y;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == parent;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (x == x) || y == 0 ? Double.isNaN(y) : y;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (Double.isNaN(x) || y == Array.isNaN(y)) ? y : y;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (x == x) || y == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (x == y) || Double.isNaN(y)) && y == y;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (Double.isNaN(x) || y == -1 ? Double.MAX_VALUE : y;",
                "identical": false
            }
        ],
        "buggy_line": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
        "fixed_line": "return equals(x, y, 1);"
    },
    "Math-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return solve(f, max);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return solve(min, max, f);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return solve(min, max + f);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return solve(min, max) - f;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return solve(min, max) - min;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return factory.newDefaultSolver(f, max, f);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return factory.newArrayListRealFunction(min, max, f);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return solveAll(min, max, f);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return factory.min(min, max, f);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return solveException(min, max);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return solve(min, max - min);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return factory.newDefaultSolver(f, max), f);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return factory.newDefaultSolver(f, max - min);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return factory.newArrayListWithRealFunction(min, max, f);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return factory.newDefaultSolver(f, min, max);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return solve(min, max) / ((double) min);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return solve(min, max), f);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return solve(min, max - f);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return factory.newArrayListRealFunction(f, max, f);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return factory.newArrayListWithCapacity(min, max, f);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return solve(min, max) / ((double) min;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return factory.newDefaultSolver(f, max);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return solveException(min, max, f);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return solve(min, max + 1) / (f);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return solve(min, max) - Math.min(f, max);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return factory.newDefaultSolver(f, max - min, initial);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return solve(f, min, max);",
                "identical": true
            },
            {
                "k": 29,
                "patch": "return solve(min, max) + f;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return factory.newArrayListRealFunction(f, min, max);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return solve(min, max) - initial;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return solveAll(min, max);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return solve(min, max + ((double) f).max;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return solve(f, max) - min;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return solve(min, max + f.getImaginary(), f);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return factory.newDefaultSolver(f, max), initial);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return factory.newArrayListWithRealFunction(f, max, f);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return solve(min, max + 1) / ((double) min;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return factory.newDefaultSolver(f, max + 1) / (f);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return solve(min, max + 1, f);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return solve(min, max) / ((double) min).max);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return solves(min, max);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return solve(f, max - min);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return solve(min, max) - Math.min(f, max), f);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return factory.newDefaultSolver(f, max + min, initial);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return factory.newLinkedHashMap(f, max, f);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return solve(min, max) + f.getImaginary();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return solve(min, max + ((double) f).max);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return solve(f, min);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return factory.newDefaultSolver(f, min, max - min);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return factory.newDefaultSolver(f, max - min + 1) / (f);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return factory.newDefaultSolver(f, max - min + 1.0) / 2.0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return solve(min, max) - f.getImaginary();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return factory.newDefaultSolver(f, max - min + 1.0) / initial;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return solve(min, max + 1) / (f. Double(min) + max);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return factory.newArrayList(min, max, f);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return solve(min, max + 1) / (f.getY() - min);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return factory.newDefaultSolver(f, max + min, f);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return factory.newDefaultSolver(f, min + 1) / (f);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return solve(min, max + 1, f.getImaginary());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return solve(f, max) + f.getImaginary();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return factory.newDefaultSolver(f, max), initial, max);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return solve(min, max) - Math.min(max, initial));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return solve(min, max) - Math.min(f, max), initial);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return solveintersects(min, max, f);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return factory.newLinkedHashMap(f, min, max);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return solve(min, max) - Math.min(max, initial);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return solve(min, max) / (f);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return solve(min, max) { return min; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return factory.newArrayList(f, min, max);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return solve(min, max + 1) / (f.double) max;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return factory.newDefaultSolver(f, max - min, f);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return solve(min, max + 1) / (f.doubleValue() < min);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return factory.newDefaultSolver(f, max - min + 1) / (f;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return solve(min, max) / ((double) min, initial);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return solve(min, max + 1) / ((double) min);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return solve(min, max + 1) / (f.getImaginary());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return factory.newArrayListWithRealFunction(f, min, max);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return solve JSError(min, max, f);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return solve(min, max + 1) / (f.getN() - min);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return factory.newDefaultSolver(f, max) - min;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return factory.newDefaultSolver(f, min, max), f);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return solve(min, max + f.getImaginary());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return solve(min, max + initial);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return factory.newDefaultSolver(f, max - min + 1.0) / (f);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return factory.newDefaultSolver(f, max).max);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return factory.newDefaultSolver(f, max - min + 1) / 2.0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return solve(min, max + f.getImaginary(), initial);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return solveWithBreak(min, max, f);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return solve(f, max, f);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return solve(min, max) - Math.min(f, max));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return solve(min, max) - f.getImaginaryCount();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return solve(min, max + 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return solveJSDocInfo(f, max);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return solve(min, max) - Math.abs(f)) / 2.0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return factory.new Double(f, max), f);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return solve(min, max) - f.getImaginary(), initial);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return factory.newDefaultSolver(f, max).doubleValue() < min;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return solve(min, max) - f.getJSDocInfo(max));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return solve(min, max + 1) / initial;",
                "identical": false
            }
        ],
        "buggy_line": "return solve(min, max);",
        "fixed_line": "return solve(f, min, max);"
    },
    "Math-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "ret = Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ret = this.isNaN() &&rhs.isNaN();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ret = this.lhs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ret =Infinite.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ret = this.isNaN() &&rhs.isNaN()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ret =Infinite.doubleToRawLongBits(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ret = this.isNaN() && !Double.isNaN(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ret = median.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ret =rhs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ret = this.isNaN() && !Double.isNaN(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ret = Double.doubleToRawLongBits(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ret = this.isNaN() &&rhs.isInfinite();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ret = this.isNaN();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ret = this.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ret =Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ret = this.isNaN() &&rhs.getImaginary();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ret = rhs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ret = Character.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ret = this.Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ret = this.lhs.doubleToRawLongBits(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ret = formatDouble(lhs.getImaginary(),rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ret = Double.longBitsToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ret = 1.0 -rhs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ret = this.isNaN(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ret = NaN.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ret = this.isNaN() &&rhs.isInfinite(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ret = this.lhs.getBits();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ret = this.isNaN() && (lhs.doubleValue() == 0.0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ret = lengthToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ret = median.doubleToRawLongBits(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ret = lhs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.NEGATIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ret = this.isNaN() && !Double.isNaN(lhs.getImaginary());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ret = this.lhs.getBits() - rhs.getImaginary();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ret = this.isNaN() && rhs.getImaginary() == Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ret = start.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ret = this.number.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ret = this.isNaN() && (Double.isNaN(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ret = this.isNaN() && (lhs.getReal() == Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ret = this.last.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ret = new Double(lhs.getImaginary() + rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ret = this.Outline.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.POSITIVE_INFINITY));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.doubleToLongBits(rhs));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ret =red.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ret =attrs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ret = Integer.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ret = min.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ret = while (Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ret = this.isNaN() && (lhs.doubleValue() == Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ret =lhs.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ret = nodeName.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == 0.0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ret = getSuper.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ret = this.isNaN() && !Double.isNaN(lhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ret = this.axis.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ret = this.isNaN() && rhs.getImaginary() == Double.doubleToLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ret = dx.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ret = comment.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ret = provider.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ret = formatDouble(lhs.getImaginary(), rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.NEGATIVE_INFINITY));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ret = lhs.doubleToRawLongBits(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ret = -Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ret = range.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ret = left.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ret =getSource.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ret =mitUtils.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ret =rono.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ret =color.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ret =parsing.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Double.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ret = this.isNaN() &&rhs.isNaN()) ? Double.isNaN() : +1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ret = String.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ret = other.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ret = K.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ret = shell.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ret = days.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ret = 26.doubleToRawLongBits(rhs.getImaginary());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ret = this.LongBitsToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ret =String.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ret =marker.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ret =Interface.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ret =bit.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ret = formatDouble(lhs.getImaginary(),rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ret =nodeToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ret = this.isNaN() && (lhs.doubleValue() == 0.0 ? Double.doubleToLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ret =Add.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ret = total.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ret = this.isNaN() && !lhs.getImaginary();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ret = end.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ret = this.elseToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ret = format.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ret = this.isNaN() && (lhs.getImaginary() == Math.abs(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ret = Converter.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ret = regular.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ret = offset.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            }
        ],
        "buggy_line": "ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));",
        "fixed_line": "ret = (real == rhs.real) && (imaginary == rhs.imaginary);"
    },
    "Lang-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return foundDigit && !chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return foundDigit && !chars[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return foundDigit && !chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return foundDigit && !hasExp;+chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return foundDigit && !s.contains(chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return foundDigit && !chars[i] == 'l' || chars[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return foundDigit && !hasExp;+chars[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return ch >= '0' && foundDigit <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return foundDigit && !hasPreviousChar(chars[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return foundDigit && !chars[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return foundDigit && !hasExp;+chars[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return foundDigit && !hasExp; chars[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return foundDigit && !hasExp;+chars[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundDigit && !s.charAt(i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return foundDigit && !hasExp; chars[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i]\".equals(chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return foundDigit && !s.charAt(i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == '+' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit\".equals(chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == '+' || chars[i] == 'e' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return foundDigit && buffer[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return foundDigit && !hasExp; chars[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return foundDigit && !hasExp;+chars[i] == 'l' || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit\".equals(chars[i] == 'E') || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return foundDigit && !hasExp;+chars[i] == 'l' || chars[i] == 'e' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return foundDigit && !hasPreviousChar(chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return foundDigit && !s.equals(chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return foundDigit && !hasExp;\".equals(chars[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return foundDigit && !hasExp;+chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return foundDigit && buffer[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return foundDigit && !s.contains(chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return foundDigit && !hasExp;\".equals(chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit.getStandardOffset(chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return foundDigit && !hasPreviousChar(chars[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return foundDigit && !hasPreviousChar(chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E') Kit.charAt(i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return foundDigit && !hasExp; chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return foundDigit && !s.charAt(i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E') Kit.charAt(0) == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit.charAt(0) == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return foundDigit && buffer[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundDigit && !hasExp;\".equals(chars[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return foundDigit && !s.equals(chars[i][0]) == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return foundDigit && !chars[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return foundDigit && !hasExp;tt[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit.charAt(i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return foundDigit && !hasExp;args[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E')];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return foundDigit && !hasExp;args[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return foundDigit && !hasEncodingNames[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E')",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == '+' || chars[i] == 'E') Kit.charAt(i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return foundDigit && !isDigit(chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E')",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return foundDigit && !s.contains(chars[i][0]) == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == '+' || chars[i] == 'E') Kit.charAt(chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return foundDigit && buffer[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == '+' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return foundDigit && !s.charAt(i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == '+' || chars[i] == 'E') Kit.charAt(0) == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return foundDigit && !hasPreviousChar(chars[i] == '+' || chars[i] == '-') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return ch >= '0' && foundDigit <= '9') || chars[i] != 's' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 's' && chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return foundDigit && !hasExp;args[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') Kit\".equals(chars[i] == 'E')];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return foundDigit && !isDigit(chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return foundDigit && !hasExp;args[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit.getValues[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? buf[i] : foundDigit;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') || chars[i] == 'E')];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return foundDigit && chars[i] == 'l' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == '+' || chars[i] == 'E') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E')];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? foundDigit : foundDigit;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && !hasExp;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 : 0L;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E') Kit.charAt(2) != 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return foundDigit && !s.equals(chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return foundDigit && !chars[i] >= '0' && chars[i] <= '9') || chars[i] != 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 's' && chars[i] == 'E')];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') Kit\".equals(chars[i] == 'E')",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') || chars[i] == 'E')",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') ? 1 :\"+Integer.toHexString(chars[i] == 'E') break;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return foundDigit && chars[i] == 'l' || chars[i] == 's') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return foundDigit && !hasExp;\".equals(chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit\".equals(chars[i] == 'E') || chars[i] == 'E') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') || chars[i] == 'E')",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return foundDigit && !hasExp; chars[i] != 'l' && chars[i] == 's') || chars[i] == 'e' && chars[i] == 'E') Kit.getStandardOffset() == 'E') ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return foundDigit && !hasExp; chars[i] == 'l' || chars[i] == 'e' ? 1 : foundDigit;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return foundDigit && chars[i] == 'e' || chars[i] == 'E') ? 1 : foundDigit;",
                "identical": false
            }
        ],
        "buggy_line": "return foundDigit && !hasExp;",
        "fixed_line": "return foundDigit && !hasExp && !hasDecPoint;"
    },
    "Chart-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PathIterator iterator2 = p2.getPathIterator(null);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null), p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PathIterator iterator2 = (PathIterator) p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p1.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PathIterator iterator2 = (PathIterator) iterator2.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PathIterator iterator2 = sequence2.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PathIterator iterator2 = dataArea.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getPathIterator();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getStandardDeviation());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getnewChild(null));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PathIterator iterator2 = outIterator.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getStandardOffset());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.p2.getPathIterator(null), p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PathIterator iterator2 = new PathIterator(null);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PathIterator iterator2 = ctxt1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.p2.getPathIterator(null), p1.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getPathIterator(null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2))) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getTickLabelFont());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathedPathIterator(null), p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getnewChildCount());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.findPathIterator(null), p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getStandardDeviation());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.p2.getPathIterator(null), p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getnew static final PathIterator(null));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getExterns());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathedPathIterator(null), p2.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getTickLabelInsets());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getTranslatedIterator(null), p1.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p1.getWindingRule());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getStandardOffset());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getReporterIterator(null));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getArg2))) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null), p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PathIterator iterator2 = map1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PathIterator iterator2 = millis1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getArg1().findPathIterator(null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getArg1().computeValue(null);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getTransformedPathIterator(null);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2().getLineno());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getWindingRule());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p1.getStandardDeviation());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PathIterator iterator2 = && !p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.findPathIterator(null), p1.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getArg2().compareTo(p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getArg2();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getnewWallIterator(null), p2.getWindingRule());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PathIterator iterator2 = fnIterator.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PathIterator iterator2 = series1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.get dynamicIterator(null));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getLastIterator(null));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getTickLabelOffset());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getChildCount());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2().compute(null);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PathIterator iterator2 = out1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PathIterator iterator2 = p3.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getTickLabelName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getialLayer());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PathIterator iterator2 = beginIterator.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getParent());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getStandardDevNode());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PathIterator iterator2 = referenceIterator.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2().compute(null));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getArg1().add(null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p1.getnewChild(null));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PathIterator iterator2 = tick1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getTickLabelPaint());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PathIterator iterator2 = w1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PathIterator iterator2 =p1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null).getArg1().compute(null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2().clone());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PathIterator iterator2 = p1.getPathIterator(this.p2.getPathIterator(null), p2.getnewChild(null));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getReporterIterator(null));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PathIterator iterator2 = block.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getEnd())));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p3.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p1.getPathIterator(null));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getTickLabelAnchor());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.getTickLabelFont());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2())));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.get x1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p1.getStandardOffset());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PathIterator iterator2 = p1.getPathIterator(null), p2.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getnew static double[] {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PathIterator iterator2 = elements1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PathIterator iterator2 = p1.getPathIterator(d2.getPathIterator(null), p2.getArg2().getnewChild(null));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PathIterator iterator2 = more1.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PathIterator iterator2 = d2.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PathIterator iterator2 = outputIterator.getPathIterator(null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PathIterator iterator2 = p1.getPathIterator(new PathIterator(null), p2.get dynamicIterator(null));",
                "identical": false
            }
        ],
        "buggy_line": "PathIterator iterator2 = p1.getPathIterator(null);",
        "fixed_line": "PathIterator iterator2 = p2.getPathIterator(null);"
    },
    "Mockito-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException(e)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e) != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "catch (Assertion.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getMessage(), e) != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getText(), e) != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "catch (Assertion.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "catch (org.mockito.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.toString())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getName(), e) != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent });",
                "identical": false
            },
            {
                "k": 19,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getBefore(), e) != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException(e.getName(), e) != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "catch (Response.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getDeclaringClass().getName())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getDeclaredMethods()))) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getLocation()), e);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getDeclaringClass().getName())) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentArguments[i])) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e) != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getDeclaringClass().getName())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.toString(), e) != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException(e.getMessage(), e) != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "catch (Assertion.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e) != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "catch (Response.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "catch (Object.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getMessage(), e) != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getWanted(), e) != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getDeclaredMethods()))) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getArgumentsAreDifferentArguments(e)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.geters(), e) != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "catch (E.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getMessage())) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "catch (mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "catch (!org.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "catch (!org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.toString())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e. parameterTypes)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getArgs(), e) != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "catch (mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getMessage(), e) != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getArgumentsAreDifferentArgumentsAreDifferentArguments[i])) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "catch (Constructor.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentArguments());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException e) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getDeclaredMethods()))) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.ArgumentsAreDifferent);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.required) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "catch (Assertion.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getMessage(), e) != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentArguments[i]) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getMessage(), e);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getText(), e) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentArgumentsAreDifferentArguments(e)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getDeclaringClass().getName(), e) != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getName(), e) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "catch (Assertion.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.toString())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "catch (Request.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException e.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getArgumentsAreDifferent);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getMessage())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getArgumentsAreDifferentArguments());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getDeclaredMethods()[0]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferent);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException(e);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getArgs())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getArgumentsAreDifferentArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentArguments[i], e.getName())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getText())) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(error.getLocation()), e);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getArgumentsAreDifferentArguments(e), e) == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentException e) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getText(), e) != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent){",
                "identical": false
            },
            {
                "k": 85,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getText(), e) == null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "catch (ids.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getText(), e) != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.getArgumentsAreDifferentArgumentsAreDifferentArguments(e.toString()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e)});",
                "identical": false
            },
            {
                "k": 90,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e) == null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e.getActual(), e) != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getName(), e);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getMethod());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "catch (AssertionError.mockito.exceptions.verification.junit.ArgumentsAreDifferentException(e)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "catch (Request.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, e.toString())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentException(e.ArgumentsAreDifferent);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "catch (Assertion.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e.getText(), e) != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent(e, error.getArgumentsAreDifferentArgumentsAreDifferentArguments[i])) {",
                "identical": false
            }
        ],
        "buggy_line": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
        "fixed_line": "catch (AssertionError e) {"
    },
    "Closure-130": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (name.globalSets > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (name.globalSets > 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (name.globalSets > 0 && name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(parent)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (name.globalSets > 0 && name.refs != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.getString(), false)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.length()))) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (ref.type == Type.ALIASING_GET && name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (name.globalSets == 0 && name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ancestor)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(owner, parent)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ref)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclaredInferred()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (name.type == Type.ALIASING_GET && name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (name.globalSets > 0 && name.length() == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (name.type == Type.ALIASING_GET && ref.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name.globalSets > 0 && name. localSets > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (name.globalSets == 1 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(className)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.getString(), true)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(mapping.name.length()))) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.length()))) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (name.refs != null && name.length() > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (name.globalSets > 0 && name.docInfo.isExtern()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (name.mode == Type.ALIASING_GET && name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.globalSets > 0 && name.attributeCount == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.getString(), false)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (name.globalSets > 0 && name.parent().equals(scope.getName())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(variableName)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ns.name) ||",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.getString())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (name.globalSets > 0 && name.type == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.getString(), false)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ns.name)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (name.refs != null && name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.desc)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.getString(), replacement)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ns.name) == false) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(annotated)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (name.globalSets > 0 && name.widthSets > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.getString(), parent)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.desc)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (name.globalSets > 0 && name.accessorCount == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.getString())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.desc)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.parent)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.getString(), true)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (name.globalSets > 0 && name.docBuilder.isExported(name) ||",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclaredInferred()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(externallyDefined)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ns.name.length()))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(mapping.name.length() || name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(err.name.length()))) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(desc)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (name.globalSets > 0 && name.docBuilder.isExported(name)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.ownerType, parent)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(toName)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (type == Type.ALIASING_GET && ref.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name.globalSets > 0 && name. RegularCount == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (name.globalSets == 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.isLocal()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(t, n, parent)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.getString(), true)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (name.globalSets == 0 && name.scope.isDeclared(name.name.length()))) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(paramName)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (name.globalSets > 0 && name.Scope().equals(scope.name)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.indexOf('$') == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(actual)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (ref.type == Type.ALIASING_GET && name.scope.isDeclared(name.getString(), ref, parent)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(mapping.name.name.length()))) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.indexOf(') == false) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (name.type == Type.ALIASING_GET && name.scope.isDeclared(parent)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (name.globalSets > 0 && name.docBuilder.isLocal()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name, false)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(t, parent)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (ref.type == Type.ALIASING_GET && ref.scope.isDeclared(name.parent)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name) == false) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.length() || name.scope.isLocal()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.name.charAt(0))) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name.globalSets > 0 && name.mapping.length() == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.getString(), parent)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (name.globalSets == 0 && name.scope.isDeclared(parent)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(name.getString(), ref, parent)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(ns.name, false)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (name.globalSets > 0 && name.docBuilder.isNoSideEffects()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (name.globalSets > 0 && name.canEliminate()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (name.globalSets > 0 && name.Buffer().length() == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(NoInferred)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(props.name.length()))) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (ref.type == Type.ALIASING_GET && name.scope.isDeclared(name.getString())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(it.name.length()))) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(argName)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(attr == false)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(callName)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (name.globalSets > 0 && name.scope.isDeclared(t, false)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (name.globalSets == 1 && name.localSets == 0 &&",
        "fixed_line": "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&"
    },
    "Closure-114": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (!isAssign(lhs)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (!isAssign(parent)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (!isAssign(n)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (!n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (!lhs.hasChildren()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (!n.hasChildren()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (!NodeUtil.isAssign(n)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (!NodeUtil.isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (!lhs.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (!lhs.getLastChild().getString().equals(\"prototype\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (!lhs.hasOneChild()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (!isExprAssign(lhs)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (!lhs.getFirstChild().hasChildren()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isVar(n)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (!JSSpace(lhs, n.getFirstChild().getType() == Token.ASSIGN)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (!isSafeAssign(n, parent)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (!isDeclaration(n)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (!n.getType() == Token.ASSIGN && parent.getFirstChild() != n) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (!isNodeUtil.isAssign(n)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (!isSafeAssign(n, t)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (!lhs.getLastChild().getString().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (!n.getFirstChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (!JSSpace(lhs, n.getFirstChild().getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isVar(n)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (!NodeUtil.isExpressionNode(n)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (!n.getType() == Token.ASSIGN && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (!n.getType() == Token.ASSIGN && parent.hasChildren()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (!lhs.getNext().hasChildren()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (!n.getType() == Token.ASSIGN && parent.getLastChild() != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (!lhs.getLastChild().getString().equals(\"__\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (!n.getType() == Token.ASSIGN &&",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && parent.getFirstChild() != n) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (!isSafeAssign(parent, t)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (!lhs.getLastChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (!n.getLastChild().getString().equals(\"prototype\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (!lhs.getLastChild().getString().equals(\"*\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (!gramps.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (!n.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (!isAssign(n, parent)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isExpressionNode(n)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (!lhs.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (!JSS\".equals(n.getFirstChild().getString())) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (!n.getLastChild().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (!lhs.getFirstChild().getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (!n.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (!lhs.getLastChild().getString().equals(varName)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (!isSafeAssign(lhs)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (!lhs.getLastChild().getString().equals(ns)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (!isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (!isNodeUtil.isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && parent.getLastChild() != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (!n.getJSDocInfo().isNoSideEffects()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isExpressionNode(n)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (!n.getFirstChild().getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isFunctionDeclaration(n)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (!lhs.getNext() != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (!child.isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (!lhs.getLastChild().getString().equals(paramNode, t)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isFunctionDeclaration(n)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isExprCall(n)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && NodeUtil.isExprAssign(n)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (!JSSpace(lhs, n.getFirstChild().getType() == Token.NAME)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && NodeUtil.isVar(n)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (!isDefined) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (!n.getType() == Token.ASSIGN &&lhs.hasChildren()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (!isAssign(n, t)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isAssign(n)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (!isNodeUtil.isExpressionNode(n)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (!n.getType() == Token.ASSIGN && n.hasChildren()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (!lhs.getFirstChild().hasChildren() && NodeUtil.isVar(n)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (!n.getType() == Token.ASSIGN && isExprAssign(lhs)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (!isJSSpace(lhs)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (!n.getJSDocInfo().isAssign(lhs)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (!n.getType() == Token.ASSIGN && t.hasChildren()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (!lhs.getJSDocInfo().isAssign(n)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (!isJSSpace(n, parent)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isVar(lhs)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (!n.getFirstChild().hasChildren()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (!isExpressionNode(n, parent)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && parent.hasChildren()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (!lhs.getLastChild().getString().equals(qName)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (NodeUtil.isAssign(n)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isName(n)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (!n.getNext() != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (!n.getType() == Token.ASSIGN && lhs.hasChildren()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (!n.isExprAssign(lhs)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (!n.getLastChild().getString().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (!lhs.getLastChild().getString().equals(elseName)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (!n.getType() == Token.ASSIGN &&lhs.hasOneChild()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (!n.getType() == Token.ASSIGN && NodeUtil.isFunction(n)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isName(n.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (!n.getString().equals(paramNode, t)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (!JSSpace(lhs)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (!n.getChildCount() && NodeUtil.isExprCall(n)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (!lhs.getType() == Token.ASSIGN && parent.getFirstChild() == n) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (!(parent.isCall() && parent.getFirstChild() == n)) {"
    },
    "JacksonCore-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "char c = str.charAt(i);",
                "identical": true
            },
            {
                "k": 2,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "char c = text.charAt(i);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "char c = separatorChars.charAt(i);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "char c = buffer.charAt(i);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "char c = value.charAt(i);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "char c = separatorChars.charAt(i++);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "char c = separator.charAt(i);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "char c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "char c = text.charAt(i++) - '0';",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char c = separatorValue.charAt(i);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "char c = input.charAt(i);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "char c = separatorValue.charAt(i++);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "char c = separator[i++];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "char c = separatorChar.charAt(i);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "char c = entries.charAt(i);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "char c = separatorLine.charAt(i);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "char c = separatorString.charAt(i);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "char c = value.charAt(i++);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "char c = (_inputPtr < len) ? 0 : _input.charAt(i);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "char c = node.charAt(i);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "char c = buffer[i++];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "char c = s.charAt(i);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "char c = separatorChars.charAt(i++) - '0';",
                "identical": false
            },
            {
                "k": 25,
                "patch": "char c = original.charAt(i);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "char c = (_inputPtr < len) ? 0 : str.charAt(i);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "char c = key.charAt(i);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "char c = input.charAt(i++);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "char c = (_inputPtr < len) ? i : str.charAt(i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "char c = separatorStr.charAt(i);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "char c = (_inputPtr < len) ? _input : str.charAt(i);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "char c = separatorLine.charAt(i++);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "char c = (_inputPtr < len) ? -1 : _input.charAt(i);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "char c = separator.charAt(i++);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "char c = (_inputPtr < len) ? i : _input.charAt(i);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "char c = separatorSequence.charAt(i);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "char c = (_inputPtr < len) ? -1 : str.charAt(i);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "char c = separator[i++].charAt(i);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : quoteChar;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "char c = separatorBuffer.charAt(i);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : empty;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "char c = buffer[Character.charAt(i++);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "char c = _input.charAt(i);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "char c = (_inputPtr < len) ? i :s.charAt(i);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : str.charAt(i);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "char c = separator .util.ArrayList(i);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : out.charAt(i);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : sb.charAt(i);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : ('0' + i;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "char c = separatorAnnotationIntrospector.charAt(i);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "char c = ch.charAt(i);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "char c = separatorImpl.charAt(i);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "char c = separator .util.ArrayList(str.charAt(i));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "char c = Character.charAt(i);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "char c = separatorField.charAt(i);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "char c = separatorrapping.charAt(i);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "char c = (_inputPtr < len) ? i : empty.charAt(i);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "char c = separator : len.charAt(i);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "char c = (_inputPtr < len) ? i : MAX_VALUE_iterator.charAt(i);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : b.charAt(i);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "char c = (_inputPtr < len) ? -1 : b.charAt(i);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "char c = separatorOnce.charAt(i);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "char c = separatorString.charAt(i++);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "char c = id.charAt(i);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : String.charAt(i);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "char c = (_inputPtr < len) ? i : buffer.charAt(i);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "char c = (_inputPtr < len) ? i : b.charAt(i);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : s.charAt(i);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "char c = (_inputPtr < len) ? 0 : _mixin.charAt(i);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : '0';",
                "identical": false
            },
            {
                "k": 71,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] :iator.charAt(i);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "char c = (_inputPtr < len) ? i : MAX_VALUE_SEPARATOR.charAt(i);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "char c = (_inputPtr < len) ? 0 : _mixin.get(i);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "char c = separatorStr.charAt(i++);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] :s.charAt(i);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "char c = separator id.charAt(i);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "char c = separatorMargin.charAt(i);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "char c = separatorValue.charAt(i++) - '0';",
                "identical": false
            },
            {
                "k": 79,
                "patch": "char c = (_inputPtr < len) ? i : MAX_VALUE_INSETS[i++];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i] : str.charAt(i);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "char c = (_inputPtr < len) ? -1 : ((c + 1) * 10) + c);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i] : quoteChar;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "char c = separatorColon.charAt(i);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "char c = buffer[++];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "char c = (_inputPtr < len) ? _input : b.charAt(i);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "char c =HASH_SIZE.charAt(i);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : separatorChar;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "char c = separatorObjectId.charAt(i);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "char c = (_inputPtr < len) ? i : with.charAt(i);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : getNextChar;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "char c = token.charAt(i);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "char c = (_inputPtr < len) ? 0 : _inputBuffer[i++];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "char c = (_inputPtr < len) ? _inputEnd : str.charAt(i);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "char c = number.charAt(i);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "char c = (_inputPtr < len) ? i : predicate.charAt(i);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i++] : i;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "char c = separatorStrength.charAt(i);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "char c = (_inputPtr < len) ? _inputBuffer[i] : String.charAt(i);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "char c = (_inputPtr < len) ? i : quoteChar;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "char c = separator1.charAt(i);",
                "identical": false
            }
        ],
        "buggy_line": "char c = str.charAt(i++);",
        "fixed_line": "char c = str.charAt(i);"
    },
    "Jsoup-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String[] preserveWhitespace = {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String[] preserveWhitespace = { \"preserveTry\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String[] preserveWhitespace = { \"arguments\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String[] preserveWhitespace = { \"arguments\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String[] preserveWhitespace = { \"nthetic\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String[] preserveWhitespace = { \"preserveTry\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String[] preserveWhitespace = { \"User\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String[] preserveWhitespace = { \"\u813a\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String[] preserveWhitespace = { 'A'\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String[] preserveWhitespace = { \"navigate\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String[] preserveWhitespace = { \"preserveAll\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String[] preserveWhitespace = { \"nthetic\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String[] preserveWhitespace = { \"translate\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String[] preserveWhitespace = { \"Rolling\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String[] preserveWhitespace = { \"regexp\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String[] preserveWhitespace = { \"matching\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String[] preserveWhitespace = { \" dirName\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String[] preserveWhitespace = { \" shrink\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String[] preserveWhitespace = { \"=?\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String[] preserveWhitespace = { 'A'\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String[] preserveWhitespace = { \"Db\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String[] preserveWhitespace = {\", \"pla minus\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\", \"title\"};\", \"title\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\").title\", \"title\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String[] preserveWhitespace = { \"\u8d0a\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String[] preserveWhitespace = { \"\u813a\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String[] preserveWhitespace = { \" designing\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String[] preserveWhitespace = { \"\u206f\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String[] preserveWhitespace = { \"\ud801\ude00\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String[] preserveWhitespace = { \"User\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\"};\", \"title\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String[] preserveWhitespace = { \"ward\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String[] preserveWhitespace = { \"DIRECT\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String[] preserveWhitespace = { \" Inv\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String[] preserveWhitespace = { \" scraper\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String[] preserveWhitespace = { \"preserveAll\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String[] preserveWhitespace = { \"rary\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String[] preserveWhitespace = { \"preserver\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String[] preserveWhitespace = { \" componentDid\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String[] preserveWhitespace = { \" Constant\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String[] preserveWhitespace = { \" CSV\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String[] preserveWhitespace = { \"JECT\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String[] preserveWhitespace = { \"\u1d1c\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String[] preserveWhitespace = { \"poll\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String[] preserveWhitespace = { \"idge\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String[] preserveWhitespace = { \"\u2cd6\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String[] preserveWhitespace = { \" KeyStore\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String[] preserveWhitespace = { true\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String[] preserveWhitespace = { \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String[] preserveWhitespace = { \"0123456789\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String[] preserveWhitespace = { \"\u1d11\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String[] preserveWhitespace = { \"composite\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String[] preserveWhitespace = { \"%=\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\"));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String[] preserveWhitespace = { \"navigate\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String[] preserveWhitespace = { \"\u813a\", \"title\", \"title\", \"title\"};\", \"title\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String[] preserveWhitespace = { \"rray\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String[] preserveWhitespace = { \" stmt\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String[] preserveWhitespace = { \" DatabaseError\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String[] preserveWhitespace = { \"middle\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String[] preserveWhitespace = { \"\u2cd6\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String[] preserveWhitespace = { \"regex\", \"title\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String[] preserveWhitespace = {\", \"arguments\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String[] preserveWhitespace = {\", \"User\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\", \"title\").title\", \"title\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\", \"title': \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String[] preserveWhitespace = { \"arguments\", \"title\", \"title\", \"title\"};\", \"title\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String[] preserveWhitespace = { \"translate\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String[] preserveWhitespace = { \"atural\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String[] preserveWhitespace = { \"regexp\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String[] preserveWhitespace = { \" samples\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\", \"title\"));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String[] preserveWhitespace = { \"\u0f4f\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String[] preserveWhitespace = { \"\u0fa8\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\" : \"title\", \"title\"};\", \"title\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String[] preserveWhitespace = { \"=?\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String[] preserveWhitespace = {\", \"regexp\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String[] preserveWhitespace = { \" CSV\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\", \"title stage\", \"title\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String[] preserveWhitespace = { \"arguments\", \"title\", \"title\", \"title\").title\", \"title\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String[] preserveWhitespace = { \"HOOK\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String[] preserveWhitespace = { \"comes\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String[] preserveWhitespace = { \"\u5300\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String[] preserveWhitespace = { \"composite\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String[] preserveWhitespace = \"preserveTry\", \"title\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String[] preserveWhitespace = { \"preserveTry\", \"title\", \"title': \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String[] preserveWhitespace = { \"\u8d22\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String[] preserveWhitespace = { \"Demand\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String[] preserveWhitespace = { \"pla\", \"title\", \"title\" : \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String[] preserveWhitespace = {\", \"pla\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String[] preserveWhitespace = { \"\u8d0a\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String[] preserveWhitespace = { \"\u2cb6\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String[] preserveWhitespace = { \" resid\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String[] preserveWhitespace = { \"oracle\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String[] preserveWhitespace = {0, \"pla\", \"title\", \"title\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String[] preserveWhitespace = \"preserveAll\", \"title\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String[] preserveWhitespace = { \"MARKER\", \"title\", \"title\");",
                "identical": false
            }
        ],
        "buggy_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
        "fixed_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};"
    },
    "Closure-92": {
        "fixes": [
            {
                "k": 1,
                "patch": "int indexOfDot = nameNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int indexOfDot = call.indexOf('.');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int indexOfDot = Node.newString(Token.NAME, name);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int indexOfDot = functions.indexOf('.');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int indexOfDot = Node.newString(Token.NAME, name));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int indexOfDot = mode.indexOf('.');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int indexOfDot = insns.indexOf('.');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int indexOfDot = cur.indexOf('.');",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int indexOfDot = Node.newString(Token.NAME, varName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int indexOfDot = nameNode.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int indexOfChild = nameNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int indexOfDot = first.indexOf('.');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int indexOfDot = enc.indexOf('.');",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int indexOfDot = module.indexOf('.');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int indexOfDot = Node.newString(Token.NAME, EXTERN_OBJECT_PROPERTY_STRING);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int indexOfDot = Node.newString(Token.NAME, \"undefined\"));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int indexOfDot = prefix.indexOf('.');",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int indexOfDot = providedNodes.indexOf('.');",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int indexOfDot = input.indexOf('.');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int indexOfDot = externNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int indexOfDot = Node.newString(Token.NAME, call);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int indexOfDot = messageNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int indexOfDot = nameNode.getString();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int indexOfDot = callNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int indexOfDot =BinaryNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int indexOfDot = name.lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int indexOfDot = Node.newString(Token.NAME, \"\"));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int indexOfDot = compiler.getType() == Token.NAME;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int indexOfDot = nameNode.getFirstChild().getType();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int indexOfDot = project.indexOf('.');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int indexOfDot = Node.newString(Token.NAME, callName);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int indexOfDot =\\\\.indexOf('.');",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int indexOfDot =qn.indexOf('.');",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int indexOfDot = curNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int indexOfDot = Node.newString(Token.NAME, argNames);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int indexOfDot =OnChange(t, n.getModule(), call);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int indexOfDot = Node.newString(Token.NAME, labelModule);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int indexOfDot =cur.indexOf('.');",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int indexOfDot = Node.newString(Token.NAME, name).lastIndexOf('.');",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int indexOfDot = Node.newString(Token.NAME, nameNode.getString());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int indexOfDot = Node.newString(Token.NAME,OfYear));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int indexOfDot = Node.newString(Token.NAME, name).indexOf('.');",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int indexOfDot =ContainNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int indexOfDot = Node.newString(Token.NAME, nameNode.getString()));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int indexOfDot = usable.indexOf('.');",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int indexOfDot = nameNode.getFirstChild().indexOf('.');",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int indexOfDot =lined.indexOf('.');",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int indexOfDot =uNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int indexOfDot = namespace.indexOf('.');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int indexOfDot = Node.newString(Token.NAME, name).lastModule);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int indexOfDot = Node.newString(Token.NAME, VAR_OBJECT_PROPERTY_STRING);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int indexOfDot = Node.newString(Token.NAME, retVal);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int indexOfDot = Node.newString(Token.NAME, name).length() - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int indexOfDot =OnChange(t, n.getModule(), VARNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int indexOfDot = strs.indexOf('.');",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int indexOfDot = Node.newString(Token.NAME, argName);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int indexOfDot =OnChange(t, n.getModule(), ns);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int indexOfDot =rvalue.indexOf('.');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int indexOfDot = Node.newString(Token.NAME, ns);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int indexOfDot = nameNode.getNext().indexOf('.');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int indexOfDot = Node.newString(Token.NAME, methodName));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int indexOfDot = pattern.indexOf('.');",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int indexOfDot = Node.newString(Token.NAME, callNode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int indexOfDot = columnNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int indexOfDot = 12.indexOf('.');",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int indexOfDot =OnChange(t, n.getModule(), module);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int indexOfDot = value.indexOf('.');",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int indexOfDot =close.indexOf('.');",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int indexOfDot = pivot.indexOf('.');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int indexOfDot = Node.newString(Token.NAME, functions);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int indexOfDot =OnChange.indexOf('.');",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int indexOfDot = 512Node.indexOf('.');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int indexOfDot = nameNode.getFirstChild().getType() == Token.NAME;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int indexOfDot = tb.indexOf('.');",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int indexOfDot = Node.newString(Token.NAME, propNameNode.getString());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int indexOfDot = Node.newString(Token.NAME, propNameNode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int indexOfDot = compiler.getType() == Token.EXPR_RESULT);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int indexOfDot =Assignment.indexOf('.');",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int indexOfDot = compiler.getType() == Token.EXPR_RESULT;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int indexOfDot = workNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int indexOfDot =copyNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int indexOfDot = existNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int indexOfDot =ann.indexOf('.');",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int indexOfDot = Node.newString(Token.NAME, VAR_RESULT, call);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int indexOfDot = Node.newString(Token.NAME,uert_EFFECT_ANNOTATION);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int indexOfDot =ATIONS.indexOf('.');",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int indexOfDot = Node.newString(Token.NAME, propAlias);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int indexOfDot = Node.newString(Token.NAME, iModule);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int indexOfDot = 11.indexOf('.');",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int indexOfDot = Node.newString(Token.NAME, EXTERN_OBJECT_PROPERTY_ERROR, VAR);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int indexOfDot = cc.indexOf('.');",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int indexOfDot = Node.newString(Token.NAME, call.getName()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int indexOfDot = compiler.getType() == Token.VAR;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int indexOfDot = scope.indexOf('.');",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int indexOfDot = zoom.indexOf('.');",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int indexOfDot =OfYear.indexOf('.');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int indexOfDot = nameNode.getFirstChild().getString();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int indexOfDot = userIdNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int indexOfDot = Node.newString(Token.NAME, EXTERN_OBJECT_PROPERTY_ERROR, newModule);",
                "identical": false
            }
        ],
        "buggy_line": "int indexOfDot = namespace.indexOf('.');",
        "fixed_line": "int indexOfDot = namespace.lastIndexOf('.');"
    },
    "Closure-73": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c > 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c > 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c > 0x1f && c < 0x7f) {",
                "identical": true
            },
            {
                "k": 4,
                "patch": "if (c == 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c > 0x1f) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c >= 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c >= 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c == 0x1f) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c >= 0x1f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c >= 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c > 0x1f && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c >= 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c > 0x1f || c < 0x7F) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c > 0x7F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c == 0x1F && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c >= 0x7F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c >= 0x1f && c < 128) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c >= 0x1f && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c >= 0x001' && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c == 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c >= 0x1f) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c >= 0x20 || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c == 0x1F && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c >= 0x1f && c <= 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c >= 0x7f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c > 0x1F && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c > 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c >= 0x1f && c <= '9') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c >= 0xEncoder && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c <= 0x1F && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c >= 0x1f && c < '8' && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c >= 0x1f && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c == 0x1f && c < 0x7f) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c > 0x1f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c > 0x1f && c < 0x7f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c > 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c >= 0x04f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c <= 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON-102] Allow forced escaping if non-ASCII (etc)",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c >= 0x01 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c >= 0x68 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c > 0x1f) { // 0x1F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c > 0x1f) { // If we didn't really need 6 bytes at 0x1F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c < 0x1f || c > 0x7F) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c >= 0x6f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c > 0x1f) { // If we didn't really need a >= 0x1F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c > 0x1f) { // If we didn't really need 6 bytes but...",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c > 0x1f) { // illegal, can do we't really need a >= 0x1F && c <= 0x7F)",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c >= 0x100 && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c >= 0x7f && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c < 0x1F && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c <= 0x1F && c >= 0x7f) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c >= 0xEncoder && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c > 0x1f) { // illegal, can do we't really need a >= 0x1F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c >= 0x80) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c < 0x1F && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c >= 0x00f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c == 0x1f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c > 0x1f) { // If we didn't really need a >= 0x1F && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c > 0x1f) { // height < 0x1F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c == 0x1f || c == 'l' || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c > 0x1f) { // fine, just needs 2 spaces per [JACKSON-102] Allow forced escaping if non-ASCII (etc)",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c > 0x1f) { // If so, just needs 2 spaces per [JACKSON-102] Allow forced escaping if non-ASCII (etc)",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c > 0x1f) { // illegal, just needs 2 spaces per [JACKSON-102] Allow forced escaping if non-ASCII (etc)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON: \" 3, 0x1 & 0x7F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c >= 0x1000f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c >= 0xWeekF && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c >= 0x100f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c == 0x1F && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON: \" 3, 0x7F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c > 0x1f) { // remove the end?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c > 0x1f) { // illegal, can do we't really need 6 bytes at 0x1F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c > 0x1f) { // If we didn't really need a >= 0x1F && c <= 0x7F)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c >= 0x7f || c < 0x7f) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c > 0x1f) { // illegal, can do we't really need 6 bytes but...",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON: \" 3, 0x1F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c >= 0x001' && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c == '\\r' || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c > 0x1f) { // remove the end-of-input",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c >= 0xDigit && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c > 0x1f) { // If we didn't really need 6 bytes at 0x1 & 0x7F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c > 0x1f) { // If we didn't really need 6 bytes at 0x1 & 0x7F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c > 0x1f) { // height < 0x1F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c > 0x1f) { // If we didn't really need 6 bytes at 0x1F && c < 0x7f)",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c >= 0x1f && c < 256) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON-ASCII (etc)",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON: \" 3, 0x7F && c < 0x7F)",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c >= 0x1F && c <= 0x7F) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c > 0x1f) { // illegal, can do we't really need 6 bytes",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c >= 0x1f && c < 1.0f) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c >= 0x matching && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c > 0x1f) { // If so, can do we have room for output?",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c >= 0x1f && c <= 0x7f || c < 0x7F) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c > 0x1f) { // illegal, as per [JACKSON: \" 3, 0x1F && c < 0x7F) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c > 0x1f) { // remove optional colon",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c >= 0xPassed && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c > 0x1f) { // If we didn't really need 6 bytes at 0x1F && c < 0x7F)",
                "identical": false
            }
        ],
        "buggy_line": "if (c > 0x1f && c <= 0x7f) {",
        "fixed_line": "if (c > 0x1f && c < 0x7f) {"
    },
    "Chart-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (dataset == this.plot.getDataset(index)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == TableOrder.BY_COLUMN) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != null)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == TableOrder.BY_INDEX.BY_ROW) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (dataset == this.plot.getDomainOrder() || series.getRowCount() == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getRowCount() == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowCount() == null)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != null)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getColumnCount() != TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (dataset == this.plot.getDomainOrder() || series.getRowCount() == TableOrder.BY_COLUMN) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getRowCount() == TableOrder.BY_COLUMN) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (dataset == this.plot.getRowCount()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != index)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series.getRowCount())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowCount() == null)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (dataset == this.plot.getDomainOrder() || series.getRowCount() == TableOrder.BY_INDEX.BY_ROW) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (dataset == this.dataExtractOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (dataset == this.plot.getDomainOrder() || index == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (dataset == this.plot.getIndexOf(index)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowIndex() != null)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || dataset.equals(index)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == TableOrder.BY_INDEX.BY_COLUMN) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getRowCount() == TableOrder.BY_INDEX.BY_ROW) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_COLUMN) || (dataset.getColumnCount() == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == RectangleEdge.BOTTOM) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != insn.getColumnCount())) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getColumnCount() != TableOrder.BY_COLUMN) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (dataset.getColumnCount() != series.getColumnCount()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (dataset == this.plot.geterializationOrder() || dataset == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getColumnCount() != TableOrder.BY_INDEX.getColumnCount()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowCount() == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_COLUMN) || (dataset.getColumnCount() != null)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getColumnCount() != 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != getSeriesCount())) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (dataset == this.plot.getDomainOrder() ||InvalidIndex == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() !=ASCENDING)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != result.getColumnCount())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (rowCount == 0 || dataset.getItemCount() != series.getColumnCount()) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || dataset.equals(dataset.getColumnCount())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowCount() != null)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series.getRowCount()) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == series.getRowCount())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowKeys().equals(index)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == XYCoordinateType.RELATIVE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_COLUMN) || (dataset.getColumnCount() != series.getRowCount())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series.getColumnCount())) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series.getColumnCount())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == 0)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (rowCount == 0 || this.plot.getRowCount() == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series.getRowCount())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getKeys().equals(index)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getEdgeCount() == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnIndex(index)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_COLUMN) || (dataset.getRowCount() == null)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == TableOrder.BY_INDEX.dataExtractOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (dataset == this.plot.getDomainOrder() || result == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != index)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == index)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (dataset.getRowCount() == this.plot.getIndexOf(index)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (dataset == this.plot.getDomainOrder() || item == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() !=ArgumentCount())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || dataset.equals(index)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != 0)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (dataset == this.plot.getDomainOrder() || series == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getEdgeCount() != null)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == DomainOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (rowCount == 0 || dataset.getRowCount() == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (dataset == this.plot.getDomainOrder() || series.getRowCount() == TableOrder.BY_INDEX.BY_COLUMN) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getLength() != null)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() !=ASCENDING)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != getListCount())) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != size)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getColumnCount() != result.getColumnCount()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (dataset == this.plot.getDomainOrder() || plot.getColumnCount() != graph.getColumnCount()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != NONE)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowIndex() != null)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() != series.getColumnIndex(index)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getinsets() != null)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == 0)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (dataset.getRowCount() == this.dataExtractOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (dataset == this.plot.getDomainOrder() || dataset == XYCoordinateType.BY_ROW) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == null)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_COLUMN) || (dataset.getColumnCount() != index)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (dataset == this.plot.getColumnCount()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getRowCount() == 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getKeys().equals(index)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (dataset == this.plot.getDataset(this.dataExtractOrder == TableOrder.BY_COLUMN) || (dataset.getColumnCount() != series.getRowCount()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (dataset == this.plot.getDomainOrder() == TableOrder.BY_ROW) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (dataset == this.plot.getIndexOf(this.dataExtractOrder == TableOrder.BY_ROW) || (dataset.getColumnCount() == series.getRowCount())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (dataset != null) {",
        "fixed_line": "if (dataset == null) {"
    },
    "Lang-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (str.endsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (str.startsWith(\"x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (str.length() == 0x1F && str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (str.startsWith(\"0x\") || str.endsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (str.startsWith(\"y\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (str.startsWith(\"-0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (str.length() == 0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length()+\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means 'a' != Integer.valueOf(str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // doesn't look like a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (str.length() == 0x1F && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (str.startsWith(\"\", str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // it's some QName as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length()+\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (str.startsWith(\"E\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (str.length() == 0x20 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (str.length() == 0x000 && str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means '\"+str.length() == 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // same as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // ze as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x7F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (str.startsWith(\"\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (str.startsWith(\"0) || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (str.length() == 0x0F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // doesn't need to be easy as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { //Amount as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (str.length() == 0x1F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() > 0x7F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // true as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means '\"+str.length() == 0x20 || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty Strings are simplest to create a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && !\"\".equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && !all\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x0F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (str.length() == 0x0f || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // boolean as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\"))) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // String means '\"+str.length() == 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be one byte as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means '\"+str.length() == 0x0F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x7F && !all\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty Strings are simplest to be easy as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x0 OBJECT || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // doesn't need to be negated.endsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // raw height; use a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x1F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // String means 'a' != Integer.valueOf(str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && !Character.isLetterOrDigit(str.charAt(0))) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // String as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means 'a' != Integer.MIN_VALUE && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x7F && !\"\".equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String meaning \" + str.toUpperCase().startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x0;}-\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (str.length() == 0x0F && str.startsWith(\"-0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means '\"+str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means '\"+str.length() == 0x1F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // text to add a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (str.startsWith(\"0x\") || str.indexOf(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty Strings are simplest to be a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() - 1) < 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x0F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && !Character.isDigit(str.charAt(0))) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (str.startsWith(\"E0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x1F && !\"\".equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (str.length() == 0x20 || str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x7F && !Character.isLetterOrDigit(str.charAt(0))) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x1F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x0s\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x0;}-\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // it's some code duplication here as a valid number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() - 1) < 0x0F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means 'a' != Integer.valueOf(str.length()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (str.startsWith(\"0.x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x0toString().startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means 'a' != Integer.class; can't be negated.endsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x7F && !Character.isLetterOrDigit(str.charAt(0)))) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length()) < 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (str.startsWith(\" legalx\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // empty String means '\"+str.length() == 0x7F && str.charAt(str.length() - 1) == '-' || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // doesn't look like a valid number (numerator: str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x0-\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // 0x\"+Integer.toHexString(str.length() == 0x0F && !\"\".equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0 means \" + str.toUpperCase().startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() > 0x7F && !all\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() - 37, value.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // doesn't look like a small number (str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (str.startsWith(\"msg.\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() > 0x7F && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() - 1) < 0x0x\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length()+\" vs \"+str.length() == 0x7F && !str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() == 0x7F && !Character.isDigit(str.charAt(0))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) { // should be 0x\"+Integer.toHexString(str.length() > 0x7F && !\"\".equals(\"-0x\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
        "fixed_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {"
    },
    "Mockito-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (typeParameterType instanceof Type) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (typeToEvaluate instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (typeParameterType instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (typeParameters.containsKey(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (typeParameters instanceof Type) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (typeParameterType instanceof GenericArrayType) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (typeParameters[i] instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (typeParameterType.isArray()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (typeParameters.length > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (typeParameters instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (type >= 2 && actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (typeParameterType.isGeneric()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (typeParameters[i] instanceof Type) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (typeParameterType instanceof WildcardType) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (typeParameters.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (typeParameterType.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (type >= TYPE_ARRAY) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (typeNext instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (typeParameterType instanceof ParameterizedType) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (typeParameterType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (typeParameters.containsKey(actualType)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (type >= 2 && actualType.isGeneric()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (type >= 2 && actualType instanceof Type) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (typeParameters.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (type >= 2 && actualType instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (typeParameterType instanceof Type[] && actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (typeOfActualType instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (type >= 2 && typeParameterType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (typeParameters != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (type >= 2 && actualType != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (typeParameterType.isActualTypeArguments()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (typeParameterType.isActualType()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (typeNext instanceof Type) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (typeParameterType instanceof FunctionType) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (typeParameterType instanceof Type[] && actualType.isGeneric()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (typeParameterType.isGenericVariable(actualType)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (typeParameters.isArray()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (typeParameters.matches(actualType)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (typeParameters.containsKey(actualArgumentType)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (typeParameters.matches(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (typeParameters.containsKey(actualParameterType) || typeParameterType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (typeParameters.containsKey( actualParameterType)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (typeOfParameters[i] instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (typeParameters.containsKey(actualParameterType instanceof TypeVariable<?>) || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (typeOfArgumentType instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (typeParameters.isActualTypeParameter(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (typeParameters.containsKey(actualParameterType) || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (typeOfArgumentType instanceof Type) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (typeParameters.indexOf(\"?\") > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (typeParameterType.isActualTypeArgument(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (typeParameterType.isArrayType()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (typeParameters[i].equals(actualType)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (typeParameters.isAssignableFrom(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (typeToEvaluate instanceof Type) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (typeParameters.equals(\"GenericParameterType\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (typeParameters.indexOf(\"[]\", actualTypeArgument) > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (typeParameters.indexOf(\"[]\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (typeParameters.isActualTypeParameter(actualParameterType) || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (typeParameters.indexOf(\"netware\") > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (typeParameters.containsKey(actualParameterType instanceof TypeVariable<?>) || !typeParameters[i] instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (typeParameterType.isTemplateType()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (type(1) instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (type >= 2 && typeParameterType.isGeneric()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (typeOfActualType instanceof Type) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (typeParameters[i] instanceof GenericArrayType) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (type >= 2 && actualType.isAssignableFrom(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (type instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (typeParameters.equals(\"ParameterType\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (typeParameters.lengthParameterType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (typeParameters.length < actualCount) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (typeParameters.indexOf(\"[]\", actualTypeParameter) > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (type >= actualType) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (typeParameters.containsKey(actualParameterType instanceof TypeVariable<?>) || !typeParameters[i - 1].equals(actualType)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (typeParameters.containsKey(actualParameterTypeArgument)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (typeParameters.length < actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (typeParameterType instanceof Type[] && actualType.isActualType()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (typeParameterType instanceof Type[] && actualType.isActualTypeArguments()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (typeParameterType instanceof Type[]) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (typeWrapperType instanceof TypeVariable<?>) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (typeParameterType instanceof Type[] && actualType.isAssignableFrom(\"?\") || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (type >= 2 && actualType.isArray()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (typeOfArgs > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (typeParameterType.isActualTypeArgument()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (typeParameters.isActualTypeParameter(actualType)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (typeParameters.isActualTypeParameter(iParameterType) || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (typeParameters.isActualTypeParameter(actualType) || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (typeParameters.containsKey(actualParameterType instanceof TypeVariable<?>) && actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (typeParameterType.isGeneric(actualType)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (typeParameterType instanceof ObjectType) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (typeParameterType.isActualTypeParameter(actualType)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (type >= 2 && actualType.isActualTypeArguments()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (typeParameters.isActualTypeParameter(actualParameterType) || currType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (typeParameters.equals(\"GenericParameter type\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (typeParameterType.isActualTypeParameters(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (this.typeParameterType.isArray()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (type >= 256) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (typeParameterType.isActualTypeArgument(actualParameterType) || actualType.isAssignableFrom(actualType)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (typeParameterType.isActualTypeParameter(actualParameterType)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (typeParameterType instanceof Type[] && actualType.isActualTypeArgument()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (type secondArgumentType instanceof TypeVariable<?>) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (typeParameter != actualTypeArgument) {"
    },
    "Closure-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean isOverride = t.inGlobalScope()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean isOverride = t.inGlobalScope();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean isOverride = parent.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean isOverride = t.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasChildren();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean isOverride = t.inGlobalScope().isExported(propName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean isOverride = t.inGlobalScope().getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean isOverride = !inExterns && property.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean isOverride = n.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasType()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.OBJECTLIT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasOneChild()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isConstructor()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean isOverride = parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean isOverride = t.inGlobalScope().isExported(propertyName);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean isOverride = t.inGlobalScope().isQualifiedName();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isFunctionType()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean isOverride = t.getScope().getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isQualifiedName();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean isOverride = !inExterns && parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean isOverride = t.inGlobalScope() && getprop.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean isOverride = t.inGlobalScope() && propName.hasOneChild()) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean isOverride = !inExterns && property.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean isOverride = !inGlobalScope.isFunctionType() && parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.getType() != Token.GETPROP;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.EXPR_RESULT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean isOverride = !inGlobalScope.isFunctionType() && parent.getJSType().isConstructor()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean isOverride = !inGlobalScope.isFunctionType() && parent.getFirstChild().getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean isOverride = t.inGlobalScope().getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getFirstChild().getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean isOverride = getprop.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean isOverride = !inExterns && t.inGlobalScope().isExported(propName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean isOverride = t.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean isOverride = !inExterns && propName.contains(propName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean isOverride = !inExterns && getprop.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean isOverride = propName.hasType() || parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean isOverride = t.getScope().getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean isOverride = !inExterns && props.contains(propName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean isOverride = typeSystem.isFunctionType() && parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean isOverride = t.inGlobalScope() && !property.isExported(propName);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isConstructor();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean isOverride = !inExterns && propName.equals(prop.getFirstChild().getString());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean isOverride = typeSystem.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean isOverride = typeSystem.isConstructor() || parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean isOverride = t.inGlobalScope() && props.contains(propName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.visibleInferred()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean isOverride = t.inGlobalScope() &&prop.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean isOverride = t.inGlobalScope() && props.containsKey(propName);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.getJSType().isConstructor()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isExported(callNode.getFirstChild());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.THIS;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isFunctionType();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.OBJECTLIT);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.isExported(propertyName);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean isOverride = !inExterns && t.inGlobalScope()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.NAME;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean isOverride = propName.hasType() || parent.getType() != Token.GETPROP);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasProperty(propertyName);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.GETELEM;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean isOverride = n.getFirstChild().getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() == Token.GETELEM;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean isOverride = !inExterns && getprop.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean isOverride = t.inGlobalScope().isDeclared(propertyName);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() == Token.THIS;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean isOverride = t.inGlobalScope().isExported(callNode.getFirstChild());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getFirstChild().getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean isOverride = !inExterns && parent.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.LABEL;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean isOverride = t.inGlobalScope() && propName.isExported(propName);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getJSType().isConstructor()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean isOverride = t.inGlobalScope() && getprop.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean isOverride = !inGlobalScope.isFunctionDeclaration(t);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean isOverride = parent.getType() == Token.GETELEM;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean isOverride = propName.hasType() || parent.getType() != Token.GETPROP;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean isOverride = propName.hasName() || parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.getType() == Token.EXPR_RESULT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean isOverride = t.inGlobalScope() && !property.isConstructor()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() != Token.GETPROP;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.STRING;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean isOverride = t.hasName() || parent.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() == Token.ASSIGN;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasType();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getFirstChild() != null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean isOverride = t.inGlobalScope() || parent.getType() == Token.EXPR_RESULT;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasOwnProperty(propertyName);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean isOverride = !inGlobalScope.isFunctionType() && parent.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean isOverride = !inExterns && propName.equals(prop.getJSType());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean isOverride = t.inGlobalScope() &&prop.getType() == Token.GETPROP);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean isOverride =The.getType() == Token.GETPROP;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean isOverride = t.getType() == Token.GETELEM;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean isOverride = t.inGlobalScope() && !prop.hasName()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean isOverride = t.inGlobalScope() && parent.getType() == Token.STRING);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean isOverride = typeable && t.getType() == Token.GETPROP;",
                "identical": false
            }
        ],
        "buggy_line": "boolean isOverride = t.inGlobalScope() &&",
        "fixed_line": "boolean isOverride = parent.getJSDocInfo() != null &&"
    },
    "Closure-168": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (n.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (n.getType() == Token.RETURN) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (n.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (n.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (n.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (n.getType() == Token.CALL) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (n.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (n.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (!inExterns && first.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (call.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (n.getType() == Token.WITH) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n.getType() == Token.DEC || n.getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (!inExterns && first.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (!inExterns && first.getType() == Token.RETURN) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (NodeUtil.isFunctionDeclaration(n)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (n.getType() == Token.TRY) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (!inExterns && first.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (n.getType() == Token.FOR) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (n.getType() == Token.BLOCK) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (n.getType() == Token.DEC ||",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (callNode.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (n.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (NodeUtil.isFunctionAnonymous(n)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (n.getType() == Token.NEW) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (n.getType() == Token.DEC || n.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (n.getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parameters.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (call.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (call.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (!inExterns && first.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (n.getType() == Token.DEC || n.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (!inExterns && first.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (n.getType() == Token.inGlobalScope) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (n.getType() == Token.DEC || n.getType() != Token.INC) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (NodeUtil.isFunction(n)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (n.getType() == Token.FUNCTION || n.getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (n.getType() == Token.NE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (n.getType() == Token.DEC || t.getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (n.getChildCount() != 3) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!inExterns && first.getType() == Token.BLOCK) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() != Token.THIS) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (n.getType() == Token.DEC || parent.getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (!inExterns && first.getType() != Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (first.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (n.getType() == Token.DEC || t.getType() != Token.INC) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (n.getType() == Token.DEC || parent.getType() != Token.INC) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (callSite.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (n.getType() == Token.CATCH) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!inExterns && first.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (call.getType() == Token.RETURN) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (n.getType() == Token.DEC || parent.getType() != Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() != Token.INC) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (call != null && first.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (gramps.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (n.getType() == Token.DEC || parent.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (n.getType() == Token.inExterns) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (n.getType() == Token.DEC || t.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (n.getType() == Token.DEC || t.getScope().getType() != Token.INC) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (n.getType() == Token.DEC || t.getScopeRoot().getType() != Token.INC) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (n.getType() == Token.DEC || t.getScope().getType() != Token.THIS) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (!inExterns && first.getType() != Token.RETURN) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (!inExterns && first.getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (n.getType() == Token.maybe) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (n.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (!inExterns && first.getType() == Token.CASE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (n.getType() == Token.DEC || n.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (call != null && first.getType() == Token.RETURN) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (callSite.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (n.getType() == Token.DEC || n.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (!inExterns && first != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() != Token.LABEL) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (n.getType() == Token.FUNCTION ||",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (n.getType() == Token.DEC || t.getScopeRoot().getType() != Token.THIS) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (n.getType() == Token.DEC || parent.getType() != Token.THIS) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() != Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (!inExterns && first.getType() != Token.THIS) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (n.getType() == Token.FUNCTION || n.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (desc.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (call != null && first.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (n.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (n.getType() == Token.DEC || t.getType() != Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() != Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (compiler.getCodingConvention().isExported(n)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (n.getType() == Token.DEC || t.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot().getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (n.getType() == Token.DEC || t.getScopeRoot().getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (this.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (call != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (n.getType() == Token.DEC || parent.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (n.getType() == Token.DEC || t.getType() != Token.THIS) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (n.getType() == Token.DEC || parent.getType() != Token.LABEL) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (f.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (n.getType() == Token.FUNCTION || t.getScopeRoot()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (compiler.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (n.getType() == Token.EMPTY) {",
                "identical": false
            }
        ],
        "buggy_line": "if (t.getScopeDepth() <= 2) {",
        "fixed_line": "if (t.getScopeDepth() <= 1) {"
    },
    "Jsoup-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (size() > 1) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (tUtil.isFunction(node)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (child.hasChildren()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (t instanceof Text || node.equals(\"title\", \"style\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if ( tb.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but...",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if ( tb.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we have FINALLY block.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but we have FINALLY block.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (ClassUtil.isFunction(quad)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (tUtil.isFunction(quad)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (tUtil.isFunction(quad)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (tUtil.isFunction(ch)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to check but...",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (tUtil.isFunction(quad)) { // No catch but...",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (ClassUtil.isFunction(node)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if ( tb.containsKey(name)) { // once in body, don't close past body",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a non-empty collection",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (ClassUtil.isFunction(ch)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but otherwise?",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (tUtil.isFunction(predicates)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if ( tb.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (ClassUtil.isFunction(quad)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (lhs.getLastChild().getString().equals(\"title\", \"Only\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (tUtil.isFunction(predecessor)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to check but otherwise?",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (ClassUtil.isFunction(parent)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (ClassUtil.isFunction(parent)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (predicates.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to check but nodes",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (opcode.containsKey(name)) { // once in body, don't close past body",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (tUtil.isFunction(parent)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a non-space",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (t instanceof Text) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (tUtil.isFunction(node)) { // No catch but...",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (tUtil.isFunction(quad)) { // No catch but we have FINALLY block.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (tUtil.isFunction(html)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (tUtil.isFunction(ch)) { // No catch but...",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (tUtil.isFunction(bitIndex)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (opcode.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (gs.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (ClassUtil.isLatin(pred)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (ClassUtil.isFunction(ch)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (opcode.equals(\"head\", \"intersects\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (ClassUtil.isFunction(predecessor)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (ClassUtil.isFunction(predecessor)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (ClassUtil.isFunction(quad)) { // No catch but a non-empty collection",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (lhs.getLastChild().getString().equals(\"title\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (tUtil.isFunction(predecessor)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (t instanceof Text || nodeUtil.isFunction(parent)) { // No catch but...",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't close past body",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (size() > 0 && \" base\"\".equals(attrName)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (lhs.getLastChild().getString().equals(\"base\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (ClassUtil.isFunction(node)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (size() > 0 && \"node.getValue().equals(\"title\", \"Only\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( converter.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to check when passing super-through",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (unit.equals(\"yesterday\")) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (ClassUtil.isFunction(edge)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (t instanceof Text || node.equals(\"title\", \"Only\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (tUtil.isFunction(node)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (tUtil.isFunction(quad)) { // No catch but a non-empty collection",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to check when passing super-i",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (size() > 0 && \"title\", \"style\", \"object\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (tUtil.isFunction(quad)) { // No catch but a non-space",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if ( tb.containsKey(name)) { // once in body, don't need to check but...",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (tUtil.isFunction(quad)) { // and then we have FINALLY block.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to be parametrized.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (unit.equals(\"yesterday\")) { // [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to be given",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to be negated.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a sanity check",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a DEFAULT",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (tUtil.isFunction(predecessor)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if ( tb.containsKey(name)) { // once in body, don't really need 6 bytes but...",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (ClassUtil.isFunction(edge)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (stack.size() > 1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (size() > 0 && \" base\"\".equals(name)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (predicates.containsKey(name)) { // [JACKSON-407] -- allow disabling wrapping for now",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (t instanceof Text || node.equals(\"title\", \"1.0\")) { // empty element or tag",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (ClassUtil.isLatin(pred)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (tUtil.isFunction(parent)) { // and have FINALLY block.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then we didn't need to check but 0",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (size() > 0 && \" base\"\".equals(str)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (tagUtil.isFunction(node)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (tUtil.isFunction(parent)) { // No catch but a start tag",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (t instanceof Text || nodeUtil.isFunction(parent)) { // No catch but otherwise?",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (stack.containsKey(name)) { // once in body, don't close past body",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (tUtil.isFunction(parent)) { // and then",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (ClassUtil.isLatin(quad)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (ClassUtil.isLatin(lhs)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (tUtil.isFunction(node)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (opcode.containsKey(name)) { // once in body, don't really need 6 bytes but...",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (tUtil.isFunction(ch)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (ClassUtil.isFunction(predicates)) { // No catch but a FINALLY.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (tUtil.isFunction(html)) { // No catch but a FINALLY block.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (t instanceof Text || node.equals(\"title\", \"handler\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
        "fixed_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
    },
    "JacksonDatabind-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paramName = candidate.findImplicitParamName();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, false);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paramName = candidate.findImplicitParamName(paramName, name);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paramName = candidate.findImplicitParamName(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paramName = candidate.findImplicitParamNameForBeanType(paramName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paramName = candidate.findImplicitParamName(paramName, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paramName = candidate.findInjectableValueId(paramName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, ns);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paramName = candidate.findImplicitParamNameTransformer(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, intr, name);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paramName = candidate.findInjectableValueName(param.getParameterType(), beanDesc.bindingsForBeanType());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(param);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, _config);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, _config.getRootName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paramName = candidate.findImplicitParamName(paramName, _beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paramName = candidate.findImplicitParamNameForMutator(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paramName = candidate.findNameForDeserialization(paramName);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paramName = candidate.findImplicitParamName(paramName, ns);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paramName = candidate.findImplicitParamNameForCreator(paramName);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paramName = candidate.findPropertiesToIgnore(beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paramName = candidate.findImplicitParamName(paramName, beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getParameter(0));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.bindingsForBeanType());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(beanDesc.getClassInfo(), param);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getClassInfo(), param);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, _config.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paramName = candidate.findInjectableValueName(param.getParameterType(), param);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, _beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, beanDesc.bindingsForBeanType());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paramName = candidate.findImplicitCastNameForDeserialization(paramName);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName, name);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, am);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paramName = candidate.findImplicitParamNameForDeser(paramName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paramName = candidate.findImplicitParamName(paramName, false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paramName = candidate.findInjectableValueName(param.getParameterType(), property);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paramName = candidate.findImplicitParamNameWith(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, name);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, propDef.getClass().getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, _config.getMember());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paramName = candidate.findInjectableValueName(param.getParameterType(), param, injectId);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, intr, b);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getParameterCount());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paramName = candidate.findInjectableValueName(param.getName(), param);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, intr, lvalueId);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, inst);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getParameterType(), param);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paramName = candidate.findPOJOProperty(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paramName = candidate.findPropertiesToIgnore(paramName);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName,Config.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paramName = candidate.findImplicitParamNameTransformer(paramName, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paramName = candidate.findInjectableValueName(param.getName(), param, injectId);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paramName = candidate.findImplicitParamNameTransformer(paramName, name);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, paramType.getRawClass());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getClassInfo(), param, propDef.getEntryCount());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, prov.getConfig(), param, injectId);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paramName = candidate.findInjectableValueName(param);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paramName = candidate.findImplicitParamName(paramName, _property.getName(), param, injectId);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paramName = candidate.findImplicitParamNameTransformer(paramName, beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName,Member);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, index);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, lineno, charno);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName,ctxt, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, param);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paramName = candidate.findImplicitCastNameForDeserialization(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paramName = candidate.findImplicitParamName(paramName, classType, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, propDef.getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paramName = candidate.findImplicitAnnotation(beanDesc.getClassInfo(), param, injectId);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName,Config.getScope(), param, injectId);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, beanDesc.getParameterType());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, desc, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getClassInfo(), param, propDef.length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getParameterType());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.generator);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.hasCreatorAnnotation(paramName));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paramName = candidate.findImplicitParamNameForSerialization(paramName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paramName = candidate.findImplicitParamName(paramName, _property.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paramName = candidate.findImplicitParamName(paramName,ctxt, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paramName = candidate.findImplicitParamNameForCreator(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, beanDesc.getParameter(0));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getParameterCount(), param, injectId);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName,Config.getMember());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, _propertyName);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paramName = candidate.findImplicitParamName(paramName, paramType, injectId);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName, param, injectId);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getParameterTypes());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, ai, name);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paramName = candidate.findImplicitParamNameFor(paramName, beanDesc.getClassInfo());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(config, beanDesc.getName(), param, injectId);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paramName = candidate.findImplicitParamName(paramName, lineno, charno);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName,Alias.class);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paramName = candidate.findImplicitParamNameForDeserialization(paramName, intr);",
                "identical": false
            }
        ],
        "buggy_line": "paramName = candidate.findImplicitParamName(0);",
        "fixed_line": "paramName = candidate.paramName(0);"
    },
    "Closure-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (target != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (target != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (target != null && callee.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (callee != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (functionName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (namespace != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (target != null && callee.getType() == Token.CALL) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (propName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (namespace != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (rName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (qualifiedName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (target != null && callee.getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (target != null && NodeUtil.isFunctionObjectCall(parent)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (target != null && NodeUtil.isFunctionAnonymous(n)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (callee != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (target != null && NodeUtil.isFunctionAnonymous(parent)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (axis != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (loader != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (targetName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (objName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (NodeUtil.isName(target)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (sourceName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (retName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (functionName != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (namespace != null && callee.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (adjustName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (originalName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (target != null && NodeUtil.isFunctionDeclaration(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (loader != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( lineNumber != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (rValue != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (target != null && callee.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (coefficients != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (target != null && NodeUtil.isFunctionAnonymous(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (implicitName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (jsonName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (axis != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (TraceName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (propName != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (target != null && className.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (coefficients != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (canName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (target != null && NodeUtil.isFunctionDeclaration(target)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (rValue != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (target != null && !namespace.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( targetName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (target != null && callee.getType() == Token.THIS) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (resultName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( nfeName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (target != null && NodeUtil.isFunctionObjectLitKey(qualifiedName)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (throwsName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (documentationName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (inline != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (wildcard != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (RANGEName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (FIName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (r != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (target != null && mut.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (target != null &&callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( nextDouble != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (implicit != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (target != null && className.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (target != null && NodeUtil.isName(target)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (qualifiedName != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (target != null && NodeUtil.isFunctionObject\".equals(target)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (UpperBound != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (thisName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (verifyName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (NAME != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( parseName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (no != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Expr != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (compiler != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (implicit != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( methodName != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (ref != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (target != null && !qualifiedName.equals(target)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (target != null && NodeUtil.isFunctionDeclaration(parent)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( lineNumber != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Candidate != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( dep != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( dom != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (area != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (sourceName != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( Map != null && callee.getType() == Token.GETPROP) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Candidate != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( nextDouble != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (target != null && input.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (target != null && !qualifiedName.isEmpty()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (target != null && callee.getType() == Token.LP) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (wildcard != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (target != null && prop.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (target != null && info.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (UpperBound != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (target != null && NodeUtil.isFunctionAnonymous(className)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (r != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (target != null && date.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (loader != null && callee.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (sup != null && callee.getType() == Token.STRING) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (area != null && callee.getType() == Token.STRING) {",
                "identical": false
            }
        ],
        "buggy_line": "if (target != null) {",
        "fixed_line": "if (target != null && target.getType() == Token.STRING) {"
    },
    "Jsoup-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-Z\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"a-zA-Z\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-Z\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"setString-zA-Z\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"60-zA-Z\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" 8-zA-Z\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final Pattern unescapePattern = Pattern.compile('\\\\');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"charset-zA-Z\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"CHAR-zA-Z\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"74-zA-Z\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"$|-zA-Z\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"CHAR-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"LAST-zA-Z\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"usual-Z-a-zA-Z\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" 8-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" chooser.format-zA-Z\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"80|-zA-Z\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"74-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final Pattern unescapePattern = Pattern.compile('f-zA-Z');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Analyzer-zA-Z\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"</a-zA-Z\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"128-zA-Z\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"c-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"FO-a-zA-Z\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" instances-Z-a-zA-Z\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-Z\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-Z\";",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"c-zA-Z\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"F-zA-Z\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-Z\", \"\\n-zA-Z')';",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" multiplication-zA-Z\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"charset-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" instances-a-zA-Z\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"float-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"lazz-zA-Z\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Signature-zA-Z\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-Z;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final Pattern unescapePattern = Pattern.compile('\\\\')';",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Injector-zA-Z\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-ZOOM_INCLUS-zA-Z\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-Z:\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" two-zA-Z-Z\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"lazz-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"CHAR-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-ZOOM_INCLUS-zA-Z\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"0.|-zA-Z\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"float-zA-Z\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"]-zA-Z\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z:\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"a-zA-Z\", ID[a-zA-Z')';",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Analyzer-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"LAST-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Heap-zA-Z\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Graphic-zA-Z\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"u-zA-Z\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" getRange-zA-Z\", \"<a-zA-Z')';",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z\", \"\\n-zA-Z')';",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"60-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-Z';",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"CHAR-zA-Z\", \"<a-zA-Z\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" two-zA-Z\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"$|-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"ToString-zA-Z\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-2.0f-zA-Z\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"74-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"a-zA-Z:\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" 8-zA-Z-Z\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-Z);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\".4-zA-Z\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"a-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"\\\\-image-zA-Z\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"CHAR-zA-Z\", \"<a-zA-Z');",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.\\\\d-zA-Z\", \"\\n-zA-Z');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-ZOOM_INCLUS-zA-Z\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" 8-zA-Z\", \"<a-zA-Z\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"msg.|-zA-Z\",Odd[a-zA-Z')';",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" getRange-zA-Z\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"utes-zA-Z\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" \");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" 8-zA-Z\", \"<a-zA-Z');",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\" 8-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Util.format(a-zA-Z)-zA-Z')';",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"sp-zA-Z\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"1.7-zA-Z\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"a-zA-Z\", predicates[a-zA-Z')';",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"Heap-zA-Z-Z\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"80|-zA-Z\", \"\\n-zA-Z\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"CHAR-zA-Z\", \"<a-zA-Z')\";",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final Pattern unescapePattern = Pattern.compile('f-zA-Z')';",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"charset-zA-Z-Z\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"$|-zA-Z\", \"\\n-zA-Z')';",
                "identical": false
            }
        ],
        "buggy_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
        "fixed_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");"
    },
    "Closure-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (resultType.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (resultString != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result != getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (resultUnknown.equals(getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (resultType.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (resultJSType.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (result p.equals(this.getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (resultUnknown.equals(getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (resultType.equals(this.getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (resultType.isObject() && that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (resultType.isObject() && that.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result throw new IllegalStateException(\"Property '\"+a.getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (resultType != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (resultUnknowns.equals(getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (result.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (resultUnknowns.equals(getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that = getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (result throw new IllegalStateException(\"Property '\"+a.getNativeType(JSTypeNative.NO_OBJECT_TYPE) != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (resultType.equals(this.getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (result != getNativeType(JSTypeNative.NO_OBJECT_TYPE) && result == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (resultType.isObject() && that.isSubtype(getNativeType(U2U_CONSTRUCTOR_TYPE)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (resultType.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result && builder.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (resultRecord.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this,Node.getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (resultType.isSubtype(that)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.isSubtype(this, false)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (resultUnknown.equals(this)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (result throw new IllegalStateException(\"JSType.isUnknownType() && that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (resultType.isSubtype(prop) && !that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this,pd.getNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (resultObjectType.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (result throw new IllegalStateException(\"Property '\"+a.getNativeType(JSTypeNative.NO_OBJECT_TYPE) && !that.isSubtype(this)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (resultParamType.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (resultType.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (resultType.isUnknownType() && that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (resultSet != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (result throw new IllegalStateException(\"JSType.isSubtype(this, that) && !that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (resultType.isSubtype(this, toNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, toNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (result && that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result throw new IllegalStateException(\"JSType.isUnknownType() || result.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (result p.equals(this.getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (resultUnknown.equals(getNativeType(JSTypeNative.VOID_TYPE)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.getNativeType(JSTypeNative.VOID_TYPE)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (resultType.isObject() && !that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (resultType.isSubtype(this, JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (result throw new IllegalStateException(\"JSType.isUnknownType() || that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (result throw new IllegalStateException(\"JSType.isSubtype(this, that) && !that.isSubtype(this, thatType)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (resultJSType != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (results.equals(\") && !that.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (result throw new IllegalStateException(\"JSType.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (resultDoc.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that checkNativeType(JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (resultType.isObject() && that.isSubtype(this, thatType)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (results.equals(\") && result.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (result p.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (resultSubtype.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that = getNativeType(JSTypeNative.VOID_TYPE)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (resultSubclass.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (resultType.isObject() && that.isSubtype(getNativeType(U2U_CONSTRUCTOR_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (result throw new IllegalStateException(\"JSType.isUnknownType() && that.isSubtype(this, toNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.isSubtype(this, BOOLEAN_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (result].isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.getNativeType(JSTypeNative.STRING_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (resultBits.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (resultType.isObject() && that.isSubtype(getNativeType(JSTypeNative.OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, BOOLEAN_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.getNativeType(JSTypeNative.OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (resultType.isObject() && !that.isSubtype(this, thatType)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (resultInputStream.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, thatJSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, false)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (result p.equals(this.getNativeType(JSTypeNative.VOID_TYPE)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (resultType.isObject() && that.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that = getNativeType(JSTypeNative.ARRAY_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (resultUnknown.equals(getNativeType(JSTypeNative.NO_OBJECT_TYPE())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that = getNativeType(JSTypeNative.OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (results.equals(\") && !that.isSubtype(this, thatType)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (resultB.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result throw new IllegalStateException(\"JSType.isSubtype(this, that) && result == null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \"thisType.isSubtype(that)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (result throw new IllegalStateException(\"Property '\"+a.getNativeType(JSTypeNative.NO_OBJECT_TYPE) && result == null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.toString() + that.isSubtype(this, JSTypeNative.NO_OBJECT_TYPE)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that = getNativeType(JSTypeNative.UNKNOWN_TYPE)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this,pd.getNativeType(JSTypeNative.VOID_TYPE)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (resultType.isSubtype(getNativeType(JSTypeNative.UNKNOWN_TYPE)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (result throw new IllegalStateException(\"Property '\"+a.getType() == Token.OBJECTLIT) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (resultUnknown.equals(getNativeType(JSTypeNative.NO_TYPE)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (resultType.equals(this.getNativeType(JSTypeNative.VOID_TYPE)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (resultSet.isSubtype(this, that)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + builder.toString() + \" propertyType.isSubtype(this, that = getNativeType(JSTypeNative.ARRAY_TYPE)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (result throw new IllegalStateException(\"Unrecognized value: \" + that.getNativeType(JSTypeNative.NULL_TYPE)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (result != null) {",
        "fixed_line": "if (!result.isNoType()) {"
    },
    "Chart-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \" title=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \"< title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \"title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \"- title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \"[ title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \"\\\" alt=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return \", title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + this.toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return \" title=\\\"\" + toolTipText + \"_\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return \" title=\\\"\" + toolTipText + null;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + this.toolTipText;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\", this.toolTipText);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \"<title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + this.toolTipText;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return \"{ title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + this.toolTipText;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \" title=\\\"\" + toolTipText.toString() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + (toolTipText + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\'\";",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return \" title=\\\"\" + toolTipText + name + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\")\";",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return \" title=\\\"\" + toolTipText + 2 + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\Utilities.toString() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\", null);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + (toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \" title=\\\"\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' - this.toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\Utilities.toString(toolTipText);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \" title=\\\"\" + toolTipText + \": \" + this.toolTipText;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + (toolTipText.toString() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\", urlText);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return \"$ title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + this.toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + (toolTipText.toString() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + (toolTipText.toString() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return \" title=\\\"\" +toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \" title=\\\"\" + toolTipText + \"_\" + urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + this.toolTipText;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + (toolTipText + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"\", this.toolTipText);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" name=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + this.urlText;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + toolTipText;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + (toolTipText + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + this.toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\'\\\"\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \"[title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return \" title=\\\"\" + (toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \"<=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + name + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\Utilities.toString() + this.toolTipText;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\" and \" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"getItemCount(toolTipText);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return(\" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return \" title=\\\"\" + toolTipText + this.toolTipText;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' - this.toolTipText;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \" title=\\\"\" + toolTipText.toString();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + toolTipText;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\se=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + area.toString() + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \" title=\\\"\" + urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' - null + this.toolTipText;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (\" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + (toolTipText.toString() + null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\in=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + toolTipText + this.urlText;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + (toolTipText.toString() + null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \"closure=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + (toolTipText.toString() + this.urlText);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" is null ? \"}\" : toolTipText.toString();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" is null ? \"}\" : toolTipText;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return '\"=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + (toolTipText);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return \" title=\\\"\" + toolTipText + \", \" + toolTipText + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" position=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + this.urlText;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\" singleTipText + name + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"\", urlText);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\", \", \" + toolTipText);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" testName=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + (toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + (toolTipText + this.urlText + null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" type=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"=\" + (toolTipText.toString() + null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + this.urlText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\".toToolTipText();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\", this.toolTipText));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\": \" + (toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + (toolTipText + name + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\' + (toolTipText + this.urlText + null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\'\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\n\" + (toolTipText + this.urlText + null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \"-title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            }
        ],
        "buggy_line": "return \" title=\\\"\" + toolTipText",
        "fixed_line": "return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText)"
    },
    "Math-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (int i = 0; i < nSelectors.length; i++) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for (int i = 0; i < nts.length; i++) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (int i = 0; i < ndigits.length; i++) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (int i = 0; i < nGroups.length; i++) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (int i = 0; i < nk; i++) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (int i = 0; i < nHints.length; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (int i = 0; i < ncompiler.length; i++) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (int i = 0; i < ncomponents.length; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (int i = 0; i < nDev; i++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (int i = 0; i < n elements.length; i++) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (int i = 0; i < nDevs.length; i++) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (int i = 0; i < npw.length; i++) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (int i = 0; i < nCols; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (int i = 0; i < nLocal; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (int i = 0; i < ntokens.length; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (int i = 0; i < n0, x.length; i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (int i = 0; i < nactive.length; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (int i = 0; i < n0, maxH; i++) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (int i = 0; i < nation.length; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (int i = 0; i < nDev.length; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (int i = 0; i < nf.length; i++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (int i = 0; i < nRows; i++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (int i = 0; i < nH; i++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (int i = 0; i < nHeap; i++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (int i = 0; i < nangradix; i++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (int i = 0; i < n reverse; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; i < nREFERENCE.length; i++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (int i = 0; i < nELEMENT.length; i++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (int i = 0; i < nInput.length; i++) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (int i = 0; i < nGLOBAL.length; i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (int i = 0; i < nitems.length; i++) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (int i = 0; i < nSelection.length; i++) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (int i = 0; i < n void.length; i++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (int i = 0; i < n bottom; i++) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (int i = 0; i < n BYTE; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (int i = 0; i < nassigned; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int i = 0; i < nGroups; i++) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (int i = 0; i < n \"*.length; i++) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int i = 0; i < n -3.length; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (int i = 0; i < n(':.length; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (int i = 0; i < n Called.length; i++) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (int i = 0; i < nenums.length; i++) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (int i = 0; i < coefficients.length; i++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int i = 0; i < nfixed.length; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (int i = 0; i < nafter.length; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (int i = 0; i < n rotated.length; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (int i = 0; i < noptions.length; i++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (int i = 0; i < njson.length; i++) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (int i = 0; i < nfonts.length; i++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (int i = 0; i < maxH; i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (int i = 0; i < n offsets.length; i++) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (int i = 0; i < n outputEnd.length; i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (int i = 0; i < n qName.length; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (int i = 0; i < nInfinity.length; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int i = 0; i < n pt.length; i++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (int i = 0; i < n equals.length; i++) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int i = 0; i < nang.length; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (int i = 0; i < nVERTICAL; i++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int i = 0; i < n bottom.length; i++) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (int i = 0; i < nliers.length; i++) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (int i = 0; i < n modify.length; i++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (int i = 0; i < locals.length; i++) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (int i = 0; i < accum.length; i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (int i = 0; i < n LENGTH.length; i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (int i = 0; i < n-1); i++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (int i = 0; i < nior.length; i++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (int i = 0; i < n trim.length; i++) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (int i = 0; i < n Jul.length; i++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int i = 0; i < n comment.length; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (int i = 0; i < nfont.length; i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (int i = 0; i < nzone.length; i++) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (int i = 0; i < ndown.length; i++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (int i = 0; i < nfill.length; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int i = 0; i < nCALE.length; i++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (int i = 0; i < n insn.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int i = 0; i < nivariate.length; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (int i = 0; i < nfeature.length; i++) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (int i = 0; i < nNamespace.length; i++) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (int i = 0; i < devCount; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (int i = 0; i < nize; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (int i = 0; i < n 256; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (int i = 0; i < nN; i++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (int i = 0; i < constraint.length; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (int i = 0; i < nerr; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (int i = 0; i < n[]; i++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (int i = 0; i < x.length; i++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (int i = 0; i < pred.length; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (int i = 0; i < alphaSize; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (int i = 0; i < nSum; i++) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (int i = 0; i < nincrement; i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (int i = 0; i < n0, sumXX; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (int i = 0; i < ntop; i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (int i = 0; i < nELEMENT; i++) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (int i = 0; i < ndeclaredW; i++) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (int i = 0; i < n+1]; i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (int i = 0; i < n 0.0; i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (int i = 0; i < sumXX; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (int i = 0; i < 2.0; i++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (int i = 0; i < n; i++) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (int i = 0; i < n0, x - 1; i++) {",
                "identical": false
            }
        ],
        "buggy_line": "for (int i = 0; i < weights.length; i++) {",
        "fixed_line": "for (int i = begin; i < begin + length; i++) {"
    },
    "Lang-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return cAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.contains(locale);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.containsKey(locale);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return cAvailableLocaleSet.containsKey(locale);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.containsValue(locale);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return cAvailableLocaleSet.contains(locale).parseLocale(locale);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.getLocale() > locale);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return cAvailableLocaleSet.contains(locale).booleanValue(locale);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet().contains(locale);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale))) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getZone() == locale;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet().contains(locale));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return cAvailableLocaleSet.contains(locale) == false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale.getLocale()))) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).contains(locale);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale).getLocale()))) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return cAvailableLocaleSet.containsValue(locale);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.getLocale() : locale.getLocale());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getZone().equals(locale);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.containsValue(locale));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getZone() > locale.getLocale();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return cAvailableLocaleSet.containsKey(locale) || locale.contains(locale);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return cAvailableLocaleSet.contains(locale) == locale;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocale() != null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return cAvailableLocaleSet.contains(locale).enables(locale);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.contains(locale));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return cAvailableLocaleSet.get(locale).contains(locale);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return cAvailableLocaleSet.contains(locale) || iValue != null && locale.getLocale() > locale.getLocaleSet().contains(locale));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.equals(locale);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.contains(locale);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).contains(locale);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale == null ? Locale.getDefault() : locale);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.containsKey(locale));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return cAvailableLocaleSet.contains(locale) || iParseEras.contains(locale);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getZone() == locale);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.getLocale() == locale);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return cAvailableLocaleSet.contains(locale).toLowerCase(locale);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet().contains(locale));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return cAvailableLocaleSet.contains(locale) || iValue != null && locale.getLocaleSet().contains(locale));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return cAvailableLocaleSet.containsValue(locale) || locale.contains(locale);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale)));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return cAvailableLocaleSet.contains(locale).endsWithLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return cAvailableLocaleSet.contains(locale) || iAvailableLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.getLocale() : Locale.getDefault());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.equals(locale.getLocale() : locale);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).isMatch(locale);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return cAvailableLocaleSet.contains(locale).iValue(locale);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).isLocale();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).isValue(locale);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).isValue(locale);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return cAvailableLocaleSet.contains(locale).toUpperCase(locale);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale == null ? locale : locale.getLocale());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).isLocale();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).endsWithLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.getLocale() : locale);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return cAvailableLocaleSet.contains(locale).withLocale(locale);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return cAvailableLocaleSet.contains(locale).iLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).isMatch(locale);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return cAvailableLocaleSet.contains(locale) || iValue != null && locale.getLocale() > locale.getZone().equals(locale));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).isBefore(locale);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale == null ? Locale.getDefault() : locale.equals(locale));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.getLocale() : locale.getZone());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.contains(locale).booleanValue(locale);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.contains(locale).endsWithLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale == null ? Locale.getDefault() : locale.getLocale());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).equalsIgnoreCase(locale);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getCountry().contains(locale);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return cAvailableLocaleSet.containsKey(locale) || locale.containsValue(locale);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.startsWith(locale);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).equalsIgnoreCase(locale);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).isCollection(locale);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.getClass() > locale);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocale() > locale.getLocale();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).endsWithLocaleSet(locale);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale).getLocale() > locale);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).booleanValue(locale);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale == null ? Locale.getDefault() : locale.toString());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getZone() > locale.getLocaleSet(locale));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return cAvailableLocaleSet.contains(locale).getZone(locale);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).isCollection(locale);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.containsAll(locale);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale).booleanValue(locale);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale == null ? locale : locale.getLocale() > locale);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null && locale.equals(locale).getLocale() mutValue(locale));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return cAvailableLocaleSet.contains(locale)) || locale.getLocaleSet(locale).returnValue(locale);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return cAvailableLocaleSet.contains(locale) || iValue != null && locale.equals(locale);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.getLocale() : locale.getPatternType());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocale();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return cAvailableLocaleSet.contains(locale).intersects(locale);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return cAvailableLocaleSet.contains(locale) || iValue == locale;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.getLocaleSet(locale));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return cAvailableLocaleSet.contains(locale) || locale.contains Pair(locale);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return cAvailableLocaleSet.contains(locale) || iValue != null && locale.equals(locale));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return cAvailableLocaleSet.contains(locale) || (locale != null ? locale.getLocale() : locale.getZone(locale));",
                "identical": false
            }
        ],
        "buggy_line": "return cAvailableLocaleSet.contains(locale);",
        "fixed_line": "return availableLocaleList().contains(locale);"
    },
    "Math-85": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fa * fb >= 0.0 ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(max) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fa * fb >= 0.0f || Double.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (a <= 0.0) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (fewerThan24 Byte.isNaN(min, initial) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b2) || (a <= 0.0) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(bpw)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min(max) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(max) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min) || (a <= 0.0) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(bDISPLAY) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (fewerThan24 Byte.isNaN(a) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fewerThan24 Byte.isNaN(b) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(max) || (a <= 0.0) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b2) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fewerThan24 Byte.isNaN(min) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(min) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b1 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (fewerThan24 Byte.isNaN(a) || Double.isInfinite(b2) || Double.isInfinite(bpw)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b4 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b1) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fewerThan24 Byte.isNaN(min, initial) || Double.isInfinite(b2) || (b1 < 0.0))) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fewerThan24 Byte.isNaN(a) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b1) || Double.isNaN(b2)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (fewerThan24 Byte.isNaN(min, initial) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fa * fb >= 0.0f || Double.isNaN(b2) || (a <= 0.0) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fewerThan24 Byte.isNaN(b) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b2) || (a <= 0.0) || (b1}, 2 < 0.0)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (fewerThan24 Byte.isNaN(min, initial) || Double.isInfinite(b2) || (b1 < 0.0 ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b1 < 0.0 ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b2) || (a <= 0.0) || (b4 < 0.0)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b2)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(min(max) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (fewerThan24 Byte.isNaN(min) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b nested) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b2) || (b4 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (a <= 0.0) || (b4 < 0.0)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (a <= 0.0) || (b1}, 2 < 0.0)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(value)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b3 * fb)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b1 < 0.0))) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isNaN(b2) || (b1 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b2) || (a <= 0.0) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b1) || Float.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(bpw)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b3))) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fewerThan24 Byte.isNaN(a) || Double.isInfinite(b2) || Double.isInfinite(b)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(max) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b1}, 2))) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (a <= 0.0) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b4 <= 0.0 ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b1) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(max) || (b1 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min) || (a <= 0.0) || (b4 < 0.0)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b2) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(b) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fewerThan24 Byte.isNaN(a) || Double.isInfinite(b2) || Double.isInfinite(b2)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b1 <= 0.0 ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b4 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (a <= 0.0) || (b2 < 0.0)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min) || (a <= 0.0) || (b1}, 2 < 0.0)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fa * fb >= 0.0f || Double.isNaN(b2) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b1) || Double.isNaN(bpw)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fewerThan24 Byte.isNaN(a) || Double.isInfinite(b2) || Double.isInfinite(b24, fb)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b1) || compute == 0.0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b) || (b1 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isNaN(b2) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (b==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b <= 0.0)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b1) || Double.isNaN(b2) || (b1 < 0.0)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b2) || Double.isNaN(bpw)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(min) || (b3 < 0.0)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b1) || Double.isInfinite(b2) || Float.isNaN(b2)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(a) || Double.isInfinite(b2) || (b1 <= 0.0)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b1) || Float.isNaN(b2)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (bCollections <= 0.0)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b0 < 0.0)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b2) || Double.isInfinite(bpw)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (info == null || !b.numerator==Integer.isNaN(b1) || Double.isNaN(b2) || Float.isNaN(b2)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(max) || (a <= 0.0) || (b4 < 0.0)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (info.numerator==Integer.MIN_VALUE || Double.isNaN(b>(a) || Double.isInfinite(b2) || (b <= 0.0 ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fa * fb >= 0.0 ) {",
        "fixed_line": "if (fa * fb > 0.0 ) {"
    },
    "Chart-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 0.0));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() : PlotOrientation.VERTICAL);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 0.0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 0.0, 0.0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 1.0, 1.0));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 0.0, 0.0));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 5.0, 5.0));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() or 'dataset't need to notify listeners when the",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(0.0, 5.0, 0.0, 0.0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_VERTICAL);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.DomainOrder.BY_ROW);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(0.0, 0.0, 0.0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 0.0",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 7.0, 0.0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.getPlot3Dividers);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_VERTICAL);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 5.0));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(0.0, 5.0, 5.0, 5.0));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BOTTOM_OR_LEFT);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_red);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(0.0, 0.0, 1.0, 1.0));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.BY_ROW);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_WIDTH_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Dividers",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation()",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.Tips_VERTICAL);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset.jfreechart running with Integer.VERTICAL);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BOTTOM_TEXT_VERTICAL);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.BY_ROW));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dataset = dataset ? new Rectangle2D.Double(0, AxisLocation.BOTTOM_OR_LEFT : dataset;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 7.0, 0.0));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_ANCHOR_LEFT));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_VERTICAL);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_WIDTH_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getRowKey(pieChart.RELATIVE_PlotOrientation.VERTICAL);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0, Integer.MAX_VALUE));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 5.0, 0.0, 0.0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.getPlotOrientation() != null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BORDER_VERTICAL);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(0.0, 5.0, 5.0));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BOTTOM_TEXT_BY_COLUMN);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_TYPE_VERTICAL);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset.dataExtractOrder.BY_ROW);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_ANCHOR_LEFT);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_red);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 0.0, 0.0",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_red);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BOTTOM_OR_LEFT));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_routine.BY_ROW);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_COLUMN));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_OR_LEFT));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getRowKey(pieChart.BY_ROW));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.RELATIVE_VERTICAL);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() JFreeChart.VERTICAL);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_TYPE_QUARTER));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_PAINT);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_BY_COLUMN);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_VERTICAL);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.BY_COLUMN);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() or 'dataset't need the axis range",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 5.0, 0.0, 1.0, 1.0));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.getPlotLocation());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.getPlotOrientation()))) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_BY_ROW);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_BY_ROW);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_WIDTH_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIAL",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotLocation());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_BY_ROW);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 7.0, 5.0, 5.0));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_COLUMN));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() && dataset instanceof DatasetChangeEvent(this.dataset.RELATIVE_GAP);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation() or 'dataset't need to notify listeners when the axis range",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(0.0, 0.0, 0.0));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedRectangle(pieChart.RELATIVE_LIMITEDLE_TO_BY_COLUMN);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedRectangle(pieChart.RELATIVE_GAP));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_ANGLEMICLOCKWISE",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0.0, 0.0, 7.0, 5.0, 0.0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedRectangle(pieChart.BOTTOM_TEXT_BY_COLUMN);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.PLAIN, false));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlotOrientation()});",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedRectangle(pieIndex));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3Divided new Rectangle2D.Double(0, Integer.VERTICAL);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_LOWER_COLUMN));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_LOWER_ANGLING_WIDTH_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BOTTOM_TEXT_BY_ROW);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_WIDTH_TO_BY_COLUMN);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getSeriesKey(pieChart.TOTYPE_AND_SHAPECIFIED_WIDTH_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getRowKey(pieChart.RELATIVE_LIMITEDLE_TO_BY_COLUMN));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getRowKey(pieChart.RELATIVE_GAP));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.BORDER);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedelToJava2D(pieChart.Tips_TEXT_VERTICAL);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedRectangle(pieChart.BOTTOM_TEXT_VERTICAL);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dataset = dataset; // forces recalculation of the dataset as a new StandardPieDataset\", Font.BOLD, plot.dataset.getPlot3DividedRectangle(pieChart.TOTYPE_AND_SHAPECIFIED_PROPERTY_VERTICAL);",
                "identical": false
            }
        ],
        "buggy_line": "this.dataset = dataset;",
        "fixed_line": "setDataset(dataset);"
    },
    "Chart-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "new Range(0.0, this.rightBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "new Range(0.0, this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "new Range.0, w[2], constraint.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[2]), c4);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h4);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h[4]));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[2]), c4);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "new Range(0.0, this.rightBlock.getWidth) - w[2]), c4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[2] + w[3]), c4);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "new Range(0.0, w[2], h[4]));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "new Range(0.0, this.leftBlock.getWidth() - w[2]), c4);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h[4]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "new Range.0, 1.0) - w[2] + this.leftBlock.getWidth();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "new Range(0.0, this.leftBlock.getWidth() - w[3]), c4);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "new Range.0, 0.0) - w[2] + this.leftBlock.getWidth();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "new Range.0, w[2], constraint.getWidth(), h[3]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "new Range.0, w[2], constraint.getWidth(), h[4]));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[3]), c4);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "new Range.0, w[2], constraint.getWidth(), h[2]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "new Range(0.0, w[2] + w[2]), this.leftBlock.getHeight);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h[3]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "new Range.0, this.rightBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[3]), c4);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "new Range(0.0, - w[2] + this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[2], h[3]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "new Range(0.0, 1.0) - w[2] + this.rightBlock.height;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "new Range(0.0, this.rightBlock.getWidth) - w[2] + w[3]), c4);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "new Range.0, 1.0) - w[2] + this.leftBlock.getWidth() / 2.0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "new Range.0, w[2]), this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "new Range(0.0, w[2] + w[2]), this.rightBlock.height;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "new Range(0.0, w[2] + w[2]), this.leftBlock.getHeight());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "new Range(0.0, w[2]), this.leftBlock.getHeight);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "new Range.0, w[2], constraint.getWidth(), h4);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "new Range.0, w[2], constraint.getWidth(), h[4]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "new Range(0.0, w[2] + w[2]), this.leftBlock.getHeightConstraintType);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[2], 0.0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "new Range.0, - w[2] + this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "new Range(0.0, w[2] + w[2]), this.leftBlock.height;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h[2]));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "new Range(0.0, w[2], s.getWidth(), h4);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "new Range(0.0, constraint.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getWidth() - w[3]), c4);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.height;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "new Range.0, 1.0) - w[2] + this.rightBlock.getWidth();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "new Range.0, this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "new Range(0.0, 1.0) - w[2]), this.leftBlock.getHeight);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "new Range.0, w[2]), constraint.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[2] + w[3]), c4);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "new Range(0.0, this.leftBlock.getWidth() - w[2] + w[3]), c4);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), b4);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[2] + w[3]), h[2];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "new Range(0.0, this.rightBlock.getWidth()) - w[2]), c4);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "new Range(0.0, this.rightBlock.getWidth) - w[3]), c4);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h[3]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "new Range(0.0, this.leftBlock.getWidth() - w[2], 0.0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "new Range(0.0, this.leftBlock.getWidth() - w[2], h[3]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "new Range(0.0, this.leftBlock.getWidth()) - w[2]), c4);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "new Range(0.0, 0.0, - w[2]), this.leftBlock.getHeight);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "new Range(0.0, w[2], constraint.getWidth(), h5);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "new Range(0.0, w[2] + w[2]), this.leftBlock.width);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getWidth() / 2.0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "new Range(0.0, w[2]), this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "new Range(0.0, w[2] + w[2]), this.rightBlock.getHeightConstraintType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "new Range(0.0, w[2]), this.rightBlock.getHeightConstraintType);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.width);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "new Range(0.0, w[2], constraint.getWidth() - w[3]), this.rightBlock);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "new Range.0, 1.0) - w[2] + this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new Range(0.0, w[2]), this.leftBlock.getHeightConstraintType);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.width;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "new Range(0.0, w[2]), this.leftBlock.getHeight());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getHeight), c4);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "new Range.0, 0.0) - w[2] + this.rightBlock.getWidth();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Range(0.0, w[2] + w[2]), this.rightBlock.getHeight());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "new Range(0.0, 0.0, - w[2] + this.leftBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[2], h[4]));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "new Range(0.0, this.rightBlock.getWidth()), c4);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getWidth();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "new Range.0, - w[2] + this.leftBlock.getWidth() / 2.0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[2], h[4]));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[2], 0.0);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "new Range(0.0, 1.0) - w[2] + this.rightBlock.getWidth() - w[3]), c4);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getWidth() / 2.0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "new Range(0.0, w[2] + w[2]), this.leftBlock.getHeighted);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "new Range.0, w[2]), this.rightBlock.getWidth(), c4);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "new Range(0.0, 1.0) - w[2]), this.rightBlock.height;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "new Range.0, w[2], constraint.getWidth(), h[3]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "new Range.0, w[2], h[2]), this.leftBlock.getHeight);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "new Range(0.0, this.rightBlock.getWidth() - w[2]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "new Range.0, 0.0) - w[2] + this.leftBlock.getWidth;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "new Range.0, w[2] + w[2]), this.leftBlock.getHeight);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "new Range.0, 1.0) - w[2] + this.leftBlock.getWidth;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "new Range(0.0, this.leftBlock.getWidth()), c4);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "new Range.0, 0.0) - w[2] + this.leftBlock.getWidth() / 2.0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "new Range(0.0, 1.0) - w[2] + this.leftBlock.getHeight();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "new Range(0.0, this.leftBlock.getWidth) - w[2]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "new Range.0, w[2] + w[2]), this.leftBlock.getHeightConstraintType);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "new Range(0.0, - w[2]), this.leftBlock.getHeightConstraintType);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Range(0.0, - w[2]), this.leftBlock.getHeight);",
                "identical": false
            }
        ],
        "buggy_line": "new Range(0.0, constraint.getWidth() - w[2]),",
        "fixed_line": "new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),"
    },
    "Mockito-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (k instanceof Class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (k instanceof ParameterizedType) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (k instanceof Class<?>) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (k instanceof \". && k.equals(m.getArguments())) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (k instanceof mockingArguments) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (!k.equals(m.getArguments())) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (!m.getReturnType().equals(k.getClass())) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (k instanceof Arrays.asList(k)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (k instanceof insts) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (k instanceof actualFromArguments) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (!m.getReturnType().equals(k.type)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isAssignableFrom(m.getRawClass())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (m.getArguments() == m.getRawClass()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (!m.isSynthetic() && m.getReturnType().equals(k.getClass())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (k instanceof getConstructor) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (!m.isSynthetic() && m.getRawClass().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (!m.getReturnType().equals(k.getName())) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (k instanceof \". && k.equals(m.getDeclared().getSimpleName())) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!m.isSynthetic() && m.getRawClass().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (k instanceof crFromArguments) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (!m.getReturnType().equals(k.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (!m.getReturnType() == m.getRawClass()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (k instanceof 3FromArguments) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (k instanceof Fixeds) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (!m.isSynthetic() && m.isFrom(k))) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (k instanceof getInstanceType) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (!m.isSynthetic() && m.getRawType().equals(k.getClass())) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (!m.isSynthetic() && m.isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (k instanceof \". && kd.equals(m.getArguments())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (k instanceof ParameterizedFromArguments) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!m.isSynthetic() && m.isDeclared()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (k instanceof \". && k.equals(m.getReturnType())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (k instanceof FixedArguments) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (!m.isSynthetic() && m.getRawClass().isArray()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (!m.getReturnType() == m.getRawParameterType()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!m.getReturnType().equals(k.class)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (k instanceof mockingFromArguments) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.isFrom(k))) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (!m.getReturnType() == 1 && m.getRawClass().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (!m.getReturnType() == m.getRawType()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (!m.isSynthetic() && m.isArray()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (!m.getReturnType().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (k instanceof \". && k.equals(m.getDeclared().getReturnType())) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isAssignableFrom(m.getModifiers())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (!k.equals(m.getReturnType())) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isAssignableFrom(m.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!m.isSynthetic() && m.getDeclaringClass().isArray()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (k instanceofsourceArguments) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (!m.isSynthetic() && m.isDeclared(k)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.getDeclaringClass().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (!m.getReturnType() == 1 && m.getRawClass().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') == m.getRawClass())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (!k.equals(m.getSignature().getReturnType())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (k instanceof \". && k < m.getArguments()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (k instanceofBeta) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (k instanceof \". && k < m.getRawClass()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (!m.isSynthetic() && m.getDeclaringClass().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (!m.isSynthetic() && m.getDeclaringClass().isAssignableFrom(k)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (!m.isSynthetic() && m.isDeclared(k))) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (k instanceof \". && k.equals(m.getDeclared())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (!m.isSynthetic() && m.getRawType().equals(k.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (k instanceof UnionTypeArguments) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (k instanceof RuntimeException) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (!m.isSynthetic() && m.getRawType().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredMethod(i))) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (k instanceof \". && k.equals(m.getDeclared().getAnnotated())) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isDeclared(m.getModifiers())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (!m.isSynthetic() && m.isSeriesFrom(k))) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (k instanceof ThrowsException) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (k instanceofSpacesFromArguments) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.typeFromValue(k))) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (!m.isSynthetic() && m.getRawClass().isAssignableFrom( k)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.getRawClass().isAssignableFrom(k))) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (m.getArguments() == m.getDeclaringClass()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (k instanceof Arrays.equals(k)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (k instanceofJSTypeArguments) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (!m.isSynthetic() && m.getReturnType().equals(k.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (!m.isSynthetic() && m.isActual()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (k instanceof \". && k < m.getDeclaringClass().isAssignableFrom(m.getReturnType())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.typeFromMatcher(k))) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (!m.getReturnType().equals(k.asFromArguments(k))) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredType())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (k instanceof inFromArguments) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (m.getArguments() == m.getSimpleName()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (!m.isSynthetic() && m.isPublic(k.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') == m.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.isExternsFrom(k))) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (!m.isSynthetic() && m.getRawClass().isAssignableFrom(k1)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (k instanceof \". && k.equals(m.getDeclaredreplace('/', '.') || m.typeFromVarMatcher(k))) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (k instanceof decodeArguments) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (k instanceof \". && k.equals(m.getDeclared().getComponentType())) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (k instanceof initialized) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (m.getArguments() == 1 || m.isExterns(k)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (!m.isSynthetic() && m.getRawClass().isDeclared(k)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (!m.isSynthetic() && m.isMember()) {",
                "identical": false
            }
        ],
        "buggy_line": "if (m instanceof CapturesArguments) {",
        "fixed_line": "if (m instanceof CapturesArguments && i.getArguments().length > k) {"
    },
    "Gson-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (value == Long.MIN_VALUE && value >= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value == Long.MIN_VALUE && value >= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (value == Long.MIN_VALUE &&",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos - 1) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value == Long.MIN_VALUE && value <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (value == Long.MAX_VALUE && value >= Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (value == Long.MIN_VALUE && v <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos + 1) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (value == Long.MAX_VALUE && value >= Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (value == Long.MIN_VALUE && value >= Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (value > Long.MAX_VALUE && value <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (value == Long.MIN_VALUE && buf.length() == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (value == Long.MIN_VALUE && pos == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (value == Long.MIN_VALUE && value >= SECONDS_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (value == Long.MIN_VALUE && value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (value > Long.MIN_VALUE && value <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (value == Long.MIN_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value == Long.MAX_VALUE && v <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (value == Long.MIN_VALUE && number <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (value == Long.MIN_VALUE && state.getDouble() == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (value == Long.MIN_VALUE && value >=Long) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (value == Integer.MIN_VALUE && value >= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (value == Long.MIN_VALUE && last_NUMBER_VALUE == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (value == Long.MIN_VALUE && value <= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (value == Long.MAX_VALUE && value <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (value == Long.MIN_VALUE && (value.charAt(pos + 1) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (value == Long.MIN_VALUE && buf.getTime() == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (value == Long.MIN_VALUE && negative_VALUE == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (value == Long.MIN_VALUE && buf.get() == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (value == Long.MIN_VALUE && buf.compareTo(NUMBER_VALUE) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (value == Long.MIN_VALUE && _value <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (value == Long.MIN_VALUE && buf.getType() == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (value == Long.MIN_VALUE || value > Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (value == Long.MIN_VALUE &&NEW_VALUE == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (value == Long.MIN_VALUE && bean >= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (value == Long.MAX_VALUE &&",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (value == Long.MIN_VALUE && s <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (value == Long.MIN_VALUE && curr == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (value == Long.MIN_VALUE && first_VALUE == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (value == Long.MAX_VALUE && i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (value == Long.MIN_VALUE && Integer.MAX_VALUE <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (value == Long.MIN_VALUE && c <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (value == Long.MAX_VALUE && value >=Long) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (value == Long.MIN_VALUE && buf.getLong() == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value == Long.MIN_VALUE && bean <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (value == Long.MIN_VALUE && file_VALUE == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (value == Long.MIN_VALUE || i == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (value == Long.MIN_VALUE && exp == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (value == Long.MIN_VALUE && Call_VALUE == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (value == Long.MIN_VALUE && value >= minEEK_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value > Long.MAX_VALUE && value >= Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (value == Long.MAX_VALUE && pos == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (value == Long.MIN_VALUE && key <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (value == Long.MIN_VALUE && hi <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (value == Long.MAX_VALUE && value >= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (value == Integer.MIN_VALUE && value <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (value.charAt(pos) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (value == Long.MIN_VALUE &&BasicValue != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (value == Long.MIN_VALUE && buf.compareTo(other) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (value == Long.MIN_VALUE && (value.charAt(pos - 1) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value == Long.MIN_VALUE && tokenLen <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (value == Long.MAX_VALUE && number <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos + 1) == Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (value == Long.MIN_VALUE && last_NUMBER_VALUE <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (value > Long.MAX_VALUE && value <= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (value == Long.MIN_VALUE && comparison == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (value == Long.MIN_VALUE && Math.equals(value) == Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value == Long.MIN_VALUE && s != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (value == Long.MAX_VALUE && value <= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (value == Long.MAX_VALUE && value >= SECONDS_NUMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (value == Long.MIN_VALUE && c <= Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (value == Long.MAX_VALUE && s <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos - 1) == Float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (value == Long.MIN_VALUE && u <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (value == Long.MIN_VALUE && value >= SECONDS_NUMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (value == Long.MIN_VALUE && value >= Segmented) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (value == Long.MIN_VALUE && (value.charAt(pos + 1) == Long.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos + 1) == Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos + 1) == number) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (value == Long.MIN_VALUE && !fillBuffer(value)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (value == Long.MIN_VALUE && buf.getMin().equals(e.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (value == Integer.MIN_VALUE && value >= SECONDS_VALUE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (value == Long.MIN_VALUE && buf.compareTo(NUMBER_VALUE) == 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos - 1) == Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (value == Long.MIN_VALUE && state.getComponentCount() == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (value == Long.MAX_VALUE && value != Long.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (value == Long.MIN_VALUE && state.getComponentCount() == 3) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (value == Long.MAX_VALUE && value >= SECONDS) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos + 1) == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (value == Long.MAX_VALUE && value >= this.EEK_VALUE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos - 1) == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (value == Long.MIN_VALUE && buf.getMin().equals(NUMBER_VALUE)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (value == Long.MIN_VALUE && Math.equals(value)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (value == Long.MIN_VALUE && buf.charAt(pos - 1) == number) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (value == Long.MIN_VALUE && value >= this.EEK_VALUE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (value == Long.MAX_VALUE && value >= SECONDS_VALUE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (value == Long.MAX_VALUE && value >= minEEK_VALUE) {",
                "identical": false
            }
        ],
        "buggy_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
        "fixed_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {"
    },
    "Closure-113": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parent.getType() == Token.FOR) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parent.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parent.getType() == Token.VAR || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parent.getType() == Token.VAR || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parent.getType() == Token.FOR && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parent.getType() == Token.FOR && parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parent.getType() == Token.ASSIGN) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parent.getType() == Token.VAR || parent.getLastChild() == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parent.getType() == Token.BLOCK) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parent.getType() == Token.VAR || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parent.getType() == Token.CATCH && parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parent.getType() == Token.CATCH && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parent.getType() == Token.VAR || parent.getChildCount() == 4) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parent.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parent.getType() == Token.FOR && parent.getChildCount() == 3) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parent.getType() == Token.VAR || parent.getChildCount() == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parent.getType() == Token.ASSIGN && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parent.getType() == Token.VAR || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent() != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parent.getType() == Token.FOR && parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parent.getType() == Token.VAR || parent.getChildCount() == 3) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parent.getType() == Token.VAR || parent.getCodingConvention().isExported(parent)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parent.getType() == Token.FOR && parent.getFirstChild() != n) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parent.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parent.getType() == Token.DEC || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parent.getType() == Token.DEC || parent.getLastChild() == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parent.getType() == Token.VAR || parent.getComponentCount() == 1) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parent.getType() == Token.VAR || parent.getintValue() != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parent.getType() == Token.TRY && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parent.getType() == Token.amount || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parent.getType() == Token.VAR || parent.getLastChild() == root) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parent.getType() == Token.MISS && parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (provided != null || parent.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parent.getType() == Token.VAR || parent.getChildCount() == 2) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parent.getType() == Token.ASSIGN || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parent.getType() == Token.synchron || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent().getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parent.getType() == Token.UL || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parent.getType() == Token.ANTIC && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parent.getType() == Token.FOR && parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parent.getType() == Token.FUNCTION || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parent.getType() == Token.HOOK) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parent.getType() == Token.\" || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parent.getType() == Token.ANTIC && parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent() == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parent.getType() == Token.EXPR_RESULT) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parent.getType() == Token.synchron || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parent.getType() == Token.VAR || parent.getSize() == 1) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parent.getType() == Token.synchron || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parent.getType() == Token.INC || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parent.getType() == Token.MISS && parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parent.getType() == Token.\" || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parent.getType() == Token.CATCH && parent.getFirstChild() != n) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parent.getType() == Token.EMPTY || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parent.getType() == Token.stack || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parent.getType() == Token.\" || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parent.getType() == Token.detachFromParent) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parent != null && parent.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parent.getType() == Token.ASSIGN || parent.getParent() != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parent.getType() == Token.symb || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parent.getType() == Token.BLOCK || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parent.getType() == Token.FUNCTION || parent.getLastChild() == null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parent.getType() == Token.symb || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parent.getType() == Token.stack || parent.getLastChild() == null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parent.getType() == Token.ASSIGN && parent.getFirstChild() != n) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parent.getType() == Token.symb || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parent.getType() == Token.FOR && parent.getLastChild() == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parent.getType() == Token.FOR && parent.getParent() != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parent.getType() == Token.acc || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parent.getType() == Token.INC || parent.getLastChild() == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parent.getType() == Token.VAR || parent.getUpperBound() != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent().getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parent.getType() == Token.stack || parent.getLastChild() == n) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parent.getType() == Token.DEC || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parent.getType() == Token.ASSIGN || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parent.getType() == Token.TRY && parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parent.getType() == Token.stack || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parent.getType() == Token.VAR || parent.getRootNode() != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parent.getType() == Token.VAR || parent.getComponentCount() == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parent.getType() == Token.combine || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parent.getType() == Token.IF || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (provided != null || parent.getType() == Token.BLOCK) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parent.getType() == Token.VAR || parent.getRootNode() == null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parent.getType() == Token.stack || parent.getChildCount() == 1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parent.getType() == Token.VAR || parent.getLastChild() != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent().getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parent.getType() == Token.INC || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (n.getType() == Token.NAME) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (provided != null || parent.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parent.getType() == Token.INC || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parent.getType() == Token.IF || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parent.getType() == Token.DEC || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent() == root) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parent.getType() == Token.FOR && parent.getChildCount() == 2) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parent.getType() == Token.DEC || parent.getFirstChild() == n) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parent.getType() == Token.UL || parent.getFirstChild() != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parent.getType() == Token.VAR || parent.getParent().getType() == Token.INC) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parent.getType() == Token.combine || parent.getLastChild() == n) {",
                "identical": false
            }
        ],
        "buggy_line": "if (provided != null) {",
        "fixed_line": "if (provided != null || requiresLevel.isOn()) {"
    },
    "JacksonDatabind-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "sb.append(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sb.append('>');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sb.append(_class.getGenericSignature(sb), _type);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sb.append(']');",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sb.append(_class.getGenericSignature(sb), _class);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sb.append('[');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sb.append(\">;\");",
                "identical": true
            },
            {
                "k": 8,
                "patch": "sb.appendGenericSignature(sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sb.append(String.valueOf(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sb.append(_class.getGenericSignature(sb), _localName, true);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sb.append(_class.toGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sb.append('L').append(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sb.append(\",body:\").append(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "sb.append(class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sb.append(_class.getGenericSignature(sb), true);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : sb;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sb.append(_class.getGenericParameterType().getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sb.append >= 0) ? type.toGenericSignature(sb) : sb;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sb.append(_currentSignature, sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sb.append(\"Generic-type=\").append(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sb.append('-').append(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sb.append(\"GenericSignatures:\").append(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sb.append(_inputBuffer, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sb.append('(_class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "sb.append('ValidSignature(sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : sb;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sb.append(_class.getGenericSignature(sb), _classInfo);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sb.append(_class.getGenericSignature(sb), _classDef);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sb.append(_classSignatureType, sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sb.append(_class.getGenericSignature(sb), _componentType);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sb.append(_class.getGenericSignature(sb), _localName);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sb.append(_class.getGenericSignature(sb), f.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sb.append(_class);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sb.appendTimeZoneSignature(sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sb.append(_classSignature, sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sb.append(_classType, sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonString.class;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sb.append(getClass().getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sb.appendThreadGroup(sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sb.appendSignature(sb, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sb.append(_class.getGenericSignatureType().getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sb.append(_class.getSignature(sb));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sb.appendGenericSignature(sb);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonType.getGenericSignature(sb);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sb.append jsType.toGenericSignature(sb);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sb.append(_class.getGenericSignature(sb), _inputBuffer, _class);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sb.append >= 0) ? type.toGenericSignature(sb) : JsonString.class;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonString.class;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sb.append(defaultType.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sb.append(0, _class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sb.append(Ast.class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sb.append(_class.getTypeFactory().getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sb.append(_class.getGenericSignature(sb), _defaultTypes.length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sb.append(_class.getGenericSignature(sb), context);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sb.append(_class.getGenericSignature(sb), _class, sb);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sb.append(format.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sb.append(_class.getGenericSignature(sb), _localName, sb);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sb.append >= 0) ? type.toGenericSignature(sb) : JsonType.getGenericSignature(sb);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "sb.append(_class.getGenericSignature(sb), _class) + \"\\n\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sb.append(_class.getGenericSignature(sb), _config.constructType(value));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sb.append(_class.getExceptionType().getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sb.append('L').append(_class.getGenericSignature(sb), _class);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sb.append(_class.getGenericSignature().getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonGenerator.class;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonNull.createJsonGenerator(sb);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sb.append(String.class.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sb.append(';');",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sb.append >= 0) ? type.toGenericSignature(sb) : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sb.append(_class.getGenericSignature(sb), _class) + \"}\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "sb.append(_class.getGenericSignature(sb), _nodeType);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sb.append(\"Signature\", _class, sb, offset, len);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sb.append(_class.getGenericSignature(sb), maxType);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sb.append(_class.getGenericSignature(sb), _class) + 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "sb.append(_class.getGenericSignature(sb), _elementType, true);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonPrimitive.class;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : BASE64_VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonNull.class;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonGenerator.class;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sb.append(_class.getGenericSignature(sb), _targetType);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : BASE64_VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sb.append(String.class.getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sb.append(_class.getGenericSignature(sb), _elementType);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.append(_class.getGenericSignature(sb), > 0) ? sb.toString() : JsonString.UTF8;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sb.append(defaultType.toGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sb.append(_class.getGenericSignature(sb), _currentSignatures);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sb.append(_class.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonType.NO_SLOT_NAME;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sb.append(_class.getGenericSignature(sb), JSON_encedType);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sb.append >= 0) ? _class.getGenericSignature(sb) : JsonType.getElementsType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sb.append >= 0) ? sb.toGenericSignature(sb) : JsonFactory.class;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "sb.append >= 0) ? type.toGenericSignature(sb) : JsonNull.createJsonGenerator(sb);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sb.append >= 0) ? type.toGenericSignature(sb) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sb.append(method.getGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sb.append(_classInputFactory.toGenericSignature(sb));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sb.append(_class.getGenericSignature(sb), _baseType);",
                "identical": false
            }
        ],
        "buggy_line": "sb.append(';');",
        "fixed_line": "sb.append(\">;\");"
    },
    "Codec-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lineSeparator != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lineSeparator != 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (debug != 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (debug != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (debugLength > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lineSeparator != null && !lineSeparator.equals(buf)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, header.length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (debug != System.arraycopy(buf, pos, i + 1, buf, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, header.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (lineSeparator != null && !lineSeparator.equals(buf, pos))) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (lineSeparator != null && !lineSeparator.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (lineSeparator != null && lineSeparator.charAt(pos) == this.lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, len) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (debug != System.arraycopy(buf, pos, buf, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (debug && buf.charAt(pos) == this.lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, lineSeparator, i + 1, bufpos + i)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (debug != System.arraycopy(buf, pos, buf, 0, lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, offset, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (lineSeparator != null && !lineSeparator.equals(buf[0])) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, offset, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, new char[pos + i], lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (lineSeparator != null && pos == lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (new String[pos] == '+' || pos == lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (debug && buf.charAt(i) == this.lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, lineSeparator, bufpos + i)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (debug != System.arraycopy(buf, pos, i + 1, buf, 0, header.length) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, length)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, len) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, header.length)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, start, len, buf, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, len);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, length)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (lineSeparator != null && !lineSeparator.isAssignableFrom(buf, pos)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (debug != System.arraycopy(buf, pos, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (lineSeparator != EMPTY && pos < lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, lineSeparator, i + 1, bufpos + i)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, new char[pos + i], lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, sourceSeparator.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, in.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, result.length) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (debug != System.arraycopy(buf, pos, i + 1, buf, 0, lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, result.length - i)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, sourceSeparator.length) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, sourceSeparator.length)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, result.length) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (debug != System.arraycopy(buf, pos, lineSeparator, i + 1, bufpos + i)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length) && !lineSeparator.equals(buf[0])) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, new String[pos + i], lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, bufsize - i)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, in.length) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, lineSeparator, i - pos)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (lineSeparator != null && !lineSeparator.getComponentType().isAssignableFrom(buf)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (debug) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, sourceSeparator.length) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, bufsize - i)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (new String[pos] == '+' || pos == lineSeparator.length - 1]) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, sourceSeparator.length) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, result.length - i)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, result.length) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, bufsize - i)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (debug != System.arraycopy(buf, pos, buf, 0, lineSeparator.length);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, lineSeparator.length - i)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (isSeparator(buf, pos) && !lineSeparator.equals(buf)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, result, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, lineSeparator, i - pos)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, lineSeparator, i + 1, new char[pos + i]) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, length)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (lineSeparator != null && lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, len)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, header.length)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, bufsize - i)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (lineSeparator != null && !lineSeparator.endsWith(buf, pos))) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (lineSeparator != null && inSeparator.charAt(pos) == this.lineSeparator.length) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, buf, 0, sourceSeparator.length)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, result, 0, lineSeparator.length)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, len - i)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (lineSeparator != System.arraycopy(buf, pos, i + 1, buf, args, i, lineSeparator, i)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, result.length)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, buf, 0, bufsize - i)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (newSeparator != System.arraycopy(buf, pos, i + 1, buf, 0, header.length)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (isSeparatorAt(buf, pos) && !lineSeparator.equals(buf)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (lineLength > 0) {",
        "fixed_line": "if (lineLength > 0 && pos > 0) {"
    },
    "JacksonDatabind-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (creatorProp != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (buffer.assignParameter(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (properties.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (config.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (ext.handlePropertyValue(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(activeView)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (ctxt.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (config.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (builder.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (typeDeser.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName,creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (ext.handlePropertyValue(creatorProp, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (config.isEnabled(DeserializationFeature.USE_DEFAULT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_DEFAULT_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleInView(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (ext.assignParameter(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Math.abs(creatorProp.deserialize(jp, ctxt) > 0 && !prop.visibleInView(jp, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Math.abs(creatorProp.deserialize(jp, ctxt) > 0 && !prop.hasCreatorAnnotation(jp, ctxt)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (activeView == null || propName > 0 && !prop.visibleInView(activeView)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleIncompleteParameter(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (properties.handleIdValue(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalStateException(\"Can not constructCreator to following FIELD_NAME/END_OBJECT) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName,creatorProp.findCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (properties.handlePropertyValue(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (config.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt, buffer)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleInView(creatorProp.getCreatorIndex(), propName, ctxt)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, bean, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_OBJECT)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (properties.handlePropertyValue(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt, bean)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for external type id (\"+_NULL_NAME/END_OBJECT) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (prop.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleIncompleteParameter(creatorProp.getCreatorIndex(), propName, ctxt)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_NULL_ARRAY_OBJECT)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (creatorProp.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleInView(ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleIncompleteParameter(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleIncompleteParameter(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleInView(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_VALUES_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalStateException(\"Can not constructCreator to following FIELD_NAME/END_ARRAY, propName, buffer\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleIncompleteParameter(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Can not constructCreator to following FIELD_NAME/END_OBJECT) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt,creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorProperty(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (content.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (prop.assignParameter(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt,creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleInView(ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (config.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.isCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.visibleInView(activeView)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Math.abs(creatorProp.deserialize(jp, ctxt) > 0 && !prop.visibleInView(activeView)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt, buffer, propName, ctxt.getInjectableValueIdPropName)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for external type id (\"+_NULL_NAME/END_OBJECT\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (properties.containsKey(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorProperty(creatorProp.getCreatorIndex(), propName, buffer)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Math.abs(creatorProp.deserialize(jp, ctxt) > 0 && !prop.hasCreatorProperty(jp, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for external type id (\"+_NULL_NAME/END_OBJECT)\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (bean.getClass() != _delegateDeserializer.deserialize(jp, ctxt)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, beanDesc.findCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (properties.handleIdProp(creatorProp.getCreatorIndex(), value)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value for external type id (\"+_NULL_NAME/END_OBJECT) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer[creatorProp.findCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalStateException(\"Can not constructCreator to following FIELD_NAME/END_OBJECT",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_AS_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_PROP_NAME)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (config.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_NULL_OBJECT)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_AS_OBJECT)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(ctxt,creatorProp.getCreatorIndex(), propName, ctxt)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorAnnotation(creatorProp.getCreatorIndex(), propName, ctxt)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Array.handlePropertyValue(jp, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new JsonMappingException(\"Can not constructCreator to following FIELD_NAME/END_OBJECT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInStyle(ctxt, buffer, propName, firstProp.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_OBJECT)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for \"+_beanDesc.getBeanClass(), propName, propName, buffer\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName,creatorProp.getCreatorIndex()+\") || propName > 0 && !prop.hasCreatorAnnotation(creatorProp.getInjectableValueIdPropName)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (t != JsonToken.START_OBJECT && !prop.visibleInView(ctxt, buffer, propName, beanDesc.getInjectableValueIdProp.hasCreatorAnnotation(DeserializationFeature.READ_ARRAY_OBJECT)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName,creatorProp.getCreatorIndex()+\") || propName > 0)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for \"+_beanDesc.findCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalStateException(\"Can not inject value for external type id (\"+_NULL_NAME/END_OBJECT) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for \"+_beanDesc.getBeanClass())) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (config.isEnabled(DeserializationFeature.WRAP_ROOT_VALUE_SEPARATOR) && !prop.hasCreatorProperty(creatorProp.getCreatorIndex(), propName, ctxt)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName, buffer)) throw new IllegalArgumentException(\"Unrecognized inject value id property '\"+prop.getName()+\"' for \"+_beanDesc.getBeanClass().isCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (ext.handlePropertyValue(jp, ctxt, propName,creatorProp.getCreatorIndex()+\") || propName > 0 && !prop.hasCreatorProperty(propName)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Math.abs(creatorProp.deserialize(jp, ctxt) > 0 && !propName.equals(prop.getInjectableValueIdPropType.getCreatorIndex())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
        "fixed_line": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {"
    },
    "JacksonDatabind-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return if (_typeIdVisible && !ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) return null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+_typePropertyName+\"'\", typeId);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+a.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"'\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"'\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"'\", typeId);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"'\", typeId);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), objectIdInfo.getRawClass());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"'\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), objectIdInfo.getRawClass());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"'\", typeId);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), objectIdInfo.getRawClass());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, this);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, this);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+a.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+_typePropertyName+\"' (for \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, this);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return if (_typeIdVisible && !ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) return this;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null as per [JACKSON-typePropertyName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw ctxt.mappingException(\"Missing external type id property '\"+_typePropertyName+\"'\", typeId);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+_typePropertyName+\"' (for subtype of \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': class \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, Object.class);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typeId+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\" vs \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, Object.class);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+_typePropertyName+\"': \"+iae.getMessage(), null, typeId);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typeId+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "throw ctxt.mappingException(\"Missing property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), objectIdInfo.getRawClass());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null as per [JACKSON-point number\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.constructType(typeId));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.constructType(typeId));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, t);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null as per [JACKSON-typePropertyName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getMessage());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, t);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null if (_objectIdReader.getRawClass())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, false);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.constructType(typeId));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getMessage());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, Object.class);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+a.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.getRawClass())) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or Object.getRawClass());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null as per [JACKSON-point number\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"' (for subtype of \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.getRawClass());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.getRawClass())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null: \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+a.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null as per [JACKSON-point number\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typeId+\"': \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\" vs \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.WRAPPER_ARRAY\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.getRawClass());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return if (_typeIdVisible && !ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+_typePropertyName+\"'\", typeId);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+idType.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), objectIdInfo.getRawClass());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null, t);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id type id property '\"+_typePropertyName+\"'\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+prop.getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.WRAPPER_ARRAY\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\" vs \"+iae.getMessage());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw ctxt.mappingException(\"Can not create polymorphic instances with id property '\"+getName()+\"' for external type id '\"+_typePropertyName+\"': \"+iae.getMessage(), null JsonSerializer or ClassUtil.WRAPPER_ARRAY\");",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "return NullifyingDeserializer.instance;"
    },
    "Math-69": {
        "fixes": [
            {
                "k": 1,
                "patch": "out[i][j] = t * r * j;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "out[i][j] = t * r * (t[i-1][col];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "out[i][j] = t * r * v;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "out[i][j] = t * r * j));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "out[i][j] = t * r * lu[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "out[i][j] = t * r * (t - r));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "out[i][j] = t * r * j);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "out[i][j] = t * r * (t[i][col];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "out[i][j] = t * r * (t - n));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "out[i][j] = t * r * 0.20;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "out[i][j] = t * r * (t[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "out[i][j] = t * r * (r.getEntry() + t));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "out[i][j] = t * r * (t - t));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "out[i][j] = t * r * 0.20));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "out[i][j] = t * r * 6;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "out[i][j] = t * r * nDev;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "out[i][j] = t * r * (t[i-1][col]) / r;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "out[i][j] = t * r * (t - j));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "out[i][0] = j * t.getEntryCount();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "out[i][j] = t * r * (t + t));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "out[i][j] = r * t.getEntryCount();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "out[i][j] = (t[i][j-1] - t.getEntry()) / r;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "out[i][j] = t * r * (t[i-1][col]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "out[i][j] = t * r.0 - t;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "out[i][j] = t * r * (1L) / r;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "out[i][j] = t * lu[i][col];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "out[i][j] = t * r * qr;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "out[i][j] = t * r * (t[i][col]) / r;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "out[i][j] = t * r * (t + n));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "out[i][j] = t * r * null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "out[i][j] = t * r * (c + t));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "out[i][j] = t * r * v + (t - r));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "out[i][j] = t * r * (t[i-1][col]));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "out[i][j] = t * r * edge.getEntry())];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "out[i][j] = t * r * Compiler.getEntry())];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "out[i][j] = t * r * date;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "out[i][j] = t * r * w;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "out[i][j] = t * r * (t[i-1][c];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "out[i][j] = t * r * t;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "out[i][j] = t * r * hex;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "out[i][j] = t * r * (r + t));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "out[i][j] = t * r * (t[i].doubleValue() + t));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "out[i][j] = t * r * args.getEntry())];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "out[i][j] = t * r * (t[i-1][v];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "out[i][j] = (t[i][j-1] - t[i-1][j-1]) / r;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "out[i][j] = (t[i][j-1] - t.getEntryCount())));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "out[i][j] = t * r * edge.getEntry()) + t;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "out[i][j] = t * r * (r.baseUri - t));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "out[i][j] = t * r * denominator;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "out[i][j] = t * r * edge.getEntryCount();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "out[i][j] = t * r *null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "out[i][j] = t * r * selectedHeight;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "out[i][j] = t * r * Math.sqrt(r));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "out[i][j] = t * r * 2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "out[i][j] = t * r * oldt;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "out[i][j] = t * r * selected - t;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "out[i][j] = r * lu[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "out[i][j] = r * t;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "out[i][j] = bp[i][j-1] - t * r;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "out[i][j] = t * r *F;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "out[i][j] = t * r * prev;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "out[i][j] = t * r * Math.pow(10, i));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "out[i][j] = (t[i][j-1] - t.getEntry()) / 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "out[i][j] = t * r * 360;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "out[i][j] = t * r * (1L)];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "out[i][j] = t * r * (t[i][col]));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "out[i][j] = t * r * n);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "out[i][j] = t * r * (nrows - t));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "out[i][j] = t * r * n;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "out[i][j] = (t[i][j-1] - t) * r;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "out[i][j] = t * r * this.getEntryCount();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "out[i][j] = t * r * radius;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "out[i][j] = (t[i][j-1] - t.getEntry(r * r));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "out[i][j] = - r * t;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "out[i][j] = t * r * Math.sin(theta), t);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "out[i][j] = t * r * (t[i-1][c));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "out[i][j] = t * r * base64 - r;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "out[i][j] = (t[i][j-1] - t) / r;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "out[i][j] = r * v.getEntryCount();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "out[i][j] = t * r * Math.sin(theta))));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "out[i][j] = t * r * (rUTC - t));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "out[i][j] = t * r *Position.getEntry())];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "out[i][j] = t * r3;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "out[i][j] = t * r * (rShadow - t));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "out[i][0] = j * t.getEntry().evaluate(scope));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "out[i][j] = (t[i][j-1] - t.getEntry() * r));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "out[i][j] = t * r * (t[i][v];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "out[i][j] = t * r * (t[i][col]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "out[i][j] = t * r * (t[i][col]) - t;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "out[i][j] = t * r * d;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "out[i][j] = t * r * (rRaw - t));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "out[i][j] = t * r * s.getEntryCount();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "out[i][j] = t * r * lu[i][col];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "out[i][j] = t * r * (t.getEntry() + t));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "out[i][j] = t * r * (t[i], n) ? 1 : 0d;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "out[i][j] = t * r * Math.sin(theta));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "out[i][j] = t * r *Position.getEntryCount();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "out[i][j] = t * r * bean;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "out[i][j] = t * r * n) / 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "out[i][j] = t * r * args.getEntry()) - t;",
                "identical": false
            }
        ],
        "buggy_line": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
        "fixed_line": "out[i][j] = 2 * tDistribution.cumulativeProbability(-t);"
    },
    "Closure-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (!hasErrors()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (hasErrors()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (!maybeExterns.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (!maybeExterns.isEmpty()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (!provide.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (!maybeExterns && property.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (!inExterns && (parent != null) && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (!maybeExterns && property.getType() == Token.BLOCK) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (!maybeExternsInputs && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(n)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (!maybeExternsCheck && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (!provide.containsKey(n)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!maybeExternsInputs && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (hasInputs && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (!hasAnySingletonTypeTags() && options.hasCodeChanged()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (!maybeExternsInputs && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (hasInputs && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (!inputs.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (!maybeExternsCheck && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (!hasInputs && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(root)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(this)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (!hasStubDeclaration && options.checkTree()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (!inExterns && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (!maybeExternsInputs && options.hasCodeChanged()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (!maybeExterns && property.getType() == Token.SCRIPT) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (!hasInputs && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (!maybeExternsCheck && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (!inExterns && property.getType() == Token.VAR) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (!maybeExternsInputs && !name.externs.contains(input)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (!nodesToCollapse.containsKey(n)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (!provide.isEmpty()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (!provides.containsKey(n)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!hasKnownTypeOfThis) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (!hasStubs && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (provide.getAstRoot(this)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (!maybeExternsByNameMap.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (!inExterns && (parent != null) && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(allInputs)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (!maybeExterns.contains(name)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (!hasStubs && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (!inExterns && property.getType() == Token.BLOCK) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (!nodes.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!inExterns && (parent != null) && NodeUtil.isExpressionNode(input)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!inExterns && (parent != null) && NodeUtil.isFunctionAnonymous(n)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (!inExterns && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (!hasAnySingletonTypeTags() && options.hasOwnDeclaredMethod(name)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (!hasKnownTypeOfThis && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (!maybeExternsInputs) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (!maybeExternsInputs && !provide.externs.contains(n)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (!hasStubs && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (!inExterns && (parent != null) && inputs.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (!inExterns && (parent != null) && NodeUtil.isFunctionDeclaration(n)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (!maybeExternsInputs && !provide.externs.containsKey(n.getAstRoot())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (!maybeExternsInputs && !provide.externs.containsKey(name)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (hasInputs && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (!maybeExterns.contains(input)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (!hasAnySingletonTypeTags() && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (!hasKnownTypeOfThis && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (!inExterns && (parent != null) && inputs.contains(input)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (!nodesToAlias.isEmpty()) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(callNode)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (!hasStubDeclaration && options.check()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(root)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (!hasAnySingletonTypeTags() && options.hasEnumParameterType()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (!maybeExternsCheck && options.checkTreeEqualsSilent(root.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (!maybeExternsInputs && !name.externs.contains(root.getFirstChild())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (!maybeExternsInputs && !name.externs.contains(root.getAstRoot())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (!inExterns && options.checkTreeEqualsSilent(name)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (!hasOwnDeclaredNames && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (!hasBody) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (!hasStubDeclaration && options.checkTreeEqualsSilent(file)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (!maybeExternsInputs && !provide.externs.contains(input)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (!inExterns && (parent != null) && inputs.containsKey(input)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (!hasOwnDeclaredNames && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (hasInputs && options.checkTreeEqualsSilent(n)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (!hasInputs && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(n)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (hasInputs && inputs.contains(name)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (!hasAnySingletonTypeTags() && options.checkTreeEqualsSilent(rootType)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (!maybeExterns && property.getType() == Token.LABEL) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (!nodesToKeep.contains(n)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(rootName)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (!maybeExterns && property.getType() == Token.FUNCTION) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (!maybeExternsInputs && !name.externs.contains(n.getAstRoot())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (!hasAnySingletonTypeTags() && options.checkTreeEqualsSilent(input)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (!maybeExterns && property.getType() == Token.ERROR) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (!inExterns && (parent != null) && NodeUtil.isExpressionNode(parent)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (!hasInputs && options.checkTreeEqualsSilent(n)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(allInputs)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (!hasOwnDeclaredMethod(name)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (hasInputs && options.checkTreeEqualsSilent(this)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (!maybeExternsCheck && options.checkTreeEqualsSilent(root.getChildCount())) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (!maybeExterns && options.checkTreeEqualsSilent(this)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
        "fixed_line": "if (options.dependencyOptions.needsManagement()) {"
    },
    "Csv-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_YEAR.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final CSVFormat EXARY = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_coefficients.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Reflect.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Merged.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ENCODING.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Factory.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PER_YEAR.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IgnoreEmptyTokens.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyValues();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOAD_FACTOR.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ pair.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Tag.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IgnoreEmptyMethod.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ steps.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final CSVFormat EX formatter = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSE_OPER_YEAR.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PREFIX.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ANNOTATION;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final CSVFormat EXCEL = className.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CATEGORY.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_YEAR;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_PROPERTY;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final CSVFormat EX needle = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final CSVFormat EX tabs = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Readers.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_AffEmptyMethod.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final CSVFormat EXCEL = a.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RefProperties.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final CSVFormat EX optimization = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final CSVFormat EXCEL = allNames.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_concrete.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final CSVFormat EX=\" = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final CSVFormat EXCEL = \"Format.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_DAYS.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmpty(null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final CSVFormat EXKeyException = CSVFormat.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSE_OCCURRENCE_COMPARATOR;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PAINT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IMPLEMENTS.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_SERIALIZER;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_AGG.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_FACTORY_true;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_Shape.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final CSVFormat EXCEL = coefficients.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_LENGTH;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_COLON;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final CSVFormat EXARY = CSVFormat.withIgnoreEmptyValues(false);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_coefficients.removeIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSER_FEATURES.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_InnerCELLinesIgnored.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ROOT_VALUE_SEPARATOR;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_Integer.valueOf(false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_FACTOR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final CSVFormat EXCEL = 1.0.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final CSVFormat EXCEL = new CSVFormat(false);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Tag.valueOf(false);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSE_OTED.withIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_STRING_AS_NULL;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_InnerCELL;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_YEAR.isIgnoreEmpty(false);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_FOREGROUND_AS_STRING;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PROPERTY;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_TO_LIST;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_REACHABLE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_YEAR_16_BASED(false);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyValues(false);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_DAY;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyTokens(false);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_AS_STRING;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_Generation;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_YEAR.withIgnoreEmpty(null);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_398;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_BUFFER_SIZE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyMethod(false);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_SIZE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyName(false);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_PAINT;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_AS_NULL;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IALIZER;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSER_FEATURES;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_OFFSET;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_TO_INT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_black;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_EPSILON;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final CSVFormat EXARY = CSVFormat.withIgnoreEmpty(null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_ MINUTEL;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Factory.withIgnoreEmptyMethod(false);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final CSVFormat EXCEL = a.withIgnoreEmptyValues();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Merged.withIgnoreEmpty(null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_FOREGROUND_FORMAT;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSE_OCCURRENCE_DATE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PARSE_PER_DAY;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_PER_SECOND;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_TO_ALIAS_PREFIX;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_FOREGROUND_AS_NULL;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final CSVFormat EXCEL = allNames.withIgnoreEmpty(null);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_UPPER;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_KEY_DAYS;",
                "identical": false
            }
        ],
        "buggy_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "fixed_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);"
    },
    "Codec-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new String(bytes, 0, bytes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new String(bytes, Charsets.UTF_8);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new String(bytes, Charsets.ISO8601);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new String(bytes, Charsets.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new String(bytes, Charsets.ISO);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new String(bytes, 0, 0, bytes.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new String(bytes, Charsets.MAX_insS);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new String(bytes, Charsets.UTF8);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new String(bytes, Charsets.wrap_8859_1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new String(bytes, Charsets.class);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new String(bytes, Charsets.MAX_INPUT);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new String(bytes, Charsets.ISOContentType);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new String(bytes, Charsets.BYTE_ARRAY, null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new String(bytes == null ? NULL_VALUE : bytes.length);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new String(bytes, Charsets.MAX_ins);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new String(bytes, Charsets.MAX_ins_1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new String(bytes, Charsets.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new String(bytes, Charsets.NON_ASCII);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new String(bytes, Charsets.MAX_ins_1 + bytes);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new String(bytes, Charsets.MAX_insn);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new String(bytes, Charsets.ISOtry_1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new String(bytes, Charsets.ISO).toCharArray();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new String(bytes, Charsets. behavior);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new String(bytes, Charsets.BYTE_ARRAY, bytes);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new String(bytes, Charsets. useful_1_1 + bytes);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new String(bytes, Charsets.ZOOM_OUT_OF_YEAR);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new String(bytes, Charsets.ISO warnings);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new String(bytes, Charsets.offset);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new String(bytes, Charsets.DI_1_OF_DAY);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new String(bytes, 0, 0, 0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new String(bytes, off, len);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new String(bytes, Charsets.ISONulls);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new String(bytes, Charsets.UTF-8);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new String(bytes, Charsets.MAX_ALPHA_SIZE);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new String(bytes, Charsets.ISO8601_DECLARTERS);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new String(bytes, Charsets.DI_1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new String(bytes, Charsets. exposed_1_1 + bytes);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new String(bytes, Charsets.PLAIN);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new String(bytes, Charsets.ZOOM_8859_1 + bytes);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new String(bytes, 0, 0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new String(bytes, Charsets.ISO8601_NAME, bytes);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new String(bytes == null ? NULL_CHAR : bytes.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new String(bytes, Charsets.ISO == null ? \"\" : bytes);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new String(bytes, Charsets.ISORIGHT);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new String(bytes, Charsets.ISOUTF_8);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new String(bytes, Charsets.vendor);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new String(bytes, Charsets. inclusion_1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new String(bytes, Charsets. Concurrent_1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new String(bytes, Charsets.MAX_ins_1 + bytesEncodingNames.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new String(bytes, Charsets.ISO == null ? NO_8859_1 : bytes);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new String(bytes, Charsets.NON_NUMERIC_LEADING_ZODS);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new String(bytes, Charsets.wrap_8859_1 + bytes);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new String(bytes, Charsets.Plain);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new String(bytes, Charsets.UTC);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new String(bytes, Charsets.ISO8601_IT_1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new String(bytes, Charsets.DI_1_OF_YEAR);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new String(bytes, Charsets.ISO8601_DECLARATION);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new String(bytes, Charsets.Move_1_1 + bytes);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new String(bytes == null ? \"bytes\" : bytes.getBytes());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new String(bytes, Charsets.ISO == null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new String(bytes, Charsets.DI_1_ON_EXTERS);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new String(bytes, Charsets.ISODefs);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new String(bytes, Charsets.NON_NUMERIC_LEADING_ZOTED);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new String(bytes, Charsets.NON_NUMERIC_LEADING_ZEROS);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new String(bytes, Charsets. getJson_1 + bytes);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new String(bytes, Charsets.black);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new String(bytes, Charsets. tokenizer_8859_1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new String(bytes, Charsets.mapping);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new String(bytes, Charsets.BOTH);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new String(bytes, Charsets.ISO8601_NON_ASCII);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new String(bytes, Charsets. followed_1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new String(bytes, Charsets.ISO contentType);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new String(bytes, Charsets. exposed_1 + bytes);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new String(bytes, Charsets. release_1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new String(bytes, Charsets.len);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new String(bytes, Charsets.ISOcalendar);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new String(bytes, Charsets. exposed_1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new String(bytes, Charsets.ISOpos);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new String(bytes, Charsets.ISOFactory);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new String(bytes, Charsets. tokenizer_8859_1 + bytes);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new String(bytes, Charsets.INTERFACE);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new String(bytes, Charsets.delimiter);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new String(bytes, Charsets.R_8859_1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new String(bytes, Charsets.MAX_insns);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new String(bytes, Charsets.R_PAINT);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new String(bytes, Charsets./>);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new String(bytes, Charsets.ISO1.0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new String(bytes, Charsets.NON_NUMERIC_LEADING_ZOTES);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new String(bytes, Charsets.BYTE_ARRAY);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new String(bytes, Charsets.R_DOUBLE);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new String(bytes, Charsets.DI_1_ON_EXPORT);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new String(bytes, Charsets.DI_1_OF_PA_1 + bytes);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new String(bytes, Charsets.ISO );",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new String(bytes == null ? \"bytes\" : bytes.toCharArray());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new String(bytes, offset, Charsets.ISO8601);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new String(bytes, Charsets. gc);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new String(bytes, Charsets.TYPE);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new String(bytes, 0, bytes.length + 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new String(bytes, Charsets.DI_1_ON_EXTENDED);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new String(bytes, Charsets.MAX_INPUT_1 + bytes);",
                "identical": false
            }
        ],
        "buggy_line": "return new String(bytes, Charsets.ISO_8859_1);",
        "fixed_line": "return newString(bytes, Charsets.ISO_8859_1);"
    }
}