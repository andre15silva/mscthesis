{
    "Bears-159": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddUnknown:mm: HH\";",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd charset:mm: HH\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd_PATTERN_FORMAT:mm: HH\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH = \"yyyy\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddError:mm: HH\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddTRY:mm: HH\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddmm: HH\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\", false ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddFLOAT:mm: HH\";",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd \";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddDeprecated:mm: HH\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH = \"yyyy-dd\";",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddField:mm: HH\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd[5]:mm: HH\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddUnknown: HH\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToFormatter.FORMAT_PATTERN ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd backwards:mm: HH\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd collection:mm: HH\";",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd=0:mm: HH\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddRequired:mm: HH\";",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd later:mm: HH\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd latermm: HH\";",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddUnknown:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append (ALF_PATTERN ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd keys:mm: HH\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddRequired:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddValue-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddValue-dd'HH:mm: HH\";",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String TS_PATTERN_PATTERN = \"yyyy-MM-dd'HH:mm: HH\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd Extra:mm: HH\";",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String TS_FORMAT = \"yyyy-MM-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddUnknown:mm: HH\" ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd_PATTERN:mm: HH\";",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append (Unknown ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddObjects:mm: HH\";",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddHOUR:mm: HH\";",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd-dd'HH:mm: HH\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddotal_PATTERN\";",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ables:mm: HH\";",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddBefore HH-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddIndexes:mm: HH\";",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddBeforename:mm: HH\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToFormatter.class ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd ISO_PATTERN\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-len\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddgetId_PATTERN\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd charset:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd_Unknown:mm: HH\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddNodeName:mm: HH\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd=\\\":mm: HH\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToFormatter.null ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\", DateTimeFormatter.null ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append (QUOTE\";",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( HEX_PATTERN ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddFiles:mm: HH\";",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd Extra:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) static final DateTimeFormatter.append (Unknown ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) static final DateTimeFormatter.append ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddError:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dditerable:mm: HH\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddIA_PATTERN\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd keys:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddBeforeArgument:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddWS:mm: HH\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddBeforeABLE_PATTERN\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd[\" + \"yyyy\";",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( '/' ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( '-' ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String TS_PATTERN_PATTERN = \"yyyy-MM-dd_PATTERN\";",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddRETURN\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToFormatter.timeZone ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddBeforename:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddHashSet:mm: HH\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd_PATTERN_FORMAT;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd does notmm: HH\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd Prefix_PATTERN\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd_domain:mm: HH\";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( shade_PATTERN ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append (UnknownUnknown ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH = \"yyyy;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd later: HH\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String TS_PATTERN_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddRequired:mm: HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddBeforeArgument:mm: HH\";",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToFormatter.FORMAT_STR_PATTERN ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ables:mm: HH-dd\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToFormatter.timeZone ( ) , false ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( \";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH-dd'HH: HH\";",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) .append ( ToK ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd'HH:mm: HH\" ) static final DateTimeFormatter.append ( DAYS_PATTERN ) ;",
                "identical": false
            }
        ],
        "buggy_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
        "fixed_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss[.S]\"; private static final DateTimeFormatter TS_FORMAT = new DateTimeFormatterBuilder() .appendPattern(\"yyyy-MM-dd HH:mm:ss\") .appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true) .toFormatter();"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encrypted = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = methods.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encrypted = methods.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = expr.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = leave.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = title.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encrypted = expr.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encrypted = leave.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.getCompress ( ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.getise ( ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.get\u2c5a ( ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encrypted = title.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.get DataTables ( ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = Zip.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = references.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.get COM ( ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.getExport ( ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = vars.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encrypted =lc.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getSummary ( ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = spec.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedarnDataKeys = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDataKeys = request.get sch ( ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encrypted = invocation.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = classLoader.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = xx.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getBuilt ( ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = invocation.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encrypted = references.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encrypted = classLoader.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.get>\"; ( ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedDataKeys = request.getsvc ( ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = req.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.get\u6e1a ( ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = handle.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys =lc.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.getStarted ( ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encrypted = resourceType.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encrypted = req.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = request.get\u2ce2 ( ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = resourceType.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.get\u8009 ( ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.get resourceType ( ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = type.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encrypted = Modifier.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = STRING.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.get declar ( ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.get2.0' ( ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.get Human ( ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.getsequence ( ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encrypted = vars.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = Modifier.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encrypted = spec.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.get ( ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encrypted = COM.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.get\u03b5 ( ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = COM.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = missing.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.get\u6d3e ( ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.get openFile ( ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encrypted = xx.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys =About.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encrypted = handle.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = mods.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.get -> ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = cls.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.get ( )DataKeys.getDeclaring ( ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.get tarinfo ( ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted = STRING.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.get' ( ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encrypted = type.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encrypted =RowCount.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encrypted = Zip.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encrypted = mods.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedcentDataKeys = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encrypted = request.get\u2c5a ( ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted = avail.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.get ( )DataKeys.get ( ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encrypted = original.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encrypted ADataKeys = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encrypted = url.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encrypted = strength.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encrypted = rv.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encrypted =INT.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encrypted =Aliases.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encrypted = buffered.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encrypted =\u756f.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encrypted = request.getCompress ( ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encrypted = null.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encrypted = request.getBuilt ( ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encrypted = getLayout.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encrypted = request.getise ( ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encrypted COMDataKeys = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encrypted evenDataKeys = request.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encrypted =Buffer.getDataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getDataKeys ( ) .DataKeys ( ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedarnDataKeys = request.getise ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.get COM COM ( ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.get ( )DataKeys ( ) ;",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-131": {
        "fixes": [
            {
                "k": 1,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 4 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 4 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value >= 2 ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int index = Integer.valueOf ( temp.substring ( 1, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 16 >= 0 ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int index = Integer.valueOf ( temp ) , 16 >= 16 ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int index = Integer.valueOf ( value.substring ( 1, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, value ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value >= 0 ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value >= 3 ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 1 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int index = Integer.valueOf ( index ) , 16 >= 16 ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int index = Integer.valueOf ( temp.substring ( -1, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 15 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 0 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int index = Integer.valueOf ( text.substring ( 0, 4 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , position += 16 ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ? 16 : Integer.valueOf ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , position + 4 ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 3 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 11 ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 16 ) , 16 >= 0 ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int index = Integer.valueOf ( value.substring ( , 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 0 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int index = Integer.valueOf ( value.substring ( -1, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , position += 4 ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int index = Integer.valueOf ( f.substring ( 0, 4 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value.substring ( 2 ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0.0 ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int index = Integer.valueOf ( str.substring ( 0, 4 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 1 ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( 2 ) , value.substring ( 2 ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ? 16 : Integer.valueOf ( index ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 1 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value >= 1 ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ? 16 : Integer.valueOf ( index + 4 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 3 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int index = Integer.valueOf ( value.substring ( i, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int index = Integer.valueOf ( str.substring ( 0, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , position ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int index = Integer.valueOf ( minPrintedDigits.substring ( 0, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( 2 ) , value.substring ( 2 ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int index = Integer.valueOf ( temp.substring ( value, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value >= 16 ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int index = Integer.valueOf ( index.substring ( 0, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 17 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int index = Integer.valueOf ( text.substring ( 0, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , position + 4 ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int index = Integer.valueOf ( minPrintedDigits.substring ( 0, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 15 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int index = Integer.valueOf ( temp.substring ( value, 16 ) , 16 >= 0 ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int index = Integer.valueOf ( value.substring ( 0, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int index = Integer.valueOf ( value.substring ( -1, 2 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 15 ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int index = Integer.valueOf ( minPrintedDigits.substring ( 0, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 1 ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int index = Integer.valueOf ( value.substring ( i, 16 ) , 16 >= 0 ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int index = Integer.valueOf ( temp.substring ( -1, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , Short.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( 2 ) , value.substring ( 2 ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , Integer.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value >= 0 ? 16 : Integer.valueOf ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 2 ) , value ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( 2 ) ,",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ? 16 : Integer.valueOf ( index + 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int index = Integer.valueOf ( minPrintedDigits.substring ( 0, 16 ) , 16 >= 0 ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 2 ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int index = Integer.valueOf ( start.substring ( 0, 16 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 4 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value.substring ( 2 ) , position += 16 ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) ,",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int index = Integer.valueOf ( start.substring ( 0, 16 ) , 16 >= 0 ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 2 ) , 0 ? 16 : Integer.valueOf ( value ) , 0 ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value.substring ( 2 ) , position += 4 ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( value.substring ( 2 ) , position ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value.substring ( 2 ) , position + 4 ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 16 >= 0 ? 16 : Integer.valueOf ( 2 ) , value.substring ( 2 ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int index = Integer.valueOf ( temp.substring ( , 16 ) , value >= 0 ? 16 : Integer.valueOf ( value ) ,",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , 2 ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int index = Integer.valueOf ( temp.substring ( 0, 16 ) , value.substring ( 3, 3 ) , value.substring ( 2 ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int index = Integer.valueOf ( index.substring ( 0, 4 ) , 16 ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int index = Integer.valueOf ( temp.substring ( 1, 16 ) , value >= 2 ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int index = Integer.valueOf ( minDigits.substring ( 0, 16 ) , 16 ) ;",
                "identical": false
            }
        ],
        "buggy_line": "int index = Integer.valueOf(temp.substring(0, 2), 16); if (protocol >= 3) { double value = Short.valueOf(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.valueOf(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);",
        "fixed_line": "int index = Integer.parseInt(temp.substring(0, 2), 16); if (protocol >= 3) { double value = (short) Integer.parseInt(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.parseByte(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.parseInt(temp.substring(4), 16);"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return Blob.of ( uri.get ( ) ,Host.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1,",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 0,",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1, uri.length ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 2, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return Blob.of ( getPreviousId.get ( ) ,Host ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return Blob.of ( uri.get ( ) , VI ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return Blob.of ( getPreviousId.get ( ) ,Host ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 1,",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.get ( ) .substring ( 1, uri.length ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( null ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return Blob.of (uri.getHost ( ) , GRE.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Blob.of ( uri.get ( ) ,\ub2ec.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return Blob.of ( uri.get ( ) ,Host.get ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return Blob.of ( uri.get ( ) ,\uc158.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return Blob.of ( uri.get ( ) ,driver.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return Blob.of ( uri.get ( ) ,\u8db4.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1,",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1, 1 ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return Blob.of (\u8463.get ( ) , uri.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return Blob.of (uri.getHost ( ) , regex.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return Blob.of (\u0163.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 0,",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.getPath ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return Blob.of ( uri.get ( ) ,Popen.get ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return Blob.of ( uri.get ( ) , Everything.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( -1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 2, uri ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return Blob.of (uri.getHost ( ) ,/2.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return Blob.of (uri.getHost ( ) ,/2.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return Blob.of ( uri.get ( ) ,Popen.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 0,",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return Blob.of ( uri.get ( ) ,Host.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return Blob.of (\u0163.getHost ( ) , uri.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri.length ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return Blob.of (uri.getHost ( ) , uri.getPath ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) .substring ( 1,",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( null,",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return Blob.of ( \"1\".getHost ( ) , uri.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return Blob.of ( uri.get ( ) ,\u63c0.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return Blob.of ( getPreviousId.get ( ) ,Host ( ) , uri.getPath ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Blob.of (\u0163.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return Blob.of (adict.getHost ( ) , uri.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Blob.of ( debugging.getHost ( ) , uri.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) .substring ( 1,",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return Blob.of ( uri.get ( ) ,\u8463.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return Blob.of ( uri.get ( ) , Rem ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.getPath ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .substring ( 2, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return Blob.of ( uri.get ( ) ,driver.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) .substring ( 1, uri.length ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Blob.of (uri.getHost ( ) , GRE.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return Blob.of ( uri.get ( ) , VI ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return Blob.of ( uri.get ( ) , Everything.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return Blob.of ( uri.get ( ) ,Host.get ( ) , uri.getPath ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return Blob.of ( uri.get ( ) , Everything.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.get ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) .get ( ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return Blob.of (uri.getHost ( ) , regex.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.getPath ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return Blob.of ( uri.get ( ) ,\ub2ec.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.get ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return Blob.of (\u8463.get ( ) ,uri.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return Blob.of ( uri.get ( ) , filterId.get ( ) , uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return Blob.of ( uri.get ( ) ,Host.getPath ( ) , uri.getPath ( ) .substring ( 1, uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return Blob.of (\u0163.get ( ) ,63.getPath ( ) , uri.get ( ) .substring ( 1, uri.getPath ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) , uri.get ( ) .substring ( 1,",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Blob.of ( uri.get ( ) ,Host ( ) ) .getPath ( ) , uri.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return Blob.of (uri.getHost ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 1, uri.length ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return Blob.of (\u8463.get ( ) , uri.get ( ) , uri.getPath ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return Blob.of (uri.getHost ( ) , GRE.getPath ( ) , uri.get ( ) .substring ( 1, uri ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "beanDesc = new AnnotationValueDeserializer ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "beanDesc = new AnnotationValueDeserializer ( this, deserClass ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if ( aclsClass == deserClass ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "beanDesc = new AnnotationValueMethodDeserializer ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass ) ; }",
                "identical": false
            },
            {
                "k": 6,
                "patch": "bean beanDesc = new AnnotationValueDeserializer ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "tryFoldPropertyHandler ( beanClass, deser ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "beanDesc = new AnnotationValueMethod ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deser ) ; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "beanDesc = new AnnotationValueDeserializer<Property> ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( this, deserClass ) ; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( gen, deserClass ) ; }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "tempOneTimeFilePrefix ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( acls == deserClass ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final Class<Property> null ) { return newIfValue ( deserClass ) ; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "beanDesc = new AnnotationValueMethodDeserializer ( this, deserClass ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if ( aclsClass ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "bean beanDesc = new AnnotationValueMethodDeserializer ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "beanDesc = new AnnotationValueDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( null ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if ( aclsClass != deserClass ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "beanDescTreeEqualsValueDeserializer ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "beanDesc = new AnnotationValueMethodProperty ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "tryFoldPropertyHandler ( beanClass ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "tryFoldProperty ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "beanDesc = new AnnotationValueDeserializer ( null ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass, this ) ; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final Class<Property> null ) { return newIfValue ( this, deserClass ) ; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass, method ) ; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "tryFoldPropertyHandler<Key, E> deserClass = null ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass, gen ) ; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "beanDesc = new AnnotationValueMethodDeserializer ( deser ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( ctxt ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( beanClass ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "tryFoldPropertyHandler<Property> deserClass = new AnnotationValueDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "beanDesc = new AnnotationValueDeserializer ( deser ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final Class<Property> null ) { return newIfValue ( ) ; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( null, deserClass ) ; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "tryFoldPropertyHandler<Property, E> deserClass = null ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueMethodDeserializer ( ctxt ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "beanDesc = new AnnotationValueByProperty ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "tryFoldPropertyHandler ( null ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final Class<Property> null ) { return newIfValue ( null ) ; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "beanDesc = new AnnotationValueDeserializer ( ctxt, deserClass ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "bean beanDesc = new AnnotationValueDeserializer ( this, deserClass ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "beanDesc = new AnnotationValueDeserializer<Property> ( this, deserClass ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( serializers ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueMethodDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final Class<Property> deserClass = ( AnnotationValue ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "tryFoldPropertyHandler<Property> deserClass = new AnnotationValueDeserializer ( null ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueMethodDeserializer ( null ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "endInstantiatorInClass ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "tryFoldPropertyHandler<Property> deserClass ( null ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( null ) ; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final Class<Property> null ) { return newIfValue ( deser ) ; }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "beanDesc = new AnnotationValueDeserializer ( config ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "tryFoldProperty ( beanClass, deser ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.isProperty ( ) ; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( null ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "tryFoldPropertyHandler<Property, E> deser = null ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final Class<Property> deserClass = ( Class<Property ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.isPropertyValue ( ) ; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( gen, deser ) ; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueMethodDeserializer ( beanClass ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final Class<Property> deserClass = ( AnnotatedClass ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deser, method ) ; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( object, deserClass ) ; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ( deserClass ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "tryFoldPropertyHandler<Key, E> deser = null ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.isPropertyHandler ( ) ; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( config ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass, path ) ; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass, null ) ; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( this, deser ) ; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "tryFoldPropertyHandler ( beanClass, deserClass ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "bean beanDesc = new AnnotationValueDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.isPropertyDeserializer ( ) ; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if ( acls != deserClass ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "tryFoldPropertyHandler<Property> deserClass ( ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "beanDesc = new AnnotationValueDeserializer ( deserClass, method ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( t ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "tryFoldPropertyHandler<Property> deserClass = null ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.getXValueDeserializer ( ) ; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final Class<Property> null ) { return newIfValueDeserializer ( deserClass ) ;}",
                "identical": false
            },
            {
                "k": 87,
                "patch": "beanDesc = new AnnotationValueDeserializer ( this, null ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final Class<Property> deserClass ( Object> ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "tryFoldPropertyHandler ( deserClass ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "anon<PropertyHandler> deser = new AnnotationValueDeserializer ( this ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "beanDesc = new AnnotationValueDeserializer<Property> ( null ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "tempOneTimeFilePrefix ( deser ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return null ) ; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.createValue ( ) ; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "tryFoldPropertyHandler<Property> deserClass = newPropertiesValueDeserializer ( null ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "bean beanDesc = new AnnotationValueDeserializer ( ctxt ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "tryFoldPropertyHandler ( beanClass, null ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "beanDesc = new AnnotationValueDeserializer ( this, deser ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "tryFoldPropertyHandler<Property> deser = new AnnotationValueDeserializer ( object ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final Class<Property> deserClass ( Object> ) { return beanClass.isValueDeserializer ( ) ; }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public void assignIndex(int index) { _delegate.assignIndex(index); } @Override public int getPropertyIndex() { return _delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return _delegate.getCreatorIndex(); }"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number ( \"numberInt,)? ) \" ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number ( \"numberInt,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number ( \"number 90x,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number ( \"number\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number ( \"numberInt,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number ( \"number 90x,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number ( \"number getClass ( << ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number ( \"number getClass ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number ( \"number getClass ( >= ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number ( \"number value,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number ( \"number value,)? ) \" ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number ( \"number parser\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number ( \"numberInt,)?.c ad ) \" ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number ( \"number)?, ymax ) \" ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number ( \"numberNegative,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number ( \"numberInt+\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number ( \"number)?,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number ( \"number value,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number ( \"number getClass ( > ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number ( \"number+\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number ( \"number value,)? ) +\" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number ( \"numberInt,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number ( \"number stroke,)? ( c ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number ( \"number 90x,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number ( \"numberNegative,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number ( \"number)?,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number ( \"number value,)?.c ad ) \" ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number ( \"number stroke,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number ( \"numberTHIS,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number ( \"number)?,)? ) \" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number ( \"numberRIGHT,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number ( \"numberInt, ymax ) \" ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number ( \"number)?, det, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number ( \"number newValue,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number ( \"number getClass ( != ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number ( \"numberRIGHT,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number ( \"numberInt,)?+\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number ( \"numberFormat\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number ( \"numberTHIS,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number ( \"numberInt, det, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number ( \"number)?,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number ( \"number)?, det ) \" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number ( \"numberancy ) \" ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number ( \"numberInt, det ) \" ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number ( \"numberradius,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number ( \"numberRIGHT,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number ( \"number value,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number ( \"numberradius,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number ( \"number 90x,)?c ad ) \" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number ( \"number short ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number ( \"numberInt\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number ( \"number stroke,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number ( \"number ce,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number ( \"numberFormat,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number ( \"numberInt,ized ) \" ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number ( \"number Ser,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number ( \"numberFormat,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number ( \"numberInt,)?Field ) \" ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number ( \"numberNegative,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number ( \"numberQuad+\" ))?, 2 ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number ( \"numberInt, numberOfc ) \" ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number ( \"number xx,)? ) \" ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number ( \"number ce,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number ( \"numberFormat,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number ( \"numberDATE,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number ( \"number,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number ( \"numberInt,)?, 2 ) +\" ) .ominator ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number ( \"number newValue,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number ( \"number 90x2,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number ( \"number stroke,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number ( \"numberInt,)?.c ad ) +\" ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number ( \"numberInt,)?.c ) \" ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number ( \"numberInt, det, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number ( \"numberInt, yy ) \" ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number ( \"numberInt,)?, 2 ) +\" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number ( \"number,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number ( \"numberInt,)? ) +\" ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number ( \"numberDATE,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number ( \"number)?, det, 2 ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number ( \"numberInt, acc ) \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number ( \"number)?, ymax ) +\" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number ( \"numberradius,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number ( \"number)?, det, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number ( \"numberSimple,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number ( \"number)?, ymax ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number ( \"number Ser,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number ( \"numberype,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number ( \"numberTHIS,)?, 2 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number ( \"numberfff,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number ( \"numberInt,available ) \" ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number ( \"number xx,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number ( \"numberInt, upperPercent ) \" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number ( \"number ce,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number ( \"number 90x,)?, 2 ) +\" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number ( \"numberype,)?, 2 ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number ( \"number)?, ptr ) \" ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number ( \"numberRIGHT,)? ) \" ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number ( \"number 90x2,)?, 2 ) +\" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number ( \"number)?, off ) +\" ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number ( \"number 90x,)?, 2 ) NON_SPECIALCALL ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\") // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional() // adc 2"
    },
    "Bears-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if ( type == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if ( type == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if ( JsonToken.START_ARRAY == jp ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if ( JsonToken.START_ARRAY == t ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if ( JsonToken.VALUE_STRING.getCurrentToken ( ) == jp ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if ( type == JsonToken.instance ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if ( type == JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if ( JsonToken.instance == jp ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if ( jp == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( type == JsonToken.FIELD_NAME ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if ( jp.getCurrentToken ( ) == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if ( JsonToken.FIELD_ARRAY == jp ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if ( t == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( JsonToken.END_ARRAY == jp ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if ( jp.getCurrentToken ( ) < JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if ( jp.getCurrentToken ( ) <= JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if ( jp.getCurrentToken ( ) > JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if ( jp.getCurrentToken ( ) >= JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if ( jp == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if ( JsonToken.FIELD_ARRAY == t ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if ( jp.getCurrentToken ( ) == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if ( type == JsonToken.VALUE_STRING ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if ( result == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if ( JsonToken.FIELD_NAME == jp ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if ( jp.getCurrentToken ( ) < JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if ( JsonToken.VALUE_EMBEDDED_OBJECT == jp ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if ( t != JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if ( t == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if ( type != JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if ( type != JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if ( JsonToken.VALUE_STRING.equals ( jp, type ) ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if ( result == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if ( jp != JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if ( JsonToken.END_ARRAY == t ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if ( JsonToken.VALUE_EMBEDDED_OBJECT == type ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( jp.getCurrentToken ( ) <= JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if ( jp.getCurrentToken ( ) >= JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if ( type == JsonToken.FIELD_NAMES ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.VALUE_STRING ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if ( JsonToken.VALUE_STRING.isTyped ( ) == jp ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "beanDesc = typeOfThis.deserialize ( jp, ctxt ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if ( this == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( type == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if ( JsonToken.VALUE_STRING.equals ( jp, this ) ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if ( JsonToken.VALUE_STRING.equals ( jp, bean ) ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if ( jp.getCurrentToken ( ) > JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.VALUE_NUMBER_ARRAY ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if ( JsonToken.START_ARRAY == jp.getCurrentToken ( ) ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "beanDesc = typeOfSrc.deserialize ( jp, ctxt ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if ( typeype == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.START_ARRAY.deserialize ( jp, ctxt ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ( JsonToken.VALUE_STRING == jp ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if ( JsonToken.VALUE_STRING.getCurrentToken ( ) != jp ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if ( t != JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if ( JsonToken.START_ARRAY == this ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( jp.getCurrentToken ( ) == JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if ( JsonToken.VALUE_STRING.getCurrentToken ( ) == t ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ( jp.getCurrentToken ( ) == JsonToken.instance ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if ( JsonToken.VALUE_STRING.equals ( jp, t ) ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.FIELD_NAME ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if ( JsonToken.FIELD_ARRAY == jp.getToken ( ) ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ( JsonToken.VALUE_EMBEDDED_OBJECT == null ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if ( jp.getCurrentToken ( ) == JsonToken.VALUE_STRING ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if ( type == JsonToken.VALUE_ARRAY ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if ( typeype == JsonToken.START_ARRAY ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if ( jp.getCurrentToken ( ) < JsonToken.VALUE_STRING ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ( JsonToken.FIELD_NAME == t ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if ( JsonToken.START_ARRAY == jp.getCurrentToken ( ) ) ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if ( JsonToken.START_ARRAY == _type ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if ( t == JsonToken.instance ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if ( jp.getCurrentToken ( ) < JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( type == JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if ( JsonToken.END_ARRAY == jp.getCurrentToken ( ) ) ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if ( JsonToken.VALUE_STRING.equals ( jp, e ) ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if ( jp.getCurrentToken ( ) < JsonToken.FIELD_NAME ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if ( JsonToken.VALUE_ARRAY == jp ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if ( jp.getCurrentToken ( ) < JsonToken.VALUE_NUMBER_ARRAY ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if ( jp != JsonToken.FIELD_ARRAY ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if ( t == JsonToken.FIELD_NAME ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if ( jp.getCurrentToken ( ) <= JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if ( JsonToken.FIELD_ARRAY == jp.getCurrentToken ( ) ) ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if ( JsonToken.END_ARRAY == jp.getToken ( ) ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if ( t == JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if ( jp.getCurrentToken ( ) > JsonToken.VALUE_NUMBER_ARRAY ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if ( JsonToken.START_ARRAY.isTyped ( ) == jp ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if ( JsonToken.START_ARRAY == type ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( JsonToken.START_ARRAY == t ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if ( jp.getCurrentToken ( ) >= JsonToken.VALUE_STRING ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if ( JsonToken.instance == t ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if ( jp == JsonToken.END_ARRAY ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if ( JsonToken.FIELD_ARRAY == jp.getCurrentToken ( ) ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if ( JsonToken.END_ARRAY == jp.getCurrentToken ( ) ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if ( JsonToken.VALUE_STRING.equals ( jp, right ) ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if ( type == JsonToken.As.instance ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if ( jp.getCurrentToken ( ) != JsonToken.VALUE_ARRAY ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if ( JsonToken.START_ARRAY == ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if ( jp == JsonToken.instance ) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "} else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } }"
    },
    "Bears-163": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( tokens.can\u07d4\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( tokens.can\u259c ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( tokens.can\u259c ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( tokens.canCAL ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( tokens.canRestricted ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( tokens.can\u2c33\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( tokens.canCAL ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( tokens.canRestricted ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( tokens.can\u259c ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( tokens.cansender ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( tokens.canExport ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( tokens.cansender ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( tokens.canExport ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( tokens.canGI\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( tokens.canient ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( tokens.canExport ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( tokens.can\u07d4\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( tokens.can\ub780 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( tokens.canient ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( tokens.can Header ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE_VALUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( tokens.canCAL ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( tokens.can\u5bb9 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( tokens.can\u5b81 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( tokens.can\ub780 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( tokens.can\u5bb9 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( tokens.canCAL ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( tokens.canient ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( tokens.can\u07d4\", TokenStream.ANY_VALUE, \"UNIQUE_VALUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( tokens.can\u018a ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( tokens.can\u5b81 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( tokens.can Header ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( tokens.can\u018a ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( tokens.canstorage ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( tokens.can identity ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( tokens.canInfinite ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( tokens.can Header ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( tokens.can\u3069 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( tokens.cansender ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( tokens.can Header ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( tokens.can:59 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( tokens.can_CONST ( \"CONST\", TokenStream.ANY, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( tokens.canRestricted ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( tokens.canany ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( tokens.canstorage ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( tokens.canDelegate ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( tokens.canExport ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( tokens.can identity ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( tokens.canInfinite ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( tokens.canurls ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( tokens.caned ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( tokens.cansender ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE_VALUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( tokens.canRestricted ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE_UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( tokens.canany ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE_VALUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( tokens.can\u88f3 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( tokens.can\u2c33\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( tokens.canany ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( tokens.canDelegate ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( tokens.can:59 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( tokens.can instantiation ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( tokens.can instantiation ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( tokens.can\u88f3 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( tokens.can\u3069 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( tokens.canRestricted ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE_UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( tokens.can73 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( tokens.canurls ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( tokens.canFileFilter ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( tokens.canExport ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( tokens.canRoutingTable ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( tokens.can TreeSet ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( tokens.can73 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( tokens.can directive ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( tokens.canInfinite ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( tokens.can\u259c ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) .canQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( tokens.caned ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( tokens.canEr ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( tokens.can 100% ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( tokens.canCollapse ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( tokens.can 100% ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( tokens.can TreeSet ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( tokens.canFileFilter ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( tokens.can identity ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( tokens.canCAL ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( tokens.can:59 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( tokens.canient ( \"CONST\", TokenStream.ANY, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( tokens.canRestricted ( \"CONST\", TokenStream.ANY, \"UNIQUE_VALUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( tokens.can\u259c ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) .canQUE\" ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( tokens.can\u5b81 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( tokens.canEr ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( tokens.canRoutingTable ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( tokens.canOptional ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( tokens.canient ( \"CONST\", TokenStream.ANY_VALUE\", \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( tokens.canCollapse ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( tokens.cancan ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( tokens.can\u018a ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( tokens.cancan ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( tokens.can\u259c ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE_UNIQUE\" ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( tokens.can\u5bb9 ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( tokens.can Header ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( tokens.canstorage ( \"CONST\", TokenStream.ANY_VALUE, \"UNIQUE\" ) && tokens.canQUE ( \"UNIQUE\" ) ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( tokens.cansender ( \"CONST\", TokenStream.ANY, \"UNIQUE_VALUE\" ) || tokens.canQUE ( \"UNIQUE\" ) ) ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
        "fixed_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"CONSTRAINT\", \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort ( 2 != 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort ( 2 + 2 | 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort ( 2 == 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort ( 2 >= 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort ( 2 < 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort ( 2 | 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort ( 2 || 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( << ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort ( 2 && 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort ( 2 + 2 != 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( | ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( < ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort ( 2 + 2 == 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort ( 2 + 2 || 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort ( 2 > 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort ( 2 <= 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( > ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort ( 2 + 2 && 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( != ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( <= ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( >> ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( == ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( << ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort ( 2 & 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort ( 2 + 2 ) + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort ( 2 instanceof 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( >= ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort ( 2 + 2 + result + 2 ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort ( 2 + 2 + <= 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( < ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( || ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort ( 2 + 2 < 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( & ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( | ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort ( 2 + 2 + WORD + 2.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort ( 2 + 2 > 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort ( 2 + 2 + || 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort ( 2 >> 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort ( 2 + 2 ) + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort ( 2 + 2 + result + 2.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( > ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort ( 2 << 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort ( 2 + ) + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( instanceof ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( != ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort ( 2 ) + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( <= ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.readableBytes ( && ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort ( 2 + 2 >> 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( >> ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort ( 2 + 2 <= 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( == ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort ( 2 + 2 + i + 2 ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort ( 2 + 2 instanceof 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort ( 2 + 2 + buf.VERTICAL + 2 ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort ( 2 + 1 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( & ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( || ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort ( 2 + 2 << 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort ( 1 >= 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort ( 3 + 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( >= ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort ( 2 + 2 + result + 2 ) .readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort ( 1 == 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort ( 2 + 2 + 2 + result.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort ( 2 + 2 + offset + 2.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort ( 2 + 2 + 2 ) + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( instanceof ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort ( 2 + 2 & 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort ( 2 + 2 + max + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort ( 2 + 2 + end + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort ( 2 + 2 + 1 ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort ( 2 + 2 + 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort ( 2 + 2 + 2 ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort ( 2 + 2 + buf.readableBytes ( && ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort ( ) + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort ( 2 + 2 + buf.size ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort ( 2 + 2 + offset + 2 ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort ( 2 + 2 + buf.offset + 2 ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort ( 2 + 2 + buf.name + 2 ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort ( 2 + 2 + offset + 2 + length.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort ( 2 + 2 + offset + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort ( result + 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort ( 3 + 2 + 2 + buf.readableBytes ( << ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort ( 2 + 2 + l + 2 ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort ( 2 + 2 + year + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort ( 2 + 2 + 2 + 2 + buf.readableBytes ( << ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort ( 2 + i + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort ( 2 + 2 + 2 + buf.size ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort ( 2 + 2 + length + 2 ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort ( 2 + 2 + c + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort ( 2 + 2 + buf.size ( ) + 2 ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort ( 3 + 2 + 2 + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort ( 2 + 2 + 2 + 2 + buf.readableBytes ( | ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort ( 2 + start + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort ( 2 + 2 + line + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort ( 2 + 2 + 2 + 2 + buf.readableBytes ( < ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort ( 2 + 2 + result + 2 + buf.readableBytes ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-183": {
        "fixes": [
            {
                "k": 1,
                "patch": "return queryAll ( pageClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return queryAll ( pageClass, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return queryAllClass ( pageClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return queryAll ( null, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return queryAll ( null, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return queryAll ( pageClass, return pageable, null ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return queryAll ( pageClass, equable, null ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return queryAllClass ( pageClass, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return queryAll ( pageClass, functionClass, null ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return queryAllClass ( pageable, null, null ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return queryAll ( pageClass, titleClass, null ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return queryAllClass ( page, null, null ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return queryAll ( pageClass, tipClass, null ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return queryAll ( pageClass, parameters, null ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return queryAll ( pageClassable, null, null ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return queryAll ( tipClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return queryAll ( pageClassable, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return queryAllClass ( pageable, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return queryAll ( pageable, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return queryAll ( pageClass, pageableValue, null ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return queryAll ( functionClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return queryAll ( tipClass, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return queryAll ( pageClass, _entityable, null ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return queryAllClass ( null, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return queryAll ( pageClass, pageable ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return queryAll ( pageClass, zoomOutFactor, null ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return queryAll ( urlClass, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return queryAllClass ( page, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return queryAll ( pageable, null, null ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return queryAll ( pt, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return queryAll ( pageClass, cache, null ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return queryAll ( titleClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return queryAll ( pageClass, allable, null ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return queryAll ( pageClass, gramable, null ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return queryAll ( pageClass, r, null ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return queryAll ( contexts, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return queryAll ( pageClass, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return queryAll ( pageClass, newSize, null ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return queryAll ( pageClass, _entityableable, null ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return queryAll ( pageClass, predicate, null ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return queryAll ( newSize, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return queryAll ( pageClass, wrapperable, null ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return queryAll ( pageClass, pageable, null, null ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return queryAll ( constructableClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return queryAll ( pageClass, destClass, null ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return queryAll ( pageClass,constructable, null ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return queryAll ( pageClass, EMPTY, null ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return queryAll ( pt, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return queryAll ( pageClass,xDable, null ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return queryAll ( threshold, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return queryAll ( EMPTY, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return queryAll ( pageClass, layout, null ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return queryAll ( pageClass, padding, null ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return queryAll ( pageClass, pt, null ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return queryAll ( pageClass, minimumClass, null ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return queryAll ( majorClass, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return queryAll ( pageClass,Instance, null ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return queryAll ( pageClass, Stdable, null ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return queryAll ( binaryClass, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return queryAll ( pageClass, object, null ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return queryAll ( pageClass, contexts, null ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return queryAll ( pageClass, list, null ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return queryAll ( config, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return queryAll ( pageClass, map, null ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return queryAll ( pageClass, 10.0, null ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return queryAll ( pageClass, this, null ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return queryAll ( allable, null, null ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return queryAll ( description, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return queryAll ( pageClass, ts, null ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return queryAll ( pageClass, description, null ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return queryAll ( pageClass, config, null ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return queryAll ( null, titleClass, null ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return queryAll ( 1, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return queryAll ( enableClass, null, null ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return queryAll ( pageClass, adjusted, null ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return queryAll ( r, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return queryAll ( parameters, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return queryAll ( pageClass, null, null, null ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return queryAll ( pageClass,Container, null ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return queryAll ( pageClass, listener, null ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return queryAll ( pageClass, key, null ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return queryAll ( pageClass, now, null ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return queryAll ( pageClass, p, null ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return queryAll ( pageClass,able, null ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return queryAll ( pageClass, name, null ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return queryAll ( contexts, null, null ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return queryAll ( EMPTY, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return queryAll ( pageClass, cw, null ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return queryAll ( t, pageable, null ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return queryAll ( pageClass, parent, null ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return queryAll ( pageClass, t, null ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return queryAll ( page, pageClass, null ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return queryAll ( pageClass, Color, null ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return queryAll ( pageClass, y, null ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return queryAll ( pt, null, null ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return queryAll ( predicate, null, null ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return queryAll ( locale, null, null ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return queryAll ( EMPTY, null, null ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return queryAll ( pageClass, 1, null ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return queryAll ( page, null, null ) ;",
                "identical": false
            }
        ],
        "buggy_line": "return queryAll(entityClass, pageable, null);",
        "fixed_line": "return queryAll(entityClass, pageable, new SpannerQueryOptions() .setOffset(pageable.getOffset()).setLimit(pageable.getPageSize()));"
    },
    "Bears-95": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return entity.getType ( ) .getType ( ) != null || !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null || !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This\" ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entityentity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null || !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null || !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" 2 ) \" ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.isPackage ( ) .getName ( ) .startsWith ( \" \" ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This\" ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This\" ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.isPackage ( ) .getName ( ) .startsWith ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"List\" ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"symbols\" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return entity.getType ( ) .getType ( ) == null || !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This ( ) ) \" ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package.getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .equals ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" leave\" ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.isPackage ( ) .getName ( ) .startsWith ( \" \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null || !entity.getType ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"List\" ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getType ( ) .startsWith ( \"Package\" ) ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" whose\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" 2 ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package.getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entity.getType ( ) .getType ( ) != null || !entity.getType ( ) .startsWith ( \"Package\" ) ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"Attr ) \" ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) \" ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" 2 ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) , entity ( ) .getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package.getName ( ) .getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package.getPackage ( ) .getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package.getName ( ) .getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"Screen ) \" ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .equals ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"symbols\" ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"symbols\" ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return entity.getType ( ) .getType ( ) != null || !entity.getType ( ) .getName ( ) .startsWith ( \"Package\" ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .getPackage ( ) .getName ( ) .startsWith ( \" \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .getPackage ( ) .getName ( ) .startsWith ( \" \" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package.getName ( ) ) \" ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" leave\" ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" sg\" ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entityentity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package\" ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This ( ) ) \" ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package.getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entity.getType ( ) .getType ( ) != null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This\" ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entityentity.getPackage ( ) .getName ( ) .startsWith ( \" \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) ) \" ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" / \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getType ( ) .startsWith ( \"Package\" ) , entity ( ) .getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return entity.getType ( ) .getClassLoader ( ) != null && !entity.getType ( ) .startsWith ( \"Package\" ) , entity ( ) .getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" callback\" ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" .getName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \" whose\" ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"This \" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return entity.getType ( ) .getClassLoader ( ) == null && !entity.getType ( ) .getPackage ( ) .getName ( ) .startsWith ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entity.getType ( ) .getType ( ) == null && !entity.getPackage ( ) .getName ( ) .startsWith ( \"BigInteger\" ) ;",
                "identical": false
            }
        ],
        "buggy_line": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
        "fixed_line": "Class<?> type = entity.getType(); return type.getClassLoader() != null && (type.getPackage() == null || !type.getPackage().getName().startsWith(\"java\"));"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new Concurrent ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new Concurrent.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new Concurrent ( attributes ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new Concurrent ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new Concurrent.attributes ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new Concurrent.attributes ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new Concurrent ( attributes.length.length.length ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new Concurrent ( attributes.length.attributes ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new Concurrent.length.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap ( attributes ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new Concurrent.attributes.length ( attributes ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new Concurrent.0 ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new Concurrent.length ( attributes ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new Concurrent.attributes ( attributes.length.length.length ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new Concurrent.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new Concurrent.attributes ( attribute.length.length ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new Concurrent ( attributesName.length.length ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new Concurrent.attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMapHashMap ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new Concurrent.attributes ( attribute.length ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new Concurrent ( this.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new Concurrent ( this.attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new Concurrent.<>( ( attributes ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentLineSyntax ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap ( attributes.length.length.length ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new Concurrent ( attribute.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new Concurrent.0 ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new Concurrent )<>(.length.length ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMapMap = new Concurrent ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new Concurrent.<>( ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new Concurrent ( attributes.length.length.attributes ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new Concurrent ( attribute.attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMapHashMap ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new Concurrent ( parameter.length.length ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMapMap = new Concurrent.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new Concurrent.0 ( attributes ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new Concurrent.attributes ( attributesName.length.length ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new Concurrent.attributes ( attributesName.length ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentLineSyntax ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new Concurrent ( attributes.attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new Concurrent ( attributes.length.length.length.length ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new Concurrent.<>( ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new Concurrent = new Concurrent.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new Concurrent ( 2, attributes.length ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new Concurrent ( attributesName.length ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new Concurrent[<>(.length.length ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new Concurrent ( attributes.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new Concurrent.attributes ( union.length.length ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMapMap = new Concurrent.attributes ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new Concurrent.ValuedHashMap ( attributes ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new Concurrent = new Concurrent.attributes ( attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new Concurrent.attributes ( parameter.length.length ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new Concurrent ( visible.length.length ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new Concurrent = new Concurrent.attributes ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMapMap = new Concurrent.attributes ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new Concurrent.attributes ( 2, attributes ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new Concurrent ( sig.length.length ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new Concurrent ( this.attributes ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMapHashMap ( attributes ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new Concurrent )<>(.length.length ( attributes ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new Concurrent.attributes ( union.length ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap ( attributes.length.attributes ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new Concurrent. overlapping.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new Concurrent ( defaultSyntaxPrefix.length ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new Concurrent ( attribute.attributes ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new Concurrent.attributes.length.length ( attributes ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new Concurrent.attributes ( attributesName ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new Concurrent.attributes ( this.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new Concurrent.attributes ( visible.length ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new Concurrent.0.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new Concurrent.0 ( attributes.length.length.length ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new Concurrent.length.attributes ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new Concurrent.attributes ( 6 ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new Concurrent ( defaultSyntaxPrefix.length.length ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new Concurrent.attributes ( sig.length ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new Concurrent ( visible.length ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new Concurrent.attributes ( templateTypeName ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new Concurrent ( union.length.length ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new Concurrent ( ns.length.length ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new Concurrent )<>(.length ( attributes ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new Concurrent ( tagName.length.length ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new Concurrent.Superclass ( attributes ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new Concurrent.attributes ( visible ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new Concurrent ( exceptions.length.length ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new Concurrent.attributes ( parameter.length ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentLineSyntax ( attributes ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new Concurrent.attributes ( visible.length.length ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new Concurrent.STOHashMap ( attributes ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new Concurrent.length.attributes ( attributes.length ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new Concurrent.attributes ( DAYS ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new Concurrent ( attributes.length.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new Concurrent.attributes ( sig.length.length ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new Concurrent ( attributesName.length.length.length ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new Concurrent.attributes ( this.attributes.length.length ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new Concurrent ( param.attributes.length ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentLineSyntax.attributes ( attributes ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new Concurrent.attributes ( 4 ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMapMap = new Concurrent ( attributes.length ) ;",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-127": {
        "fixes": [
            {
                "k": 1,
                "patch": "decodeStatus ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "decodeStatus ( position, text.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "decodeStatus ( position, pluralText.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "decodeStatus ( position, plural.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "decodeStatusmap ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "decodeStatus ( position, value.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "decodeStatus ( position.readUnsignedShort ( status, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "decodeStatus ( position.readUnsignedShort ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "decodeStatusBOOLEAN ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "decodeStatus ( position, temp.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "decodeStatus ( position, HEX_CHARS.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "decodeStatus ( position, line.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "decodeStatus ( position, zero.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "decodeStatusent ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "decodeStatus ( position, status.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "decodeStatus ( position, f.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "decodeStatusInt ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "decodeStatus ( start, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "decodeStatusFieldName ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "decodeStatus ( position, start.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "decodeStatus ( position, startAngle.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "decodeStatus ( position, tag.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "decodeStatus ( position, tail.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "decodeStatus ( position, startFinal.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "decodeStatus ( position, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "decodeStatus ( position, functionType.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "decodeStatus ( position,avg.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "decodeStatusNumber ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "decodeStatus ( position,MatchesShort.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "decodeStatus ( position,CenterShort.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "decodeStatus ( buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "decodeStatus ( position, pluralType.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "decodeStatus.position ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "decodeStatus ( startFinal, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "decodeStatused ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "decodeStatus ( position, conn.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "decodeStatus ( position, Iterables.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "decodeStatusury ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "decodeStatus ( position, SHORT_NAME.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "decodeStatus ( position, orderType.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "decodeStatus ( position, name.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "decodeStatus ( position, tab.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "decodeStatus ( position, pluralShort.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "decodeStatusil ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "decodeStatus ( position, Lists.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "decodeStatus ( position, HEX_BYTES.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "decodeStatusnotated ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "decodeStatus ( position, readUnsignedShort.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "decodeStatus ( position, externs.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "decodeStatus ( position,verify.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "decodeStatus block ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "decodeStatusRaw ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "decode.Status ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "decodeStatus ( position, itemCount.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "decodeStatus ( status, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "decodeStatus ( position, year.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "decodeStatus Calendar ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "decodeStatus ( position, allShort.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "decodeStatusEY ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "decodeStatus ( position, iText.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "decodeStatus ( position,MASK.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "decodeStatus ( position, Feature.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "decodeStatus ( position, paint.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "decodeStatus ( position, c.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "decodeStatus ( position,position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "decodeStatusEscaped ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "decodeStatus ( position, dim.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "decodeStatusan ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "decodeStatus ( position, str.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "decodeStatus ( position, functionValue.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "decodeStatusDelegate ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "decodeStatus ( position, 9.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "decodeStatusFunction ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "decodeStatusFieldType ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "decodeStatus ( position, t.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "decodeStatus block ( position, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "decodeStatus ( position, searchStr.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "decodeStatusmap ( position, text.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "decodeStatus ( position, cx.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "decodeStatus ( position,fast.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "decode 1.5 ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "decodeStatus0 ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "decodeStatus ( position, char.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "decodeStatus ( position, only.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "decodeStatus ( position, uv.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "decodeStatus ( position, mock.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "decodeStatus ( position,ial.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "decodeStatus ( position, cp.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "decodeStatus ( position, getName.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "decodeStatus ( year, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "decodeStatus ( position, field.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "decodeManaged ( position, buf.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "decodeStatus ( position,())..readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "decodeStatus ( position, out.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "decodeStatus ( position, dataset.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "decodeStatus ( position, less.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "decodeStatus ( position,go.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "decodeStatus ( position, chars.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "decodeStatus ( position, exception.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "decode ( buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "decodeStatus(position, buf.readUnsignedShort());",
        "fixed_line": "if (buf.readableBytes() >= 2) { decodeStatus(position, buf.readUnsignedShort()); }"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( raw == String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( raw == String.raw && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( raw != String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( raw <= String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( raw >= String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( raw < String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( raw == String.raw || raw != Object.class ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( raw == String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( raw == String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( raw == String.raw || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( raw > String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( raw == String.raw || raw <= Object.class ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( raw == String.raw || raw >= Object.class ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( raw == String.raw || raw < Object.class ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( raw == String.class || raw != Object.class ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( raw == String.raw || raw == Object.rawClass ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( raw != String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( raw == String.class || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( raw == String.class || raw < Object.class ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( raw == String.class || raw <= Object.class ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( raw == String.raw || raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( raw != String.class || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( raw <= String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( raw == String.raw || raw > Object.class ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( raw == String.class || raw >= Object.class ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( raw.raw == String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( raw != String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( rawType == String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( raw == String.raw || raw == Object.valueType ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( raw.raw != String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( raw.raw == String.raw && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( raw == String.raw || raw == Object.rawType ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( raw == String.raw || rawType == Object.class ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( raw < String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( rawType == String.raw && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( raw == String.raw || raw.class == Object.class ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( raw.raw == String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( rawType != String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( raw.raw == String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( raw.raw <= String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( raw >= String.class || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( raw == String.class || raw == Object.rawClass ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( raw == String.raw && raw.class == Object.class ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( raw <= String.class || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( rawType >= String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( raw == String.null || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( raw != String.class || raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( raw == String.raw || raw == Object.nominalType ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( raw <= String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( raw == String.raw && raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( raw.class == String.raw && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( raw.raw >= String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( raw >= String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( raw == String.cls || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( raw.class == String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( raw.raw == String.raw || raw != Object.class ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( raw == String.class || raw > Object.class ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( raw < String.class || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( rawType <= String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( raw < String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( raw >= String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( raw == String.null && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( raw == String.value || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( raw == String.class && raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( raw == String.raw || raw == Object.nom.class ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( raw == String.type || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( raw == String.raw || rawType != Object.class ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( raw == String.this || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( raw == String.raw || raw == Object.type ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( raw == String.cls && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( raw == String.class || raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( raw.raw < String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( raw.raw == String.class || raw != Object.class ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( raw == String.raw || raw == Object.enumClass ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( raw > String.raw || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( raw == String.type && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( rawType < String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( raw == String.raw || raw.class == Object.raw ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( raw >= String.class || raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( raw <= String.class || raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( raw == String.raw && raw != Object.class ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( rawType == String.class && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( raw == String.ser || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( raw == String.raw || raw == Object.serClass ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( rawType == String.raw || raw != Object.class ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( raw == String.class || raw == Object.rawType ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( raw == String.class || raw == Object.valueType ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( raw == String.nom || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( raw >> String.class || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( raw == String.raw || raw == Object.value ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( raw == String.raw || rawType == Object.raw ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( raw == String.index || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( raw == String.raw || raw == Object.null ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( raw > String.class || raw == Object.raw ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( raw < String.class || raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( raw == String.index && raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( raw == String.raw && raw == Object.cls ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( raw == String.c || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( raw == String.Long || raw == Object.class ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( raw == String.raw || raw == Object.c ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "lac = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "lac = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break eol = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break++] = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "lac = Integer.parseInt ( encoding[i] ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "lac = Integer.parseInt ( result[i] ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break++] = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break Persistent = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakSetting = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakScope = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "lac = Integer.parseInt ( data[i] ) >> \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "lac = Integer.parseInt ( i[i] ) ) \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "lac = Integer.parseInt ( orderType[i] ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( WORD[i] ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( return Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break exposed = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "lac = Integer.parseInt ( data[i] ) 8 \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "lac = Integer.parseInt ( keys[i] ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( position[i] ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "lac = Integer.parseInt ( data[i] ) ) ) \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "lac = Integer.parseInt ( data[i] ) + \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break-8. = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break eol = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break supports = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakparent = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakScope = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakSetting = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( i.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break \"\"Properties = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( length[i] ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break 18 = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break exposed = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( b[i] ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break 2), = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break Persistent = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break major = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "lac = Integer.parseInt ( datanterfaces[i] ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakRing = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakIter = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( return Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break supports = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break-8. = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakparent = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break \"\" : Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "lac = Integer.parseInt ( data[i] ) 8 \"# = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( new Integer ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( localizationResources[i] ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "lac = Integer.parseInt ( data[i] ) + \"# = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "lac = Integer.parseInt ( b[i] ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( len[i] ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakctxt = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break eol.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakLines = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( null[i] ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( orderType[i] ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "lac = Integer.parseInt ( null[i] ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break access = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( kind[i] ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakalue instanceof Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break treating.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakidi = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "lac = Integer.parseInt ( buffer[i] ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "lac = Integer.parseInt ( data[i] ) ) ) \"# = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( new Integer ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakDATE = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "lac = Integer.parseInt ( data[i] ) + \"#.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"#.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "lac = Integer.parseInt ( data[i] ) >> \"#;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "lac = Integer.parseInt ( len[i] ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break cm = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakDATE.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( text[i] ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break Persistent.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "lac = Integer.parseInt ( data[i] ) break;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "lac = Integer.parseInt ( get ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakequality.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break \"\"Properties = Integer.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakSettingSetting = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakScope.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break getFieldName ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breaksignature.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "lac = Integer.parseInt ( data[i] ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( access[i] ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "lac = Integer.parseInt ( localizationResources[i] ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "lac = Integer.parseInt ( data[i] ) ; break++] = Integer.parseInt ( WORD[i] ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "lac = Integer.parseInt ( data[i] ) \"# = Integer.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "lac = Integer.parseInt ( data[i] ) >> \"#.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "lac = Integer.parseInt ( listeners[i] ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakORT.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "lac = Integer.parseInt ( WORD[i] ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "lac = Integer.parseInt ( dataShadow[i] ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "lac = Integer.parseInt ( data[i] ) ; breakDataset.parseInt ( data[i] ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( data ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( data.parseInt ( i[i] ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "lac = Integer.parseInt ( data[i] ) ) \"# = Integer.parseInt ( access ) ;",
                "identical": false
            }
        ],
        "buggy_line": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
        "fixed_line": "if (!data[i].isEmpty()) { lac = Integer.parseInt(data[i]); } break; case \"#CID#\": if (!data[i].isEmpty()) { cid = Integer.parseInt(data[i]); }"
    },
    "Bears-245": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if ( modifiers == null ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if ( modifiers != this.ifiers ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if ( modifiers == modifier ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Builder ( modifiers.modifiers ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if ( modifiers != modifiers ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if ( modifiers != this.modifiers ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "BuilderedAboutArgList.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Builder._modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if ( modifiers == this.modifiers ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if ( modifiers.addModifiers ( modifier ) == null ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( modifiers == modifier.modifiers ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "BuilderModifier ( modifiers.modifiers ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Builder Modifier.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "BuilderedAboutArgList.add ( modifiers, this.modifiers ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( modifiers.addModifiers ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if ( modifiers != null ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if ( modifiers.addModifiers ( DAYS ) == null ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "BuilderModifier ( modifiers.modifiers ) == this ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Builder._modifiers.add ( modifiers ) == null ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "\", modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if ( modifiers.addModifiers ( this ) == modifiers ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "quads.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Builder._modifiers.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if ( modifiers.map != modifiers ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "BuilderModifier._modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "BuilderedAboutArgList.add ( modifiers, System.modifiers ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if ( modifiers == modifier.mod ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "BuilderedAboutArgList.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if ( modifiers.addModifiers ( modifiers ) == this ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if ( modifiers != this ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if ( modifiers == modifier.mod ( modifier ) == null ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if ( modifiers.addModifiers ( newConfig ) == null ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if ( modifiers == this ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if ( modifiers.addModifiers ( this ) != modifiers ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if ( modifiers != modifiers.mod ( modifier ) == null ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "\", modifiers.addModifiers ( modifiers ) == null ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "BuilderPrefix.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "BuilderModifier ( modifiers ) == this.mod ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "BuilderYear.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Builder._modifiers.add ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if ( modifiers != modifiers.ifiers ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Builder = modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Builder <= modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "BuilderedAboutArgList.add ( modifiers, System.modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Builder ? modifiers.add ( modifiers ) : this.modifiers ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ( modifiers != this.mod ( modifier ) == null ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if ( modifiers.addModifiers ( this ) == null ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "BuilderModifier._modifiers.add ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if ( modifiers.addModifiers ( cls ) == this ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "BuilderModifier ( modifiers ) == this.modifiers ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "BuilderModifier ( modifiers ) == this.modifiers ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if ( modifiers.equals ( modifier ) ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "BuilderModifier._modifiers.add ( modifiers ) == null ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if ( modifiers != Modifier.ifiers ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Builder, modifiers.add ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Builder ? modifiers.add ( modifiers ) : null ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if ( modifiers.addModifiers ( modifiers, this ) == null ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "BuilderedAboutArgList.add ( modifiers, null ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( modifiers.equals ( modifier ) == null ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if ( modifiers != modifiers.modifiers ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ( modifiers !=Public.modifiers ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "quads.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Builder ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "BuilderModifier._modifiers.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ( modifiers.addModifiers ( all ) == null ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if ( modifiers !=modifiers ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "BuilderPrefix.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if ( modifiers == modifier.mod ( modifier ) != null ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Builder Modifier.add ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "BuilderIterator modifiers = modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Builder, modifiers.add ( modifiers ) == null ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Builder / modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Builder href.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "BuilderedAboutArgList.add ( modifiers, DAYS ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if ( modifiers.addModifiers ( modifier ) != null ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "BuilderedAboutArgList.add ( modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "BuilderMenu.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "BuilderMenu.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if ( modifiers == modifier.mod ( modifiers ) ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Builder modCount.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Builder Modifier.add ( modifiers ) == this.modifiers ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Builder._modifiers.add ( modifiers, System.modifiers ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "BuilderModifier ( modifiers.modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Builder | modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "BuilderModifier ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "BuilderIterator modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Builderf.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if ( modifiers == modifier.null ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "BuilderedAboutArgList.add ( modifiers, list ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Builder ? modifiers.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "BuilderedAboutArgList.add ( modifiers, this.modifiers ) == null ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "BuilderedAboutArgList.add ( modifiers, System.modifiers ) == null ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if ( modifiers.addModifiers ( modifiers ) != this ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if ( modifiers.addModifiers ( DAYS ) != null ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "zoomInMenu.add ( modifiers ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if ( modifiers == modifiers ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "BuilderModifier ( modifiers.modifiers ) == this.modifiers ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if ( modifiers.addModifiers ( DAYS ) == this ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Builderbindings.add ( modifiers, this ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if ( modifiers.addModifiers ( modifiers ) != null ) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!modifier.equals(Modifier.FINAL)) { throw new IllegalStateException(\"unexpected parameter modifier: \" + modifier); }"
    },
    "Bears-124": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number ( \"number+. ( \"+d0 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number ( \"number+. ( \"+d' ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number ( \"number+. ( \"+text ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number ( \"number+. ( \"+text+\" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number ( \"number+. ( \"+dField ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .lag ( text ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number ( \"number+. ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .lag ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number ( \"number+. ( \"+textValue ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number ( \"number\u2828 ( \"+text+\" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) .? ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .Views ( \" ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .? ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) .text ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . PI ( text ) .text ( \" ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number ( \"number+. ( \"+text what ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . PI ( text ) .text ( \" ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) .text ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) .append ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number ( \"number+. ( \"+text.text ( << ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number ( \"number+. ( \"+textField ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number ( \"number+. ( \"+textExtent ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) .intern ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number ( \"number+. ( \"+textType ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . isSupported ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number ( \"number+. ( text ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number ( \"number+. ( \"+d' ) +\" ) \" ) .append ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .? ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .append ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) .intern ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number ( \"number+. ( \"+textConverter ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .append ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . at \"+text ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number ( \"number+. ( \"+text.text ( == ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .append ( text ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) .append ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number ( \"numberSite ( \"+d ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . isSupported ( text ) .text ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number ( \"number+. ( \"+d0 ) +\" ) \" ) .append ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .lag ( text ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) \" ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number ( \"number+. ( \"+text9 ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number ( \"number+. ( \"+text.text ( > ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .Views ( \" ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . at \"+text ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) \" ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . PI ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . retained ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . at \"+text ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . Fluent ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number ( \"number+. ( \"+d0 ) +\" ) \" ) .append ( text ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . isSupported ( text ) +\" ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . PI ( text ) .intern ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . isSupported ( text ) +\" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number ( \"number+. ( \"+text therefore ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . isSupported ( text ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .lag ( text ) .doubleValue ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number ( \"number+. ( \"+textPrototype ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text ) .text ( \" ) .x\" ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . value ( \"+text+\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number ( \"number+. ( \"+d' ) +\" ) \" ) .append ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . PI ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text+\" ) .text ( \" ) .x\" ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . PI ( text ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) .append ( text ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . retained ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number ( \"number+. ( \"+text.text ( | ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . PI ( text ) .intern ( \" ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number ( \"number+. ( \"+dch ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . at \" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text ) . .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number ( \"number+. ( \"+text.text ( != ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . PI ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . retained ( \"numberQuad\" ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .? ( text ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . Can' ( \"number of type \"+text+\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . PI ( text ) .intern ( \" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . PI ( text ) .text ( \" ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number ( \"number+. ( \"+d ) +\" ) \" ) . PI ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) .append ( text ) . .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .append ( text+\" ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . PI ( text ) .intern ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number ( \"number+. ( \"+dPath ) +\" ) \" ) . PI ( text ) .intern ( \" ) +\" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) . PI ( text ) .text ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number ( \"number+. ( \"+d1 ) +\" ) \" ) .lag ( text ) .intern ( ) +\" ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(d+.d+)\").text(\"+\") // latitude .number(\"(d+.d+)\").text(\"+\") // longitude",
        "fixed_line": ".number(\"(-?d+.d+)\").text(\"+\") // latitude .number(\"(-?d+.d+)\").text(\"+\") // longitude"
    },
    "Bears-234": {
        "fixes": [
            {
                "k": 1,
                "patch": ">\">\">\">\" = setUser.findWrapperWrapper (\u2760.newWrapper ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "credTime>\">\">\" =Balance.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( Eval ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( U.newWrapper ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ">\">\">\">\" = MessageType.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cred>\">\">\" = INST.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ">\">\">\">\" = house.findWrapperWrapper (OG ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ">\">\">\">\" = setUser.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper (OG ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cred>\">\">\" = house.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cred>\">\">\" = INST.findWrapperWrapper ( Eval ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cred>\">\">\" = house.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cred>\">\">\" = house.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ">\">\">\">\" = cred.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cred primary primary>\">\">\" = INST.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "credTime>\">\">\" = INST.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ">\">\">\">\" = MessageType.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cred>\">\">\" = house.findWrapperWrapper (OG ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ">\">\">\">\" =challenge.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ">\">\">\">\" = cred.findWrapperWrapper ( Eval ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper (\u2760.newWrapper ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ">\">\">\">\" = house.findWrapperWrapper (_10 ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cred primary primary>\">\">\" = INST.findWrapperWrapper ( Eval ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper (_10 ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper (ing ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cred>\">\">\" = house.findWrapperWrapper ( bodyWrapper ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "credOutOfBounds>\">\">\" = house.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper (OG ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( Eval ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper (OG ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "credTime>\">\">\" = INST.findWrapperWrapper ( Eval ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ">\">\">\">\" =\uce20.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper (ing ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ">\">\">\">\" = MessageType.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "credOutOfBounds>\">\">\" = house.findWrapperWrapper ( ac ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( bodyWrapper ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "credOutOfBounds>\">\">\" = house.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ">\">\">\">\" = setUser.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "credOutOfBounds>\">\">\" = house.findWrapperWrapper (OG ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ">\">\">\">\" = setUser.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "credTime>\">\">\" =Balance.findWrapperWrapper ( SOCK ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "credTime>\">\">\" =Balance.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( contain contain contain ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "credakes>\" = INST.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cred>\">\">\" = house.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cred>\">\">\" = asn.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( U.mapper ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "credOutOfBounds>\">\">\" = house.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cred>\">\">\" = INST.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cred primary primary>\">\">\" = INST.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ">\">\">\">\" =challenge.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cred primary primary>\">\">\" = INST.findWrapperWrapper ( declar.newWrapper ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( U ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( U ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper (\u2760 ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ">\">\">\" = cred.findWrapperWrapper ( declar ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ">\">\">\">\" = cred.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( contain contain contain ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ">\">\">\">\" = MessageType.findWrapperWrapper (\u2760 ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cred>\">\">\" = house.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ">\">\">\">\" = MessageType.findWrapperWrapper ( contain contain contain ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ">\">\">\">\" =\uce20.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ">\">\">\">\" =\uce20.findWrapperWrapper ( contain contain contain ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper (\u2760 ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cred>\">\">\" = INST.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( bodyId ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "credOutOfBounds>\">\">\" = house.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "credTime>\">\">\" =Balance.findWrapperWrapper ( SOCK.newWrapper ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ">\">\">\">\" = MessageType.findWrapperWrapper ( U ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( bodyThrow ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ">\">\">\">\" = asn.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( U.findWrapper ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ">\">\">\" = house.findWrapperWrapper ( Prefix ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "credTime>\">\">\" =Balance.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( declar.newWrapper ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( Collect ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ">\">\">\">\" = house.findWrapperWrapper ( body ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ">\">\">\" = asn.findWrapperWrapper ( contain contain ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper (\u2760.mapper ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( body ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cred primary primary>\">\">\" = house.findWrapperWrapper ( contain ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "credOutOfBounds>\">\">\" = INST.findWrapperWrapper ( function ) ;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (debitedAccount.isDisabled() || creditedAccount.isDisabled()){ throw new IllegalStateException(\"Account disabled\"); }"
    },
    "Bears-110": {
        "fixes": [
            {
                "k": 1,
                "patch": ".any ( ) .",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".any ( ) .endEnd ( ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".any ( ) .Constants ( ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".any ( ) .iEnd ( ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".any ( ) .anyEnd ( ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".any ( ) .anyEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".any ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".any ( ) .right ( ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".any ( ) .iEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".any ( ) .UpperBound ( ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".any ( ) .endEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".any ( ) .NULL ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".any ( ) ._anyEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".any ( ) .endEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".any ( ) .STRING ( 6 ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".any ( ) .ColEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".any ( ) .Constants ( ) .compileEnd ( ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".any ( ) .U ( 6 ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".any ( ) .anyEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".any ( ) .DECEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".any ( ) .chartEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".any ( ) .ortedEnd ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".any ( ) .constructEnd ( ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".any ( ) .DEEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".any ( ) .groupEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".any ( ) .anyEnd ( ) .compile ( ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".any ( ) ._anyEnd ( ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".any ( ) .chartEnd ( ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".any ( ) .getEnd ( ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".any ( ) .anyEnd ( ) .compileEnd ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".any ( ) .end ( 6 ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".any ( ) . ValidationEnd ( ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".any ( ) .chartEnd ( ) .compile ( ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".any ( ) .join ( ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".any ( ) . getRightEnd ( ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".any ( ) .ColEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".any ( ) .ortedEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".any ( ) .generateEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".any ( ) .ortedEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".any ( ) .putEnd ( ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".any ( ) . subtree ( ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".any ( ) .ExplicitEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".any ( ) .endEnd ( ) .group ( ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".any ( ) .DECEnd ( ) .group ( ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".any ( ) . nextToken ( ) +\" ) .inferEnd ( ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".any ( ) .constructEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".any ( ) .endEnd ( ) +\" ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".any ( ) .bitEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".any ( ) .groupEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".any ( ) . fi ( ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".any ( ) .anyEnd ( ) .group ( ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".any ( ) .iEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".any ( ) .ATEREnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".any ( ) ._anyEnd ( ) .group ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".any ( ) .getEnd ( ) +\" ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".any ( ) . unrecognizedEnd ( ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".any ( ) .ColEnd ( ) .double ( ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".any ( ) . getRightEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".any ( ) .anyEnd ( ) . digit ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".any ( ) . ValidationEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".any ( ) .S ( ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".any ( ) .getEnd ( ) +\" ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".any ( ) .RETURN ( ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".any ( ) .Description ( ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".any ( ) ._anyEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".any ( ) .LexEnd ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".any ( ) .Col' ( ) .compileEnd ( ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".any ( ) . JsonEnd ( ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".any ( ) .we ( ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".any ( ) .ATEREnd ( ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".any ( ) .bitEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".any ( ) .'),End ( ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".any ( ) .Constants ( 3 ) .compileEnd ( ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".any ( ) .DEEnd ( ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".any ( ) .ATEREnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".any ( ) .2- ( ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".any ( ) .endEnd ( ) . digit ( ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".any ( ) .Constants ( null ) .compileEnd ( ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".any ( ) .iEnd ( ) .endEnd ( ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".any ( ) .getEnd ( ) +\" ) .compile ( ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".any ( ) . nextToken ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".any ( ) . getParametersEnd ( ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".any ( ) .endEnd ( ) .compile ( ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".any ( ) . nextToken ( ) +\" ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".any ( ) .chartEnd ( ) .group ( ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".any ( ) .chartEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".any ( ) .DECEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".any ( ) . shape ( ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".any ( ) .infer ( 6 ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".any ( ) .getEnd ( ) +\" ) . strictValues ( ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".any ( ) . GeneratedEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".any ( ) .inferEnd ( ) .groupEnd ( ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".any ( ) .endEnd ( ) .6, ( ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".any ( ) .anyEnd ( ) +\" ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".any ( ) .constructEnd ( ) .group ( ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".any ( ) .bitEnd ( ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".any ( ) .inferEnd ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".any ( ) .bitEnd ( ) .compile ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".any ( ) .RemainingEnd ( ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".any ( ) .DEEnd ( ) .doubleValue ( ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".any()",
        "fixed_line": ".expression(\",.*\") .or() .text(\"#\")"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l << = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l && = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l instanceof = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = ( l << 8 ) | i[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l == = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l != = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l >= = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = ( l << 8 ) | offset[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = ( l | 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l > = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = ( l << 8 ) | l[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = ( l == 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l >> = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = ( l != 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = ( l > 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = ( l < 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = ( l >> 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l <= = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = ( l >= 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l < = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = ( l || 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l & = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = ( l <= 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = ( l && 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = ( l instanceof 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = ( l << 8 ) | jj[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l | = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = ( l << 9 ) | a[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = ( l << 8 ) | max[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = ( l << 8 ) | r[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = ( l << 7 ) | a[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_FRAME[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = ( l << 8 ) | size[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = ( l << 8 ) | x[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = ( l & 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = ( l << i ) | a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = ( l << 8 ) | minL[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l || = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l - = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l + = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_FRAME_EXTEN[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = ( l << 8 ) | b[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l / = ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = ( l << 8 ) | out[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = ( l << 8 ) | marker[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = ( l << 8 ) | s[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = ( l << 8 ) | local[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = ( l << 8 ) | min[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = ( l << 8 ) | u[i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = ( l << 8 ) | j[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = ( l << 8 ) | prefix[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = << ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = ( l << 8 ) | name[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = ( l << 8 ) | ( l[i];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = ( l << 8 ) | kind[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = ( l << 8 ) | element[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = ( l << 8 ) | end[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = ( l << 8 ) | ret[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = && ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l << = ( l << 8 ) | i[i];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = ( l << 8 ) | nInUseShadow[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = ( l << 8 ) | next[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_LOCALS_1_STACK_ITEM_FRAME[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = | ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = ( l << 8 ) | frame[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = & ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = ( l << 8 ) | | a[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = ( l << 8 ) | delta[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = ( l << 8 ) | len[i];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = ( l << 8 ) | localVarTypeCount];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = ( l << 8 ) | mid[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = > ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = instanceof ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = ( l << 8 ) | lineNumberCount[i];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = ( l << 8 ) | length[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = ( l << end ) | a[i];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l << = ( l | 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = ( l << jj ) | a[i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_LOCALS_1_STACK_ITEM_FRAME_EXTEN[i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = ( l << 8 ) | curChar[i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_FRAME;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_1_STACK_ITEM_FRAME[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = ( l << 8 ) | nGroups[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = ( l << 8 ) | maxLocals[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = ( l << 8 ) | z[i];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = ( l << 4 ) | a[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l << = ( l << 8 ) | offset[i];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = ( l << 8 ) | opcode[i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = != ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = ( l << 8 ) | pos[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = == ( l << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = ( l << 8 ) | value[i];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_FRAMES_1_STACK_EXTEN[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = ( l << 8 ) | n[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = ( i << 8 ) | a[i];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_1_STACK_ITEM_FRAME_EXTEN[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = ( l << 8 ) | SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED[i];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = ( l << 16 ) | a[i];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-22": {
        "fixes": [
            {
                "k": 1,
                "patch": "_referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw new IllegalStateException > (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new IllegalStateException < (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "JavaType _referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "JavaType re = _referencedType;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new IllegalStateException << (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if ( _referencedType == _referencedType ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw new IllegalStateException >= (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new IllegalStateException && (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw new IllegalStateException <= (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw _referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "throw new IllegalStateException != (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new IllegalStateException & (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw new IllegalStateException == (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( _referencedType ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if ( _referencedType != _referencedType ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "throw new IllegalStateException || (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_referencedType = _referencedType.set ( _referencedType ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "throw new IllegalStateException | (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "throw new IllegalStateException >> (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "throw new IllegalStateException instanceof (\" \") : _referencedType ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "other._referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "quads = _referencedType;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "config.referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "chunksSoFar = _referencedType;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "throw new IllegalStateException < (\" \") ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "JavaType _referencedType = _referencedType.set ( _referencedType ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "JavaType re = _referencedType.set ( _referencedType ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "\", _referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "throw new IllegalStateException << (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "BorderFactory.referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "throw new IllegalStateException << (\" \") : \"+_referencedType ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if ( _referencedType._referencedType ( ) == _referencedType ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "throw _referencedType = _referencedType.set ( _referencedType ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw new IllegalStateException ( \"referencedType+\", _referencedType ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "throw new IllegalStateException < (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "JavaType[\" = _referencedType;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_referencedType = _referencedType.set ( value ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "beanDesc = _referencedType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "throw new IllegalStateException && (\" \") : \"+_referencedType ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if ( _referencedType > _referencedType ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw new IllegalStateException << (\" \") ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "throw new IllegalStateException != (\" \") ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "chunksSoFar = _referencedType.set ( _referencedType ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nominalType = _referencedType;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "size._referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if ( _referencedType != value ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "lenientType = _referencedType;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw new IllegalStateException <= (\" \") ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw new IllegalStateException ( \"referencedType+\", value ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw new IllegalStateException && (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw new IllegalStateException >= (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if ( _referencedType != JsonencedType.AsencedType ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if ( _referencedType._referencedType ( ) != _referencedType ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw new IllegalStateException > (\" \") : _referencedType.setencedType ( ) +\", value ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if ( _referencedTypeRestricted != _referencedType ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "other._referencedType = _referencedType.set ( _referencedType ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if ( _referencedType._referencedType == _referencedType ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( _referencedTypeRestricted == _referencedType ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if ( _referencedType != JsonencedType ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "JavaTypeOf = _referencedType;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if ( _referencedType._referencedType != _referencedType ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if ( _referencedType._referencedType ( ) < _referencedType ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_referencedType = value;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ( _referencedType = _referencedType ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "JavaType propName = _referencedType;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw new IllegalStateException <= (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new IllegalStateException & (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if ( _referencedType = _referencedType ) == _referencedType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ( _referencedType = _referencedType.set ( ) == _referencedType ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_referencedType = _referencedType.set ( oldencedType ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "throw new IllegalStateException < (\" \") : _referencedType;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "JavaType _referencedType = _referencedType.set ( value ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if ( _referencedType == value ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "JavaType props = _referencedType;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "throw new IllegalStateException > (\" \") : _referencedType;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "throw new IllegalStateException | (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "throw new IllegalStateException >= (\" \") ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "entryValue = _referencedType;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "throw new IllegalStateException == (\" \") ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "throw new IllegalStateException > (\" \") : \" +_referencedType ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "converterClass = _referencedType;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw new IllegalStateException & (\" \") ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "JavaType deserialize = _referencedType;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "throw new IllegalStateException > (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "throw new IllegalStateException >> (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new IllegalStateException > (\" \") ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if ( _referencedType != JsonencedType.AsId ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw new IllegalStateException > (\" \") : _referencedType.setencedType ( ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "throw new IllegalStateException > (\" \") : _referencedType.setencedType ( ) != _referencedType ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw new IllegalStateException > (\" \") : _referencedType.set ( ) +\", value ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if ( _referencedType != JsonencedType.As.f ( ) ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "JavaType type = _referencedType;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if ( _referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "throw new IllegalStateException == (\" \") +\" ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if ( _referencedType._referencedType ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if ( _referencedType = _referencedType ) != _referencedType;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if ( _referencedType != ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "throw new IllegalStateException && (\" \") : _referencedType;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw new IllegalStateException < (\" \") : _referencedType.setencedType ( ) +\", value ) ;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); }"
    },
    "Bears-187": {
        "fixes": [
            {
                "k": 1,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND,",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, false ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_COMMAND,",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS, false ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND,",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_COMMAND, false ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_OF_QUOTES_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES ( ) .QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINIMUM_WIDTH, true ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_DOMAIN_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES ( ) .QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_RESET_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_WIDTH, true ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES, true ) ,",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINIMUM_WIDTH, false ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES ( ) .QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTESS, false ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINIMUM_WIDTH, true ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, true ) ,",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_WIDTH, false ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_OF_QUOTESS.MINUTE, true ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, true ) ,",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_OF_QUOTES_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS.MINUTE_IN_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE, true ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_IN_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_OF_QUOTESS ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_IN_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTESS, false ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINIMUM_OF_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, false ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINIMUM_WIDTH, false ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_OF_QUOTES, true ) ,",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES ( ) .QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_IN_QUOTESS, false ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES ( ) .QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS, false ) ,",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS, false ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS.MINUTE_IN_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_IN_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES, false ) ,",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES ( ) .QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES ( ) .QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_IN_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_IN_QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS.MINIMUM_WIDTH, true ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS.MINIMUM_WIDTH, false ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_RESET_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTESS.MINIMUM_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_OF_QUOTES ( ) .QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_COMMAND, ZOOM_OUT_DOMAIN_COMMAND ) , false ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OF_QUOTES ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_BOTH_COMMAND.MINUTE_OF_QUOTES, false ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_RESET_DOMAIN_COMMAND.MINIMUM_COMMAND ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS.MINIMUM_QUOTES, true ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINUTE_OF_QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTESS.MINUTE_COMMAND, true ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final ObjectMapper mapper = new ObjectMapper ( new YAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_IN_QUOTES ( ) .QUOTESS, true ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_DOMAIN_COMMAND.MINUTE_OUT_OF_QUOTES, false ) ,",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory ( newAML ( ) .configure ( ZOOM_OUT_RANGE_COMMAND.MINIMUM_COMMAND ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
        "fixed_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory() .configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true) .configure(YAMLGenerator.Feature.ALWAYS_QUOTE_NUMBERS_AS_STRINGS, true));"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( !started ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( !startedSet ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( !use ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( ! synthesizedExterns ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( !hasstarted ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( !numberstarted ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( !PRESSION ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( !use xyplot ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( ! xx ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( ! Create ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( !startedIndex ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( !startedStart ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( !Incompatible ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( !value ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( !useVars ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( !green ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( !startedss ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( !attrib ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( !use7 ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( !useUnknown ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( !useMin ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( !started2 ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( !useStart ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( !size ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( !Repeat ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( ! FACTORY ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( !negative ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( !use xy ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( !started7 ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( ! xyplot ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( !RETURN ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( !started1 ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( !shouldstarted ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( !startedype ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( !useUnicodeEscapeStart ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( ! metrics ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( !useUnicodeEscape ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( ! extractor ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( !804 ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( !ribute ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( ! accurate ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( !Param ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( !Range ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( !Double ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( !BIT ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( !notify ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( !startedSetss ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( !useUnicode ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( !cyStart ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( ! ax ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( !flow ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( !that ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( !fi ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( !this.started ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( !Allowed ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( !radius ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( ! synthesizedExternsRoot ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( !' ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( ! TreeSet ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( !hasstartedIndex ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( !this ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( !Same ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( !startedProperty ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( !guard ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( ! us ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( !ends ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( !Inner ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( !Regular ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( ! provides ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( !props ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( !reverse ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( !HIGH ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( !second ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( !StringValue ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( !Intercept ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( !Ratio ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( !close ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( ! BufferedImage ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( ![-1 ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( ! addListener ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( ! changes ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( ! looks ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( !])); ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( ! newInstance ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( !points ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( ! writeString ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( !NaN ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( !Result ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( !\u1b8c ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( !ID ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( !09 ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( !REQUIRED ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( !Arrow ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( !type ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( !Cl ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( ! gather ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( !this.startedStart ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( !late ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( !iterable ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( !64_ ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_STRINGS.databind_EMPTY_STRING_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if ( ai.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if ( ai.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_EMPTY_STRINGS.databind_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( index ) ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( 3.databind_ENUMS_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( index ) ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if ( 3.databind_ENUMS_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == '>' ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) == ']' ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if ( ai.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if ( 3.databind_ENUMS_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) == '>' ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBER_STRINGS.databind_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if ( name.size ( ) ) ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if ( ai.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL_OBJECT == '>' ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL_OBJECT == '>' ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( index ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if ( JsonToken.VALUE_STRING.databind_NUMBER_EMPTY_STRING_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_STRINGS.databind_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if ( 3.databind_ENUMS_VALUE_NUMBERS.databind_STRING_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 0 ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_STRINGS.databind_EMPTY_STRING_AS_NULL_OBJECT == '>' ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( index ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 0 ) == '>' ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_INTS.databind_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( index ) ==' ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) == 'A' ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBER_STRINGS.databind_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 0 ) ==' ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ( name.databind_VALUE_NUMBER_STRINGS.databind_AS_NULL.charAt ( 0 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if ( ai.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL_OBJECT == '>' ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == '>' ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( index ) ==' ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 3 ) ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == 'A' ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 3 ) ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 1 ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) >= ']' ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL_OBJECT == ']' ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) >= ']' ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( 1 ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( index ) == ']' ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( 0 ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if ( ai.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) == ']' && indexes.charAt ( 1 ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( 3 ) ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if ( name.databind_VALUE_NUMBER_STRINGS.databind_AS_NULL ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if ( name.databind_VALUE_NUMBER_STRINGS.databind_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( index ) == ']' ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) .charAt ( index ) == ']' ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( value ) == '>' ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if ( lm.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 0 ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS_EMPTY_STRING_AS_NULLS.databind.charAt ( 0 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( 0 ) ==' ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBER_STRINGS.databind_AS_NULLS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 0 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 1 ) >= ']' ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if ( name.databind_VALUE_NUMBER_STRINGS.databind_AS_NULL.charAt ( 0 ) == '>' ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_STRINGS.databind_EMPTY_STRING_AS_NULL_OBJECT == ']' ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if ( JsonToken.VALUE_NUMBER_STRING ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if ( 3.databind_ENUMS_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == '>' ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 0 ) ==' ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( 2 ) ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS_STRINGS.databind_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) >= 'A' ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL_OBJECT == ']' ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if ( 3.databind_ENUMS_VALUE_NUMBERS.databind_STRING_AS_NULLS ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if ( name.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULL.charAt ( 0 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( index ) == ':' ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if ( JsonToken.VALUE_STRING.databind_NUMBER_EMPTY_STRING ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULL_OBJECT == '>' ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRINGS.databind_AS_NULLS ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( index ) == ']' ) ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_EMPTY_STRING_AS_NULLS ( ) .charAt ( 0 ) == ']' && indexes.charAt ( 1 ) == ']' ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( 1 ) ) ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( index ) == ']' ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS_EMPTY_STRING_AS_NULLS.databind_NUMBERS ( ) ) ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if ( INT_ENUMS.databind_VALUE_NUMBERS.databind_STRING_AS_NULLS ( ) .charAt ( 1 ) == ']' && indexes.charAt ( 1 ) == ']' ) ) {",
                "identical": false
            }
        ],
        "buggy_line": "} else { // [databind#149]: Allow use of 'String' indexes as well char c = name.charAt(0); if (c >= '0' && c <= '9') { try { int index = Integer.parseInt(name); if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\" ); }",
        "fixed_line": "} else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)"
    },
    "Bears-120": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( ctx.contains ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if ( multiplierNonZeroOddNumber ( ) < length ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( ctx.contains ( buf, length ) ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if ( ctx.contains ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( ctx.contains ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if ( multiplierNonZeroOddNumber.size ( ) < length ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( multiplierNonZeroOddNumber ( ) < length ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( ctx.contains ( buf, length ) > 11 ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( multiplierNonZeroOddNumber ( ) == null ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.handle ( ) == null ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( ctx.contains ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.handle ( ) < length ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( ctx.strict ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if ( multiplierNonZeroOddNumber.size ( ) == 11 ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if ( ROOT_NAME_FOR_NULL. (3 ( ) == null ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if ( ctx.contains ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) != null ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if ( ctx.contains ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if ( ctx.contains ( buf, length ) ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( ctx.contains ( buf, length ) == 11 ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if ( ctx.contains ( buf, length ) > 11 ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( ROOT_NAME_FOR_NULL.handle ( ) == null ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if ( ctx.contains ( buf, length ) == 11 ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) > 11 ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( ctx.contains ( buf ) ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( ctx.cz ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if ( multiplierNonZeroOddNumber.size ( ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( ctxBytes.contains ( buf, length ) ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( ctxBytes.contains ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( multiplierNonZeroOddNumber.size ( ) < length ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( ctx.size ( ) < length ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.size ( ) < length ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( ROOT_NAME_FOR_NULL.handle ( ) < length ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if ( ROOT_NAME_FOR_NULL. (3 ( ) < length ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( ctx.contains ( buf ) == null ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if ( multiplierNonZeroOddNumber.size ( ) > 11 ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( multiplierNonZeroOddNumber ( ) == null ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( ctxBytes.contains ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( other, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf ) == null ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.equals ( ) ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( ctx.contains ( buf, length ) != null ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf, length ) > 11 ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( ctx.contains ( buf, length ) != 11 ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( multiplierNonZeroOddNumber ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf, length ) != null ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if ( ctx.size ( ) < length ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) < ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( ctx.fa ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.size ( ) == 11 ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, offset ) == null ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.size ( ) == null ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if ( multiplierNonZeroOddNumber ( ) <= length ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf ) == null ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf, length ) ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.equals ( buf, length ) ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, ) ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ( ctx.contains ( buf, length ) != null ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.equals ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( ctx.strict ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( ctx.strict ( buf, length ) == 11 ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, null ) < 11 ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( ctxBytes.contains ( buf, length ) > 11 ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if ( safeReturn ( ) == null ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( ctx.Equals ( ) < length ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if ( multiplierNonZeroOddNumber.size ( ) == null ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( ctx.contains ( buf ) < length ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if ( ctx.contains ( buf, length ) != 11 ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if ( ctx.cz ( ) == null ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( ctxBytes.cz ( ) == null ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( multiplierNonZeroOddNumber ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( other, length ) == null ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, 11 ) == null ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, offset ) < 11 ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( ctx.MEMBER ( buf, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if ( multiplierNonZeroOddNumber.contains ( buf ) < length ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( ctx.cz ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, ) == null ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( ctx.contains ( buf, length ) >= 11 ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( ctx.contains ( buf, offset ) == null ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.equals ( other, length ) ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) < null ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.handle ( ) != null ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if ( multiplierNonZeroOddNumber ( ) < ctx.size ( ) ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( ctx.strict ( buf, length ) > 11 ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( ctx.contains ( escCode, length ) < 11 ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.equals ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( ctx.cz ( buf, length ) == null ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if ( multiplierNonZeroOddNumber.size ( ) < ctx ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if ( ctx.size ( ) == 11 ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( ctxBytes.contains ( buf, length ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.size ( ) <= 11 ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if ( ROOT_NAME_FOR_NULL.contains ( buf, length ) < 0 ) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// Skip Alive message while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) { buf.readByte(); }"
    },
    "Bears-135": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( beginIndex > 0 ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( beginIndex >= 0 ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( beginIndex > -1 ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( beginIndex == 0 ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( beginIndex > 1 ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( beginIndex < 0 ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( beginIndex > DTOSTR_STANDARD_EXPONENTIAL ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( beginIndex > beginIndex ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( '$', buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( lineIndex > 0 ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf (addIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( lineIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( frameIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( beginIndex == 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( '$', buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( lineIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.length ( ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( endIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , i ) ; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( Variable.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( blIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( Variable.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( readIndex, buf.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( endIndex, buf.indexOf ( '\\n' ) , '\\r' ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.length ( ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( beginIndex > ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( frameIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( '$', buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , i ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, i.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf (addIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( beginIndex, buf.indexOf ( '\\n' ) , '\\r' ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( readIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( endIndex, buf.indexOf ( \"Index ) , '\\n' ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( beginIndex, buf.indexOf ( \"Index ) , '\\n' ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, i.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( blIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( endIndex, buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( blIndex.indexOf ( \"Index, buf ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , true ) ; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\tIndex ) ; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( blIndex.indexOf ( \"Index, i ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( blIndex.indexOf ( \"Index, endIndex ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) > '\\r' ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.outIndex ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( '$', buf.indexOf ( \"Index ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.outIndex ) ; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( endIndex, bufIndex.indexOf ( '\\n' ) , '\\r' ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, buf.indexOf ( '$' ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\tIndex ) > 0 ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) > 0 ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( beginIndex > endIndex ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, buf.indexOf ( '\\n' ) , '\\tIndex ) > 0 ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '$' ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( '$', buf.indexOf ( '\\n' ) , '\\tIndex ) ; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) > 0 ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, buf.indexOf ( '\\n' ) , '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf ) ; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\tIndex ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( blIndex, buf.indexOf ( '\\n' ) , '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( endIndex, buf.indexOf ( '\\n' ) , '\\tIndex ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( l.indexOf ( '$', endIndex ) , '\\n' ) ; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index, '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( Variable.indexOf ( '\\n' ) , buf.indexOf ( \"Index, '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( beginIndex > i ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) > 0 ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.indexOf ( \" ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.outIndex ) ; }",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( Variable.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) > 0 ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index\" ) > 0 ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( Variable.indexOf ( '\\n' ) , buf.indexOf ( \"Index, '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( blIndex.indexOf ( '\\n' ) > '\\r' ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , i ) ; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.outIndex ) ; }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) > '\\r' ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index, '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( endIndex, buffer.indexOf ( '\\n' ) , '\\r' ) ; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( \"Index.indexOf ( '\\n' ) , buf.outIndex ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf (addIndex, buf.indexOf ( '\\n' ) , '\\r' ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( beginIndex > 0 ) Kit.readerIndex ( beginIndex, buf.indexOf ( '\\n' ) , '\\tIndex ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index\" ) > 0 ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( beginIndex > 0 ) { buf.indexOf ( Variable.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) > 0 ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( beginIndex >= 0 ) { buf.indexOf ( bl.indexOf ( '\\n' ) , buf.indexOf ( \"Index ) , '\\r' ) > 0 ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (beginIndex > 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex > 0) {",
        "fixed_line": "if (beginIndex >= 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex >= 0) {"
    },
    "Bears-108": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .? ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .? ( ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .? ( ) .intern ( ) +\" ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .? ( ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOf ( \"numberInt ( \"+input ) +\" ) \" ) . at \"+d+\" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number)). ( \"numberInt ( \"+dd ) +\" ) \" ) . at \"+d+\" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOf ( \"numberInt ( \"+input ) +\" ) \" ) . at \"+d+\" ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) : \" ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number)). ( \"numberInt ( \"+dd ) +\" ) \" ) . at \"+d+\" ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) +\" ) \" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? \" ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .abs ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .? ( ) .intern ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .textValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .? ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .? ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) , ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .doubleValue ( ) ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) , ( \" ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) +\" ) .intern ( ) .doubleValue ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) : \" ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .textValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .textValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOf ( \"numberInt ( \"+input ) +\" ) \" ) . atdd' ( \"+d ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) .? ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .? ( ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) +\" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .? ( ) .intern ( ) +\" ) .doubleValue ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) + \" ) \" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( ) .intern ( ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) .intern ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberInt ( \"numberChange ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .textValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( \"+d' ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) +\" ) \" ) .intern ( ) .doubleValue ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .? ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) . isSupported ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberInt ( \"numberChange ) +\" ) .Degrees ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) , ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOf ( \"numberInt ( \"+input ) +\" ) \" ) . atdd' ( \"+d ) .intern ( ) +\" ) : \" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number)). ( \"numberInt ( \"+dd ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .textValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) \" ) .? ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( \"+d' ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) .? ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .? ( \"+d' ) \" ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .intern ( ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) .? ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number)). ( \"numberInt ( \"+dd ) +\" ) . atdd' ( \"number of ) \" ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .? \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .? ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberInt ( \"numberChange ) . at ) .intern ( ) +\" ) , ( (ss.getY ( ) +\" ) \" ) .intern ( ) .doubleValue ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .intern ( ) .? ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .? \" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) , ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .? ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number)). ( \"numberInt ( \"+dd ) +\" ) . atdd' ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) \" ) .Syntax ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberInt ( \"numberInt ( \"+dd ) +\" ) . at at+\" ( d ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .intern ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) +\" ) , ( ) .doubleValue ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOf ( \"numberInt ( \"+input ) +\" ) \" ) . atdd' ( \"number of ) \" ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( ) .intern ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberNegative ( \"numberInt ( \"+dd ) +\" ) \" ) . at at 'd' ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberInt ( \"numberChange ) +\" ) . retained ( \"+d ) .intern ( ) .doubleValue ( ) +\" ) : \" ) .? ( \"+d' ) \" ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(dd)(dd)(dd):\") // time (hhmmss) .number(\"(-?d+.d+):\") // longitude .number(\"(-?d+.d+):\") // latitude .number(\"(d+.?d*):\") // speed .number(\"(?:NAN|(d+.?d*)):\") // accuracy .number(\"(?:NAN|(d+.?d*)):\") // course .number(\"(?:NAN|(d+.?d*))\") // altitude",
        "fixed_line": ".number(\"(dd)(dd)(dd)\") // time (hhmmss) .number(\":(-?d+.d+)\") // longitude .number(\":(-?d+.d+)\") // latitude .number(\":(d+.?d*)\") // speed .number(\":(?:NAN|(d+.?d*))\") // accuracy .number(\":(?:NAN|(d+.?d*))\") // course .number(\":(?:NAN|(d+.?d*))\").optional() // altitude"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) || ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType ( ) .isPrimitive ( ) || fieldNames.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) || ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) && ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) && ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) || ignored.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) && ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) && ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( ) || ignored.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) && ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) && ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType ( ) .isPrimitive ( ) && fieldNames.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) && ignored.getName ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) && ignored.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) || ignored.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( fieldNames.getName ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) , ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( value.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( value.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( value.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getClass ( ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) && ignored.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( ) || ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( value.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) == ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.getName ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) != ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( ) || ignored.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) < ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ||",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( ) || ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( ) && ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) , ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( fieldNames.getName ( ) ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) == ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( fieldNames.getName ( ) ) , ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) && ignored.getName ( ) .contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) || fieldNames.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( value.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( type.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType ( || ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return other.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) && ignored.getName ( ) .contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return type.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( typeNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.getName ( ) .contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return iField.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( field.getName ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType ( & ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( fieldNames.getNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( fieldNames.getNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( ) || fieldNames.contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType ( && ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( type.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType ( instanceof ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isArray ( field.getName ( ) || ignored.contains ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) || ignored.getName ( ) .contains ( field.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .contains ( typeNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isNames ( field.getName ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return type.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( field.getName ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return other.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( fieldNames.getName ( ) || ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.isArray ( ) || ignored.contains ( fieldNames ( ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType ( ) .isPrimitive ( ) || field.getType ( ) .isNames ( field.getName ( ) || ignored.contains ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType ( >= ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType ( ) .isPrimitive ( ) && field.getType ( ) .isArray ( ) && ignored.getName ( ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return fieldNames.getType ( ) .isPrimitive ( ) || field.getType ( ) .contains ( fieldNames.getName ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( parser.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( parserList.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( parserList.hasNext ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( parserList.hasNext ( position ) ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( f.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_CENTER ) ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( parser ==(4.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( names.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( parserList.hasNext ( null ) ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( parser.hasNext ( position ) ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( parserListList.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( parser.hasNext ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_RELATIVE ) ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( parserList.hasNext ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( parserList.hasNext ( 3 ) ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( NO_SIDE_EFFECTSS.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( parserList.hasNext ( -1 ) ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( deserialize.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( primary.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_MONDAY ) ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( parserList.hasNext ( orderType ) ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_S ) ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( parserList.hasNext ( 2 ) ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( parser ) ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( parserList ) ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( parserList ==(4.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( suffix.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( parserss.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( 0 ) ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( jp.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( parserList.hasNext ( parser ) ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( parser !=(4.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( parser.hasNext ( null ) ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( position.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( parserList.hasNext ( 4 ) ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( parser.3.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( position ) ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( NO_SIDE_EFFECTS_CALL.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( NO_SIDE_EFFECTS.equals ( parser ) ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( parserList.hasNext ( cl ) ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( calendar.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( valid.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( parser.2.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( input.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( smallestValue.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( parserList.hasNext (Rect ) ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( parserList.hasNext (era ) ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( NO_SIDE_EFFECTS ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( json.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( parser ) ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( parser.hasNext ( 3 ) ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( recvType.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( type.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( getBean.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( force.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( el.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( parserList.hasNext ( i ) ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( parser.hasNext ( -1 ) ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( val.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_IN_S ) ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( _parser.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( NO_SIDE_EFFEFFECTS.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( cl.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (root.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( parser.hasNext ( 2 ) ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( maxParsedDigits ) ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( null ) ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( minutes.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( parser.0.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( value.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( signature.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( dontUse.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( < ) ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( superclass.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( recv.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_IN_MONTH ) ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( ymin.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_IN_MONDAY ) ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( creator.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( short.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( minPrintedDigits ) ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( 2 ) ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( NO_SIDE_EFFECTS.hasNext ( 3 ) ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( parser.hasNext ( 1 ) ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( desc.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( suppress.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( NO_SIDE_EFFECTS.nextInt ( position ) ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_OF_MONDAY ) ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( parser.4.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( NO_SIDE_EFFECTS.equals ( position ) ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( parser.hasNext ( parser ) ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( wholeValue.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( NO_SIDE_EFFECTS.next ( ) ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( opt.hasNext ( ) ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( parser.hasNext ( cl ) ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( parserList.hasNext ( RANGE_WEEK_IN_CENTER ) ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( Property.hasNext ( ) ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-250": {
        "fixes": [
            {
                "k": 1,
                "patch": "int cardinality = map.size ( ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int cardinality = values.size ( ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int cardinality = null.size ( ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int cardinality = 2.size ( ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int cardinality = i.size ( ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int cardinality = index.size ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int cardinality = entry.size ( ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int cardinality = 1.size ( ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int cardinality = this.size ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int cardinality = value.size ( ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int cardinality = initialCapacity.size ( ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int cardinality = 0.size ( ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int cardinality = 4.size ( ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int cardinality = parent.size ( ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int cardinality = key.size ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int cardinality = 3.size ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int cardinality = size.size ( ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int cardinality = handler.size ( ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int cardinality = list.size ( ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int cardinality = new int[] values.size ( ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int cardinality = obj.size ( ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int cardinality = hashCode.size ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int cardinality = new int[size ( ) ];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int cardinality = copy.size ( ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int cardinality = n.size ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int cardinality = result.size ( ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int cardinality = newValue.size ( ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int cardinality = listener.size ( ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int cardinality = transform.size ( ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int cardinality = threshold.size ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int cardinality = newArray.size ( ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int cardinality = cache.size ( ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int cardinality = new int[size ( ) ] = values[size];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int cardinality = data.size ( ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int cardinality = new int[] { map.size ( ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int cardinality = converted.size ( ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int cardinality = new int[size ( ) ] = values[cardinalityMap];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int cardinality = values[size ( ) ] = new int[cardinalityMap];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int cardinality = root.size ( ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int cardinality = new int[size.size ( ) ];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int cardinality = modCount.size ( ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int cardinality = newSize.size ( ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int cardinality = layout.size ( ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int cardinality = t.size ( ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int cardinality = node.size ( ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int cardinality = values[size ( ) ] = new int[size];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int cardinality = values[size ( ) ];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int cardinality = valueToAdd.size ( ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int cardinality = null[size.size ( ) ];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int cardinality = referenced.size ( ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int cardinality = toIndexExclusive.size ( ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int cardinality = values[size.size ( ) ];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int cardinality = title.size ( ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int cardinality = indices.size ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int cardinality = j.size ( ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int cardinality = new int[size ( ) ] = values[cardinalityLength];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int cardinality = zone.size ( ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int cardinality = length.size ( ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int cardinality = values[size ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int cardinality = start.size ( ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int cardinality = array.size ( ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int cardinality = new int[] { map.size ( ) ];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int cardinality = other.size ( ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int cardinality = values[size.size ( ) ] = new int[cardinalityMap];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int cardinality = new int[] { map = new int[card.size ( ) ];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int cardinality = valueMap.size ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int cardinality = new int[size ( ) ] = values[cardIndex];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int cardinality = json.size ( ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int cardinality = test.size ( ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int cardinality = values[size ( ) ] = new int[cardinalityLength];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int cardinality = elements.size ( ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int cardinality = removed.size ( ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int cardinality = new int[size ( ) ] = new int[size];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int cardinality = old.size ( ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int cardinality = hour.size ( ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int cardinality = new int[size ( ) ] = values[card.size ( ) ];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int cardinality = new int[size ( ) ] = new int[cardinalityMap];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int cardinality = image.size ( ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int cardinality = new int[size ( ) double[] values = new int[size];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int cardinality = valueSet.size ( ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int cardinality = values[size.size ( ) ] = new int[size];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int cardinality = types.size ( ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int cardinality = meter.size ( ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int cardinality = new int[size ( ) ] = values[card.cardinalityMap];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int cardinality = values[size.size ( ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int cardinality = check.size ( ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int cardinality = new int[size ( ) ] = values[card.size];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int cardinality = found.size ( ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int cardinality = values[size ( ) ] = this.cardinalityMap[size];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int cardinality = lowest.size ( ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int cardinality = getter.size ( ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int cardinality = new int[] {sizesize ( ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int cardinality = initial.size ( ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int cardinality = hash.size ( ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int cardinality = format.size ( ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int cardinality = Collections.size ( ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int cardinality = new int[size ( ) ] = this.cardinalityMap[size];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int cardinality = symbol.size ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int cardinality = tmp.size ( ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int cardinality = partial.size ( ) ;",
                "identical": false
            }
        ],
        "buggy_line": "int cardinality = map.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
        "fixed_line": "TreeMap<Integer, ? extends Number> sortedMap = new TreeMap<>(map); int cardinality = sortedMap.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : sortedMap.entrySet()) {"
    },
    "Bears-137": {
        "fixes": [
            {
                "k": 1,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.acceptIndex ( ) , new String.writer ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.CharIndex ( ) , new String.writer ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String.writerIndex ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader. writerIndex ( ) , new String.writer ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int flagIndex = buf.indexOf ( tab.length ( ) , new String.writerIndex ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex == -1 ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.acceptIndex ( ) , new String.writerIndex ( \"AA\" ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.acceptIndex ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex == -1 ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int flagIndex = buf.indexOf ( tab1.indexOf ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index, 1 ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index, -1 ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index, 0 ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int flagIndex = buf.indexOf ( tab.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) , beginIndex.toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int flagIndex = buf.indexOf ( tab1.indexOf ( \"reader\" ) , new String.writer ( \"Index\" ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"$$\" ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"AA\" ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex != -1 ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"$$\" ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"\" ) , textIndex != -1 && beginIndex != -1 ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , buf.toString ( ) + 6 ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"\" ) , bufIndex != -1 && beginIndex == -1 ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new StringIndex, -1 ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"Index.writer\" ) , new StringIndex ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"\" ) , textIndex != -1 && beginIndex == -1 ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int flagIndex = buf.indexOf ( tab1.indexOf ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new StringIndex, -1 ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , buf.writer ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writer ( \"Index\" ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int flagIndex = buf.indexOf ( tab.acceptIndex ( \"reader\" ) , new String.writer ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writerIndex ( \"$$\" ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , buf.toString ( ) + 5 ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int flagIndex = buf.indexOf ( tab.acceptIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) , ( \"Index.toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.acceptIndex ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex != -1 ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"\" ) , bufIndex != -1 && beginIndex != -1 ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) , \" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex != -1 ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new String ( \"Index\" ) , buf.toString ( ) + 6 ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"\" ) , bufIndex != -1 && beginIndex == -1 ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int flagIndex = buf.indexOf ( tab.length ( ) , new String.writerIndex ( \"AA\" ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new String ( \"Index\" ) , buf.toString ( ) + 5 ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new StringIndex ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int flagIndex = buf.indexOf ( tab1.indexOf ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.REGEXIndex ( \"Index - 6 ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int flagIndex = buf.indexOf ( '_' ) , new String ( \"reader\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"\" ) , bufIndex != -1 && beginIndex != -1 ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.length ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int flagIndex = buf.indexOf ( tab.acceptIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"\" ) , textIndex != -1 && beginIndex == 5 ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writer ( \"Index\" ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new String ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int flagIndex = buf.indexOf ( tab.acceptIndex ( \"reader\" ) , new String.writer ( \"Index\" ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) , ( \"Index ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int flagIndex = buf.indexOf ( '\\''.writer ( > ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.parseIntIndex ( \"Index\" ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new StringIndex,",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.length ( ) - 5 ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new StringIndex ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int flagIndex = buf.indexOf ( '\\''.writer ( > ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex == 5 ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"AA\" ) , new StringIndex != -1 && beginIndex == -1 ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"Index\" ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int flagIndex = buf.indexOf ( tab.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new String ( \"Index\" ) , buf.toString ( ) - 6 ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"List\" ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int flagIndex = buf.indexOf ( tab.acceptIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index.HOUR_OF_DAY ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writerIndex ( \"AA\" ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , text.toString ( ) + 6 ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.toString ( ) - 5 ) , beginIndex ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) - 5 ) ,",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index\" ) , buf.toString ( ) ,",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writer ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"reader\" ) , new StringIndex,",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int flagIndex = buf.indexOf ( DTOSTR_STANDARD_EXPONENTIAL.indexOf ( \"$$\" ) , new String ( \"Index, value ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader.accept ( ) , new String.writerIndex ( \"\" ) , bufIndex != -1 && beginIndex == -1 ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int flagIndex = buf.indexOf ( sym.readerIndex ( \"reader\" ) , new String.writer ( \"Index\" ) , buf.toString ( ) + 6 ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int flagIndex = buf.indexOf ( tab.length ( ) , new String ( \"reader\" ) , new StringIndex,",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int flagIndex = buf.indexOf ( tab.reader ( \"reader\" ) , new String.writerIndex ( \"Index\" ) , buf.toString ( ) + 6 ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int flagIndex = buf.indexOf ( tab2.length ( ) , new String ( \"reader\" ) , buf.errorIndex ( \"Index\" ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\")); if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
        "fixed_line": "int separatorIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '|'); if (separatorIndex > 0 && separatorIndex - beginIndex > 19) {"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private void addAr\u1e89Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private void addArrivedInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private void addAr\u1e89Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private void addArrivedInput (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private void addAr\u1e89Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private void addArrivedInput (RecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private void addAr\ufe0e (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private void addArrivedInput (RecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private void addAr\u8086Input (RecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private void addAr\u8086Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private void addArWithMockInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private void addArimen (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private void addAr\u8086Input (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private void addAr\u0138Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private void addArimen (RecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private void addAr threadPool (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private void addAr\u8086Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private void addAr\u8086Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private void addAr\ua74a (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputEnd ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private void addAr\u2ebc (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private void addAr\u0e32Input (RecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private void addAr\u0e32Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private void addAr\ufe0e (RecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private void addAr'],Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private void addAr threadPool (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private void addArrivedInput (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private void addArrivedInput (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private void addAr'],Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private void addAr\u1e89Input (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private void addAr transformsInput (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private void addAr\u0e32Input (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private void addAr threadPool (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInputEnd ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private void addAr BUTTONInput (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private void addArrivedInput ( sigInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private void addAr\u0e32Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private void addAr\u1a82Input (RecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private void addAr\u0e32Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private void addAr\u1e89Input (RecordsInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private void addAr\u1e89Input (RecordsInput ) processInput (RecordsInput ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private void addAr BUTTONInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private void addAr transformsInput (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private void addAr 123456789Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private void addAr\u0c02Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private void addAr\u0138Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private void addArrivedInput ( sigInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private void addAr Hierarchy (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecords, processInputEnd ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private void addAr\u14a9Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private void addArWithMockInput (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecords, processInputEnd ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private throw synchronizedException (\" \") ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private void addAr\u8086Input (RecordsInputRecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInputRecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private void addArimen (RecordsInputEnd ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private void addAr transformsInput (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private void addAr\u4149Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private void addAr\u1797 (RecordsInputype ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private void addArrivedInput ( sigInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private void addAr\u0c02Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private void addAr\u8086Input (RecordsInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private void addAr transformsInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private void addAr forecast (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private void addAr BUTTONInput (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private void addAr 123456789Input (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecords, processInputype ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecords, processInputype ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private void addAr'],Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private void addArATHInput (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private void addAr\ua74a (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private void addAr\u1e89Input (RecordsInput ) processInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private void addArimen (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private void addAr\u0138Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private void addAr databinding (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private void addArrivedInput (RecordsInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private void addAr\u6b64Input (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private void addAr\u905eInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private void addArdistributionInput (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInputRecordsInputEnd ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private void void addArrivedInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInputRecordss ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private void addAr\u6b64Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private void addAr\u1797 (RecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private void addArVectorLayerInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private void addAr\u0c02Input (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private void addArWithMockInput (RecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private void addAr\ua53bInput (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private void addArrivedInput ( sigInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private void addAr\u1797 (RecordsInput ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private void addAr\u905eInput (RecordsInputRecordsInputRecordsInputRecords ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private void addAr\ufe0e (RecordsInput<ArInput ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private void addArATHInput (RecordsInputRecordsInputRecordsInputRecordsInput ) ;",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-151": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( value instanceof String ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( value | String ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( value << String ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( value >= String ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( value & String ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( value >> String ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( value && String ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( value < String ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( value != String ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( value || String ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( value == String ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( value.put ( String ) sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( value <= String ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( value > String ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( value != String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( value.put ( String ) sub.put ( sub.valueOf ( value, String.valueOf ( name ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( value >= String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( value.put ( String ) sub.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( value && String.put ( sub.put ( sub, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( value == String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( value && String ) sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( value instanceof String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( value & String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( value == String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( value.put ( String ) sub.put ( sub.valueOf ( subName, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( value < String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( value > String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( value == String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( value && String.put ( sub.put ( sub, String.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( value < String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( value.put ( sub ) == String.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( value != String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( value && String ) sub.put ( sub.valueOf ( name, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( value == String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( value <= String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( value.put ( sub ) || String.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( value < String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( value.put ( sub ) == String.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( value < String.putProperties ( sub.put ( name, String.valueOf ( value ) ) .put ( String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( value.put ( sub ) && String.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( value && String.put ( sub.put ( subName, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( value.put ( String ) sub.put ( sub.valueOf ( value, String.valueOf ( sourceName ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( value && String ) sub.put ( sub.valueOf ( value, String.valueOf ( name ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( value.put ( sub ) instanceof String.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( value == String.putProperties ( sub.put ( subName, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( value == String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( value && String ) sub.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( value.put ( sub ) || String.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( value.put ( String ) sub.put ( sub.valueOf ( name, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( value == String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( value.put ( sub ) && String.put ( sub.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( value.put ( String ) sub.put ( subName, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( value && String.put ( sub.put ( sub, String.valueOf ( value ) ) .put ( String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( value && String.putProperties ( sub ) == String.put ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( value && String.put ( sub.put ( sub, String.valueOf ( value ) ) .put ( sub.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( value < String.putProperties ( sub.put ( name, String.valueOf ( value ) ) .put ( sub.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( value && String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( value == String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( value && String.put ( sub.put ( subName, String.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( value.put ( sub ) instanceof String.put ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( value && String.putProperties ( sub.put ( value, String.valueOf ( name ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( value && String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( value.put ( sub ) instanceof String.put ( sub.valueOf ( value, String.valueOf ( name ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( value >> String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( value & String ) { sub.putProperties ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( value && String.put ( sub.put ( subName, String.valueOf ( value ) ) .put ( sub.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( value && String ) sub.put ( String.valueOf ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( value.put ( String ) sub.put ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( value == String.putProperties ( sub.put ( subName, String.valueOf ( value ) ) ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( value && String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( value.put ( sub ) instanceof String.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( value << String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( value && String.putProperties ( sub.put ( String.valueOf ( value, String.valueOf ( value ) ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( value || String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( value && String.putProperties ( sub.put ( name, String.valueOf ( value ) ) .put ( sub.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( value.put ( sub ) && String.put ( value, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( value == String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( value == String.putProperties ( sub.put ( subName, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( value | String ) { sub.put ( sub.valueOf ( value, String.valueOf ( value ) ) ; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( value || String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( value == String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( value && String.put ( sub.put ( sub, String.valueOf ( value ) ) .put ( value.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( value && String.putProperties ( sub.valueOf ( subName, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( value && String.putProperties ( sub.put ( subName, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( value && String.put ( sub.put ( sub, String.valueOf ( value ) ) .put ( value.valueOf ( name ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( value && String.putProperties ( sub.put ( name, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( value && String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( value && String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( value < String.putProperties ( sub.put ( name, String.valueOf ( value ) ) .put ( value.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( value && String.putProperties ( sub.put ( name, String.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( value instanceof String ) { sub.put ( sub.valueOf ( value, String.valueOf ( name ) ) ; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( value.put ( sub ) instanceof String.put ( value, String.valueOf ( name ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( value || String.putProperties ( sub.put ( subName, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( value == String.putProperties ( subName, String.valueOf ( sub.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( value || String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( value && String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( value && String.putProperties ( sub.put ( value, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( value && String.putProperties ( subName, String.valueOf ( value ) ) .put ( name ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( value < String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( value.valueOf ( value ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( value == String.putProperties ( sub.put ( sub, String.valueOf ( value ) ) .put ( value ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "if (value instanceof String) { subProperties.put(subName, String.valueOf(value)); }",
        "fixed_line": "subProperties.put(subName, String.valueOf(value));"
    },
    "Bears-186": {
        "fixes": [
            {
                "k": 1,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "LegendAtIntersect = INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "LegendAtIntersect = baseMethod.contains (ole.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_METHOD_NAME.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "LegendAtIntersect = baseMethod.contains (\u1cedProperties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "BooleanUtils.contains ( INTERFACE_METHOD_NAME.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "LegendAtIntersect = baseUri.get (POM.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "LegendAtIntersect = baseUri.get (POMProperties.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "LegendAtIntersect = baseUri.get (\u6830Properties.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_ONLY.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "LegendAtIntersect = base.get (\u6830Properties.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "LegendAtIntersect = baseUri.get ( timestamp.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "LegendAtIntersect = baseMethod.contains (\u1cedProperties.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS.get ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "BooleanUtils.contains ( kill.get ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "LegendAtIntersect = base.get (POMProperties.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.get ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_ONLY.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "converterUtils.contains ( baseMethodProperties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "converterUtils.contains ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "LegendAtIntersect = base.get (POM.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "LegendAtIntersect = baseMethod.contains (ole.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.get ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "LegendAtIntersect = INTERFACE_FUNCTION_MEMBERS.toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "LegendAtIntersect = INTERFACE_FUNCTION_MEMBER.toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "LegendAtIntersect = INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS.toString ( ) ) .toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6Properties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_ONLY ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "typ typedAboutArgList =Dir.toString ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS.toString ( ) ) .toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_ONLY ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "LegendAtIntersect = baseUri.get (\u6830Properties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_METHOD_NAME ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( Domain.contains ( baseUri ) .toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( || ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6Properties.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_METHOD_NAME.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "';edAboutArgList =Dir.toString ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "LegendAtIntersect = baseUri.get (POMProperties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "LegendAtIntersect = base.get (\u6830Properties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_ONLY.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "LegendAtIntersect = INTERFACE_FUNCTION_MEMBER.toString ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS.get ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "BooleanUtils.contains ( INTERFACE_METHOD_OVERRIDE ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "LegendAtIntersect = baseUri.get (RowCount ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "LegendAtIntersect = baseUri.get ( gen ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_ONLY.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "BooleanUtils.contains ( INTERFACE_METHOD_NAME.toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "converterUtils.contains ( baseMethod ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "BooleanUtils.contains ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "BooleanUtils.contains ( kill.get ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "BooleanUtils.contains ( kill.get ( ) .toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_METHOD_NAME.get ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6 ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "BooleanUtils.contains ( INTERFACE_METHOD_NAME.get ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_METHOD_NAME ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( Domain.contains ( baseUri ) .toString ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "BooleanUtils.contains ( INTERFACE_METHOD_NAME ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.get ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( || ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "LegendAtIntersect = base.get (POMProperties.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "BooleanUtils.contains ( INTERFACE_METHOD_NAME.get ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6 ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "LegendAtIntersect = baseUri.get ( timestamp.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBER_ONLY ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "LegendAtIntersect = baseMethod.contains (ole.toString ( ) ) .toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "LegendAtIntersect = baseUri.get (POM.toString ( ) ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "LegendAtIntersect = base.get ( gen ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "';edAboutArgList =ole.toString ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "typ typedTimeline.contains ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NAME ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.get ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "BooleanUtils.contains ( baseMethod ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "LegendAtIntersect = INTERFACE_FUNCTION_METHOD.toString ( ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( && ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "converterUtils.contains ( INTERFACE_FUNCTION_NOT_EMPTY.toString ( ) ) .toString ( || ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "';edAboutArgList = Simple.toString ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "LegendAtIntersect = baseUri.toString (RowCount ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS.get ( ) ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( Domain.contains ( baseUri ) .toString ( ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "BooleanUtils.contains ( INTERFACE_FUNCTION_MEMBERS_1_6.toString ( ) ) .toString ( ) .toString ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!interfaceOnly) { additionalProperties.remove(INTERFACE_ONLY); }"
    },
    "Bears-249": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dep = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dep = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dep = new Clock (otsMap ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dep = new Clock (otsBox ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dep = new Clock ( message ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dep = new ClockChar (ots ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dep = new Clock (ots.depBuilder ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dep = new Clock (ots.depinalType ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dep = new Clock (ots.depUnknownMap ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.depServ = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dep = new Clock. Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dep = new Clock.commitDepBox (ots ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dep = new ClockBox. Clock (otsMap ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.depecom = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dep = new Clock (otsUnknownMap ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.depghij = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dep = new Clock (ots.depGuess ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.depServ = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.depSCHED = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dep = new Clock.\uc380DepBox (ots ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dep = new Clock. party (ots ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.depSCHED = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.depecom = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dep = new ClockBox. Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dep = new Clock.commitDepBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dep = new Clock (ots.depDeprecationBox ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dep = new Clockyperyper (ots ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dep = new Clock.\uc380DepBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.depsiblings = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dep = new Clock (ots<Dep> ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dep = new Clock (otsType ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dep = new ClockMethod (ots ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dep\u0652 = new Clock (otsMap ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dep = new Clock (ots.depValue ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dep = new Clock (otsUnknown ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dep\u2027 = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dep = new Clock.\u0391 (otsBox ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.depghij = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dep = new ClockBuilder (ots ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dep = new Clock (ots.depMap ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dep = new ClockCLASS (ots ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dep\u1ef7 = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dep = new Clock (ots.deppublic ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dep = new Clock (ots.depBuilder.depDepBox ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dep = new Clock (ots.depType ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dep<>( = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dep = new ClockIterator (ots ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dep<>( = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dep\u1ef7 = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dep\u0652 = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dep = new Clock (ots.depUnknownUnknownMap ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dep\u0652 = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dep\u8f9b = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dep = new Clock (otsBoxMap ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dep\uc2b0 = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dep vc = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.depsiblings = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dep = new ClockSet (ots ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dep = new Clock (ots<Dep ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dep = new Clock (ots.depUnknownType ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dep = new Clock (ots.depDeputeBox ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dep = new ClockloadDeprecationBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dep = new Clock (otsValue ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dep2}) = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dep = new ClockFactory (ots ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dep evidence = new Clock (ots ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dep = new Clock.\u0391 (ots ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dep = new ClockChar (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dep = new Clock (otsuteBox ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dep = new Clock (ots.depDefined ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dep\uc2b0 = new Clock (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dep = new ClockTryDeprecationBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.depServ = new Clock (otsMap ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dep = new Clock (ots.depBuilder.dep ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dep2}) = new Clock (otsMap ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dep = new ClockConvention (ots ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dep = new Clock (otsNames ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.depghij = new Clock (otsMap ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dep = new Clock<Dep>\" ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dep = new ClockBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dep\u0652 = new Clock (otsBox ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dep = new Clock (otsId ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dep = new Clock.\uc380 (ots ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dep = new Clock (ots.0 ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dep = new Clock (ots.depDep.dep ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dep = new Clock (ots.depDepBox ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dep = new Clock (otsBox.depDeprecationBox ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dep = new Clock. party.depDepBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dep = new Clock (ots.3 ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dep = new ClockTryDeprecationBox (ots ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dep = new Clock. party.depDepBox (ots ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dep = new Clock (ots.depUnknownUnknown ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dep = new Clock (ots.depDep ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dep = new Clock (otsMap.depDeprecationBox ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dep = new ClockCLASS (ots.dep ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dep = new Clock (ots.depUnknown ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dep = new Clock (ots.depZero ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dep = new Clock (ots.depDep>\" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dep = new ClockyperDeprecationBox (otsMap ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dep = new ClockBuilder ( message ) ;",
                "identical": false
            }
        ],
        "buggy_line": "this.dep = new Clock<>(commitDepBox.dep);",
        "fixed_line": "if (commitDepBox.dep != null) { this.dep = new Clock<>(commitDepBox.dep); } else { this.dep = null; }"
    },
    "Bears-100": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean ign, position = Collections.getBoolean ( position.getBoolean ( ) , result ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean ignition = ( !ition.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean ignEvent = ( !ition.getBoolean ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean ign, position = Collections.getBoolean ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean ign, position = Collections.getBoolean ( position ) , result.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBooleanPosition ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean ignEvent = ( !ition.getBoolean ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean ignition = position.getition ( position ) , result.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) , result ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean ignition = position.getBoolean ( array.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean ign, position = Collections.getBoolean ( position ) , result.getBoolean ( ) , true ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , relativePosition.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBooleanPosition ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean ignition = position.getBoolean ( array.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , value.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) ) ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean ignition = position.getBoolean ( calendar.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean ignition = ( !ition.getition = position.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean ignition = position.getition ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean ignition = position.getBoolean ( super.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean ignition = position.getBoolean (Buffer.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean ignition = ( !ition.getition ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean ignition = ( !itionSet.getBoolean ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean ignition = position.getBoolean ( result ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean ignition = position.getBoolean (Result ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean ignition = position.getBoolean (volume.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) ) ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean ignition = ( !itionSet.getBoolean ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean ign, position = Collections.getBoolean ( position ) , result.getBoolean ( ) , false ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean ignition = position.getBoolean ( position.getBoolean ( ) , result ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) , true ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) , false ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean ignition = position.getBoolean ( parent.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean ignition = ( !ition = position.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean ignition = relativePosition.getition ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean ignition = position.getition ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean ignition = position.getBoolean (volume.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean ignition = position.getBoolean ( collection.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean ignition = relativePosition.getition ( position ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean ignition = position.getBoolean ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean ignition = position.getBoolean ( result ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean ign, position = Collections.getBoolean ( position.getBoolean ( ) , true ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean ignition = position.getBoolean ( collection.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean ignition = position.getBoolean ( array.getBoolean ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean ignition = position.getBoolean (Result ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean ignition = ( !ition.getition ( position ) , result.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean ignition = relativePosition.getBoolean ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean ignEvent = ( !ition.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean ignition = position.getition ( result ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean ignition = position.getBoolean ( position ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) , true ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean ignition = ( !ition.get ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean ignition = position.getBoolean ( 3, position.getBoolean ( ) , result ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , result.getBoolean ( ) ) , false ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBoolean ( ) , true ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean ignition = position.getition ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean ignition = position.getBoolean ( super.getBoolean ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean ignition = position.getition ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean ignition = position.getBoolean (XY.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean ignition = position.getBoolean ( iText.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean ignition = position.getBoolean ( parent.getBoolean ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean ignition = position.getBoolean ( position ) , relativePosition.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean ign, position = Collections.getBoolean ( array.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean ignition = position.getBoolean ( relativePosition.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) , false ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean ignition = position.getBoolean ( super.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean ignition = position.getBoolean (volume.getBoolean ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean ignition = relativePosition ( position.getBoolean ( ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean ignition = position.getBoolean ( position ) , relativePosition.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean ignition = position.getition ( position ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBooleanPosition ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean ign, position = Collections.getBoolean ( collection.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean ignition = position.getition ( result ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean ignition = relativePosition.getBoolean ( position ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean ignition = position.getBoolean ( position.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean ign, position = Collections.getBoolean ( position.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean ignition = result.getition ( position ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean ignition = ( !ition.getBoolean ( ) , position.getBoolean ( ) , result ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean ignition = position.getBoolean ( calendar.getBoolean ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBooleanPosition ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean ignition = position.getBoolean ( collection.getBoolean ( ) , position.getBoolean ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean ignition = ( !ition.getBoolean ( position.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean ignition = position.getBoolean ( paint.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean ignition = position.getBoolean ( position ) , relativePosition.getBoolean ( ) , result ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean ignition = position.getBoolean ( position ) , result.getBoolean ( ) , false ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean ignition = ( !ition.getBoolean ( position ) , position.getBoolean ( ) ) , false ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean ignition = position.getBoolean ( parent.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean ignition = position.getBoolean ( position ) , text.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean ignition = position.getBoolean ( font.getBoolean ( ) , position ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean ignition = ( !ition.getBoolean ( ) , position.getBoolean ( ) ) ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean ignition = result.getition ( position ) , position.getBoolean ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean ignition = position.getBoolean (Buffer.getBoolean ( ) , result ) ;",
                "identical": false
            }
        ],
        "buggy_line": "boolean ignition = position.getBoolean(Position.KEY_IGNITION); boolean oldIgnition = false; Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null) { oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); } if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
        "fixed_line": "if (position.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean ignition = position.getBoolean(Position.KEY_IGNITION); Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null && lastPosition.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId())); } }"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setPosition ( type + i, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], 16 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], i ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setPosition ( i + Short.parseShort ( data, Short.parseShort ( index[index], 16 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setPosition ( start + i, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setPosition ( i + Short.timeShort ( data[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setPosition ( i + Short.parseShort ( index, Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setPosition ( i + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setPosition ( i + Short.position, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set ( index + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition ( type + i, Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index ) ) * 16;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setPosition ( i + Short.position, i[index], Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index++ ) - 16 ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setPosition ( start + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setPosition ( type + i, Short.parseShort ( index[index], data[index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setPosition ( i + Short.parseShort ( data, Short.parseShort ( index[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setPosition ( type + i, Short.parseShort ( index[index], data ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], position++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setPosition ( i + Short.parseShort ( data, i[index], 16 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], 2 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setPosition ( i + Short.position, i[index], Short.parseShort ( data[index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setPosition ( type + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index ) * 16 ) * 16;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setPosition ( mid + i, Short.parseShort ( index[index], data ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setPosition ( type + i, Short.parseShort ( data[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setPosition ( i + Short.timeShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setPosition ( mid + i, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setPosition ( i + Short.timeShort ( data[index], Short.parseShort ( index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setPosition ( i + i, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index ) ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setPosition ( index + Short.parseShort ( i, Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], position ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setPosition ( i + Short.key, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setPosition ( start + i, Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], 0 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setPosition ( i + Short.bShort ( data[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setPosition ( i + Short.parseShort ( Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setPosition ( i + Short.INShort ( data[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setPosition ( i + Short.parseShort ( index, Short.parseShort ( data[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setPosition ( index + i, Short.parseShort ( area[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setPosition ( mid + i, Short.parseShort ( data[index], index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], min ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setPosition ( start + i, Short.parseShort ( index[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index[index], 16 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setPosition ( type + i, Short.parseShort ( index[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setPosition ( type + i, Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setPosition ( i + Short.parseShort ( index, Short.parseShort ( data[index], i ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setPosition ( index + i, Short.parseShort ( index[index], data ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setPosition ( start + i, Short.parseShort ( index[index], data ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setPosition ( i + Short.position, i[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index++ ) ) * 16;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set ( type + i, Short.parseShort ( index[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setPosition ( i + Short.parseShort ( index, Short.parseShort ( data[index], position ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setPosition ( type + i, Short.parseShort ( index[index], 16 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], 0.0 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setPosition ( type + i, Short.parseShort ( data[index], i ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setPosition ( index + i, Short.0[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setPosition ( type + i, Short.parseShort ( index[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index++ ) instanceof 16 ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set ( type + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set ( start + i, Short.parseShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setPosition ( type + i, Short.parseShort ( index[index], 0.0 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index++ ) << 16 ) * 0.0 ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setPosition ( maxStack + i, Short.parseShort ( index[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setPosition ( i + Short.parseShort ( index, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setPosition ( i + Short.INShort ( data[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setPosition ( position + i, Short.parseShort ( index[index], data ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.setPosition ( index + i, Short.parseShort ( data[index], ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( position ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index++ ) - 16 ) * 16;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setPosition ( index + i, Short.parseShort ( area[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( value ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setPosition ( position + i, Short.parseShort ( index[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setPosition ( i + Short.1, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( data[index], position ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition ( i + Short.visitShort ( data[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set ( start + i, Short.parseShort ( index[index], Short.index ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setPosition ( i + Short.timeShort ( Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setPosition ( getItemCount + i, Short.parseShort ( index[index], data ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setPosition ( index + i, Short.parseShort ( area[index], 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setPosition ( start + i, Short.parseShort ( index[index], 0.0 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setPosition ( i + Short.parseShort ( data[index], Short.parseShort ( index ) - 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setPosition ( i + Short.position, i[index], Short.parseShort ( data[index + i] ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set ( type + i, Short.parseShort ( data[index], index++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setPosition ( i + Short.position, i[index], Short.parseShort ( data[index + 1 ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setPosition ( index + Short.parseShort ( data[index], i++ ) * 16 ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setPosition ( i + Short. getScreenShort ( data[index], Short.parseShort ( index ) * 16 ) ;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-235": {
        "fixes": [
            {
                "k": 1,
                "patch": "account>\">\" = wrappedIterator.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "account>\">\" = wrapped.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accounttrahend>\">\" = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ">\">\">\" = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "account>\">\" = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ">\">\">\" = wrappedIterator.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accounttrahair = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "account accounted = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "account>\">\" = wrappedId.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accounttrahend>\" = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ">\">\">\" = wrapped.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ">\">\" = Optional.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "account account ( wrappedIterator ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "account account ( false ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "account account ( handler ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "account ( wrappedIterator.findId ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "account>\">\" = Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "account account ( wrappedIterator.findId ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "account account ( DAYS.findId ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "account account ( EMPTY_ARRAY.findId ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "account account ( handler.findId ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "account account ( wrapped.findId ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "account ( wrappedId.find ( wrappedId ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accounttrahend>\">\" = Optional.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( bean ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "account ( wrappedIterator.findId ( wrappedId ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ">\">\">\" = Optional.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "account account ( DAYS.find ( wrappedId ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "account account ( wrappedIterator.find ( wrappedId ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "account>\">\" = Optional Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "account ( wrapped.findId ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "account\", wrappedId.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accounttrahend>\">\" = Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( handler ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "account>\">\" = wrappedIterator.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ">\">\">\" = Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "account ( wrappedIterator.findId ( wrapped ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accounttrahend>\">\" = Optional.find ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "account ( wrappedId.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accounttrahend>\">\" = Optional.findId ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "account ( wrapped.find ( wrappedId ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "account>\">\" = Optional.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "account>\">\" = wrappedIterator.find ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "account\", wrapped.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "account accounted = Optional.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accounttrahend>\">\" = Optional.find ( wrappedById ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "account account ( old.findId ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "account>\">\" = wrappedIterator.find ( bean ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "account ( wrappedIterator.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "account ( wrappedIterator.findId ( bean ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "account account ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "account ( wrappedIterator.find ( bean ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accounttrahend>\" = Optional.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "account\", wrapped.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "account accounted = Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accounttrahend>\">\" = Optional.setId ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ( handler ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "account ( wrappedIterator.findId ( bean ) ) .setId ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accounttrahair = Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ">\">\" = Optional.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "account account ( wrappedIterator.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accounttrahend>\">\" = Optional.set ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accounttrahend>\">\" = Optional.find ( wrappedIterator ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( FIELD ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "account account ( list.findId ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( exceptions ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( proto ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accounttrahend>\">\" = Optional.find ( wrappedId.findId ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "account>\">\" = wrappedIterator.find ( wrappedIterator ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "account account ( DAYS.find ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "account ( wrappedIterator.find ( wrapped ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "account>\">\" = wrapped.find ( bean ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( cls ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "account>\">\" = wrapped.findId ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ( cls ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "account account ( DAYS ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( fields ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( this ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ( FIELD ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "account>\">\" = wrappedId.find ( wrappedIterator ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId (Tree ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "account>\">\" = wrapped.find ( wrappedIterator ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ( fields ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId (Tree ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "account ( wrappedIterator.find ( bean ) ) .setId ( exceptions ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "account ( wrappedId.find ( wrappedId ) ) .setId ( bean ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId (By ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( null ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ">\">\" = Optional.set ( wrappedId ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "account ( wrappedIterator.find ( wrappedId ) ) .setId ( cache ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "account>\">\" = wrappedIterator.find ( proto ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "account\", wrapped.findId ( wrapped ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "account ( wrappedId.find ( wrapped ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (hasAnyChildrenAccountEnabled(account)){ throw new IllegalStateException(\"Children accounts enabled\"); } account.setDisabled(true); accountRepository.save(account); } private boolean hasAnyChildrenAccountEnabled(Account account){ return account.getChildren().stream() .filter(a -> !a.isDisabled()) .findAny() .isPresent(); }"
    },
    "Bears-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( format != null ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( tz == null ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( tz != null ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( format == null ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if ( tz.propertyFormat == null ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( tz.propertyFormat != null ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( tz == null ) { return ( tz != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( tz != null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( tz == null ) { return ( format != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( formatStr == null ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( tz == null ) { return ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( formatStr != null ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if ( tz == null ) { return ( format != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( tz != null ) { format = ( tz == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( tz != null ) { return ( tz != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( tz == null ) { format = ( tz == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( tz != null ) { return ( format != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( format != null ) { return ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( format != null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( tz != null ) { format = ( tz != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( tz.propertyDateFormat == null ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( tz != null ) { return ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( tz != null ) { return ( format != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( tz == null ) { return ( tz != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if ( tz == null ) { return ( id != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if ( tz == null ) { return ( format == null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( tz == null ) { format = ( tz == null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if ( tz != null ) { format = ( tz == null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( tz == null ) { return ( id != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if ( tz.propertyDateFormat != null ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( format != null ) { return ( tz != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( tz != null ) { format = ( tz != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if ( tz == null ) { return ( format == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( format != null ) { return ( tz != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( tz != null ) { return ( format == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( propertyFormat != null ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( tz != null ) { return ( format == null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( tz != null ) { return ( tz != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( tz.propertyFormat ( ) == null ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( tz == null ) { return ( format != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( tz == null ) { if ( tz != null ) ? JsonFormat..Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( tz == null ) { if ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if ( tz != null ) { return ( format != null ) ? format.getFormat ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( tz.propertyFormat != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if ( tz.propertyFormat ( ) == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( tz == null ) { if ( format != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( tz.propertyFormat ( format == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( tz.propertyFormat == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( propertyFormat == null ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( tz == null ) { return ( format != null ) ? JsonFormat.Value ( ) == null : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( _propertyFormat == null ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( tz.propertyFormat ( format != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( type != null ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if ( _propertyFormat != null ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( tz == null ) { return ( format != null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( tz.getDateFormat ( ) == null ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( tz == null ) { return ( tz != null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( ( format != null ) ? this.propertyFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( new SimpleDateFormat ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( tz.getDateFormat ( ) != null ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( tz.propertyFormat ( ) != null ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if ( tz == null ) { return ( format == null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( ( tz != null ) && format.getFormat ( ) != JsonFormat.Value ( ) ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( this != null ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.getFormat ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? format.getFormat ( ) : format.format ( ) ) ; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? format.getFormat ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( ( format != null ) || format.getFormat ( ) != JsonFormat.Value ( ) ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( ( tz != null ) || format.getFormat ( ) != JsonFormat.Value ( ) ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( tz != null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( new SimpleDateFormat ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( 0.getDateFormat ( ) == null ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( tz != null ) { return ( format != null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( tz == null ) { format = ( tz == null ) ? JsonFormat.Value ( ) : format.format ( ) ) ; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( tz != null ) { return ( format == null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( ( tz != null ) || format.getFormat ( ) != JsonFormat.Value ( ) && format != null ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.getDateFormat ( ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( ( format != null ) || format.setFormat ( ) != JsonFormat.Value ( ) && format != null ) ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( tz == null ) { return ( format != null ) ? JsonFormat.Value ( ) : format.format ( new SimpleDateFormat ( ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( tz == null ) { format = ( tz == null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( ( format != null ) || format.setFormat ( ) != JsonFormat.Value ( ) ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.getLocale ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( ( format != null ) ? JsonFormat.Value ( ) : format.format ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( ) ;}",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( ( format != null ) ? JsonFormat.Value ( ) : format.getFormat ( ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( tz == null ) { return ( tz != null ) ? format.getFormat ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format (Border, ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( tz != null ) { return ( tz != null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( ( format != null ) && format.getFormat ( ) != JsonFormat.Value ( ) ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( tz != null ) { format = ( tz != null ) ? JsonFormat..Value ( ) : format ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat.Value ( ) : format.format ( new SimpleFormat, tz ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( ( format != null ) || format.getFormat ( ) != JsonFormat.Value ( ) && format != null ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( tz == null ) { format = ( tz != null ) ? JsonFormat..Value ( ) : format.format ( new SimpleDateFormat ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "if (property != null) { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format != null) { // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this;",
        "fixed_line": "if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. // First: custom pattern will override things if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } // Otherwise, need one of these changes: final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); // Jackson's own `StdDateFormat` is quite easy to deal with... if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } // 08-Jun-2017, tatu: Unfortunately there's no generally usable // mechanism for changing `DateFormat` instances (or even clone()ing) // So: require it be `SimpleDateFormat`; can't config other types if (!(df0 instanceof SimpleDateFormat)) { // serializers.reportBadDefinition(handledType(), String.format( serializers.reportMappingProblem( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { // Ugh. No way to change `Locale`, create copy; must re-crete completely: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df);"
    },
    "Bears-160": {
        "fixes": [
            {
                "k": 1,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS_CALL ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if ( Frame.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canOverride ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "MONTH ( String.canCOLUMN ( ) ) ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreate ( ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreateToken ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canList ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if ( trimmed.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canATIVE ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( unreadToken.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canSION ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can_CALL ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if ( unreadToken.canedToken ( ) ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if ( command.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canIVE_CALL ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can categoryToken ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can provider ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if ( Frame.canCOLUMN ( ) ) ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canAND_PART_STATE ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canEDDED_OBJECTLIT ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if ( result.canedToken ( ) ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.cancharno ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreateUsingDefault ( ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "MONTH ( String.canCOLUMN ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canSet ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canForward ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCEDEN ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if ( JsDocToken.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canOverride ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canMember ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canTER ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canSort ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canoned ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreateUsing ( ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can normal ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.cantagName ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( taintsUnknown.canedToken ( ) ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if ( result.canCOLUMN ( ) ) ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canINT ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if ( pn.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canient ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if ( result.canedToken ( ) ) ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can relatedType ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canDigit ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ( result.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canAND_PART_BOTH ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canConvert ( ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canbindings ( ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canMENT ( ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can identical ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.cancharno ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCEDENCE ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canRead ( ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreate ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCEDEN ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canList ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canEqualsValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canbindings ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canessor ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canType ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreateUsingDelegate ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCollapse ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canPRECATED ( ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if ( JsDocToken.canedToken ( ) ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "multiplierNonZeroOddNumber ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can followed ( ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canAnonymous ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (999.canedToken ( ) ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canFn ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canPrinter ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canEDDED_ARRAYS ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.cancharno ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can categoryToken ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canHierarchy ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can encode ( ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canEDDED_TYPE ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canEqualsValue ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can_1_ ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.cancharno ( ) ) ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canDigit ( ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreateToken ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canImmutable ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canAND_PART_Ago ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if ( denom.canCOLUMN ( ) ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canSIDE ( ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreateFrom ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (999.canedToken ( ) ) ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canPRECISION ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTSUNDAY ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can_CALL ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canForward ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canED ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if ( taintsUnknown.canedToken ( ) ) ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can normal ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canSION ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can objectType ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.canCreate ( ) ) ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can} ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "multiplierNonZeroOddNumber ( NO_SIDE_EFFECTS.can objectType ( ) ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "tokens.canConsume(\"RESTRICT\");"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent ( provides ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent ( copy ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent ( urls ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent ( population ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent ( All ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent ( provides ( 0 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent (getClass ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponent ( getArgument ( 0 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponent (getString ( ) ) .GraphicsValues ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponent ( getArgument ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent ( methods.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent ( marker ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponent ( Pageometer ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent ( RenderingHints ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponent ( population ( ) ) .getGraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponent ( provides ( 1 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent (\u0549 ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent ( dataArea ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponent (TYPES ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponent (txt ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponent (xD ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponent ( DriverManager ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponent ( provides ( ) ) .getGraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponent (\u7370 ( 0 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponent ( provides ( ) ) .getGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponent (getString ( ) ) .GraphicsGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponent (\u7370 ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponent ( providesNode ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent (Gate ( 0 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent (459 ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponent ( population ( ) ) .getGraphicsValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent ( provides ( -1 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent (459.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent ( provides ( ) ) .getGraphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponent ( area.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponent (\u0a13 ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent (PROXY.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponent (getString ( ) ) .GraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent (Gate ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent ( copy ( ) ) .getGraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponent ( copy ( ) ) .GraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponent ( crashed ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponent ( All ( ) ) .getGraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent (getClass ( ) ) .getGraphicsValues ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent (pow ( 0 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent ( copy ( ) ) .Graphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponent (Spacing ( 0 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponent (getClass ( ) ) .getGraphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent ( getArgument ( 1 ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent (getString ( ) ) .Graphics ( ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent ( getCurrent ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent (ptions ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponent (\u084d ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponent (\u16c3 ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponent ( copy ( ) ) .Graphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponent ( predicates ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponent (Spacing ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponent (getApplication ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent (xD ( ) ) .GraphicsValues ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponent ( break ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent ( onAnimation.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent (em ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent ( RenderingHints.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent (Clear ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponent (taken.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent ( TreeSet ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent (getString ( ) ) .Graphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent ((\"[ ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent ( copy ( ) ) .getGraphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent ( sampleStats.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent ( Make ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponent ( provides ( 0 ) ) .Graphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponent (xD ( ) ) .getGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent (Data ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponent ( copy ( ) ) .GraphicsValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent ( hm.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent ( getCurrent ( ) ) .Graphics ( 1 ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponent (ecom.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponent ( copy ( ) ) .Graphics ( ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponent (getClass ( ) ) .getGraphics ( -1 ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponent ( copy ( ) ) .Graphics ( 1 ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponent ( provides ( ) ) .getGraphics ( -1 ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent ( update.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponent ( All ( ) ) .getGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent (txt ( ) ) .getGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponent (getClass ( ) ) .getGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent (getClass ( ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent (pow ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent ( marker.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent (txt.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent (\u5408ed.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent ( DriverManager ( ) ) .getGraphics ( ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent (TYPES.getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent ( foreground ( ) ) .getGraphics ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponent ( population ( ) ) .getGraphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent (xD ( ) ) .Graphics ( ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponent (TYPES ( ) ) .getGraphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent ( datesometer ( ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent (xD ( ) ) .Graphics ( 0 ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent (\u0a13.getGraphics ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-222": {
        "fixes": [
            {
                "k": 1,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "List<E> e = E> ( other.get ( j ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "List<E> e = adjAdj.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "List<E> e = E> ( j.get ( other ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "List<E> e = E> ( n.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "List<E> e = E> ( k.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "List<E> e = other.get ( i ) .get ( j ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other.get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "List<E> ( other.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / i;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "List<E> e = E> ( n.get ( i ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / i;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other ) / i ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other ) / j ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / other.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "List<E> e = E> ( k.get ( i ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "List<E> e = other.get ( i ) .get ( j ) <= k.get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "List<E> e = E> ( n.get ( i ) .get ( j ) / other.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) / i;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) <= k.get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / j;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "List<E> e = n.get ( i ) .get ( other.get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "List<E> e = E> ( other.get ( j ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other.get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( other.get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "List<E> e = E> ( n.get ( i ) .get ( j ) / other.get ( j ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "List<E> e = ( ( other.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "List<E> e = E> ( k.get ( i ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "List<E> e = n.get ( i ) .get ( other.get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "List<E> e = E> ( k.get ( j ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / j;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) / other.get ( j ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "List<E> e = E> ( k.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "List<E> e = adjAdj.get ( j ) .get ( i ) / 2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "List<E> e = n.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "List<E> e = E> ( j.get ( other ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "List<E> e = E> ( j.get ( other ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "List<E> e = adjAdj.get ( i ) .get ( other.get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( v ) / 2;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "List<E> e = adjAdj.get ( i ) .get ( j ) / i;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "List<E> e = E> ( k.get ( i ) .get ( j ) / other.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) <= k.get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / i.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / other.get ( j ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "List<E> e = k.get ( adjAdj ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / other.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( other.get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( other.get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "List<E> e = E> ( j.get ( other ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "List<E> e = k.get ( i ) .get ( other.get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) / other.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "List<E> e = E> ( other.get ( j ) .get ( i ) / j ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( v ) / i ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "List<E> e = E> ( n.get ( i ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "List<E> e = ( ( other.get ( i ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / delta;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / other.get ( j ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "List<E> e = adjAdj.get ( other ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) / 1 ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "List<E> ( other.get ( i ) .get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) / j;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other.get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / other.get ( j ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "List<E> e = E> ( n.get ( i ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "List<E> e = this.get ( j ) .get ( other.get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) ) / 2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "List<E> e = E> ( other.get ( i ) .get ( j ) / n ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( v ) / j ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / i.get ( j ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "List<E> e = i.get ( adjAdj ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "List<E> e = adjAdj.get ( i ) .get ( j ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other ) / 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "List<E> e = k.get ( i ) .get ( other.get ( j ) / j ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "List<E> e = adjAdj.get ( j ) .get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "List<E> e = other.get ( i ) .get ( j ) / delta;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) ) / 2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( j ) / 1 ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "List<E> e = E> ( n.get ( j ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "List<E> e = other.get ( i ) .get ( j ) ) / 2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "List<E> e = E> ( other.get ( j ) .get ( j ) / 2 ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "List<E> other = i.get ( adjAdj ) .get ( j ) / other.get ( j ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( other.get ( i ) / j ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "List<E> e = E> ( j.get ( k ) .get ( j ) / i ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "List<E> e = n.get ( i ) .get ( other.get ( j ) / 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "List<E> e = E> ( j.get ( i ) .get ( r ) / i ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "List<E> e = ( ( n.get ( i ) .get ( j ) / i ) ;",
                "identical": false
            }
        ],
        "buggy_line": "List<E> viAdj = adj.get(i); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { V v = ring.get(i); E e = adj.get(i).get(r);",
        "fixed_line": "List<E> viAdj = adj.get(vi); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { if (rng.nextDouble() < p) { V v = ring.get(i); E e = adj.get(v).get(r);"
    },
    "Bears-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Classes ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "mask ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "== ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( o.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Classes ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "mask ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "derivative ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Referenced ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "overwritten ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WRITE ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "overwritten ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "mask ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "mask ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( o.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( ( ( _referencedType ) ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Classes ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "overwritten ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) && o.getReferencedType ( ) .equals ( DoType ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "derivative ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( o.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "// ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| ( _referencedType == null ) return ( _referencedType.getClass ( ) == getClass ( ) ) .equals ( _referencedType ) && o.getReferencedType ( ) .equals ( DoType ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( o.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals (NaN ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( o.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( ( char ) _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Classes ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Classes ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) && o.getReferencedType ( ) .equals ( DoType ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( ( _referencedType ) .equals ( _referencedType ) ) && o.getReferencedType ( ) .equals ( DoType ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( char ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( char ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( ( _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "\",\", match, ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( ( _referencedType ) .equals ( _referencedType ) ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( char ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "mask ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "getName ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "mask ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( other.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "// ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( other.getReferencedType ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( o.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.equals ( _referencedType ) .equals ( _referencedType ) ) && o.getReferencedType ( ) .equals ( _referencedType ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "derivative ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( type ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Do ( _referencedType == null ) return ( _referencedType == null ) && ( o.getClass ( ) == _referencedType ) .equals ( other ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Do ( _referencedType == null ) return ( _referencedType == null ) && ( _referencedType.getClass ( ) == _referencedType ) .equals ( _referencedType.getReferencedType ( ) ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "// Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
        "fixed_line": "if (o.getClass() == getClass()) { // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since // there is likely to be a cycle... // but... true or false? return false; /* // Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); */ } return false;"
    },
    "Bears-223": {
        "fixes": [
            {
                "k": 1,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getNativeTypeResolver ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.map ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getNativeTypeResolverBuilder ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getNativeTypeResolver ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getNativeTypeResolver ( ) .isInterface ( ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) && ( Match.class.isInterface ( ) ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getNativeType ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isOptionalClass ( ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.map ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( dest.class, this.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.map ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( dest.class, this.map.class ) && ( Match.class.isInterface ( ) ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isTypedValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "importedAboutArgList = valueType.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.map ) ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.class ) && ( Match.class.isInterface ( ) ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.map ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.internalType ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) && ( Match.class.isInterface ( ) ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "imported. import io ( _mapType.av.map.class ) && ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) && ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "imported. import io ( dest.class.initialType ( ) ) .unionValue ( ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) && ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isStackSize ( ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( MatchType ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) && ( Match.class.getRawClass ( ) .isRequired ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isOptionalClass ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.internalType ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.map.class, this.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isSet ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isRawClass ( ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( MatchType ) ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "imported. import io ( dest.class.initialType ( ) ) .unionValue ( ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "importedAboutArgList = property.createFromValue ( this.map.map ) && ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isInterface ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) && ( Match.class.isInterface ( ) ) .isRequired ( ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, func.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "importedAboutArgList = valueType.createFromValue ( this.map.map ) || ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.internalType ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( MatchType ) ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) && ( Match.class.isInterface ( ) ) .isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.map ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isSET ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, context.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .equals ( Match.class ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.mapType ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( source.class, this.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isTypedValue ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "importedAboutArgList = dest.createFromValue ( this.map.map ) && ( Match.class.isInterface ( ) ) && ( Match.class.isAssignableFrom ( Match.class ) ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "importedAboutArgList = Type.STRING.createFromValue ( this.map.class, source.map.class ) || ( Match.class.isInterface ( ) ) && ( Match.class.getRawClass ( ) .isAssignableFrom ( MatchType ) ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "import io.vavr.Value; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; /** * @author jstuecker * * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }",
        "fixed_line": "import io.vavr.Value; /** * @author jstuecker * <p> * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { if (context == null || context.getSource() == null) { return null; } final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expressionType(?:F20 ( id ) rss.id ( ) +\" ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( 6 ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.substring ( 1 ) \" ) .toString ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( 6 ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expressionType(?:F20 ( id ) rss.id ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .x\" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfHour ( ) +\" ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( WRITE_QUARTERS ) .append ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) +\" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) +\" ) .toString ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( WRITE_QUARTERS ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .append ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( 6 ) .doubleValue ( ) +\" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .x\" ) .doubleValue ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" )",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(?:Finding20 ( \"SC\" ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expressionOutOfBounds(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfHour ( ) +\" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(?:Finding20 ( \">\" ) .append ( id ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) +\" ) .toString ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .append ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS ( ) +\" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS[i] ) .numberOfMinute ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .substring ( 1 ) \" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .append ( \" +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOf ( ) \" ) .x\" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) +\" )",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS )",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFA\" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfT ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression call(?:F20 ( \"SC\" ) ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS[i] ) .numberOfMinute ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expressionType(?:F20 ( \">\" ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfT' ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.substring ( 1 ) \" ) .toString ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOf ( ) \" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expressionType(?:F20 ( id ) rss.id ( ) +\" ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfDot ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS[i] ) .numberOfMinute ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .x\" ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .x\" ) .toString ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOf ( ) +\" ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expressionType(?:F20 ( id ) rss.id ( ) +\" ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) +\" ) .toString ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfDot ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expressionType(?:F20 ( \">\" ) .append ( id ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( WRITE_QUARTERS ) .append ( \"\\' ) \" ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfHour ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS ( ) +\" ) .numberOfDot\" ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfDot ) .append ( \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOf ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .toString ( ) + \" ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOf ( ) \" ) .x\" ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .numberOfDot ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(?:Finding20 ( \">\" ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) +\" )",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( 6 ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) ) .append ( id ) .append ( \"' ) \" ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .intern ( ) +\" ) .toString ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS )",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .intern ( ) ,",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .x\" ) .toString ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOf ( ) +\" ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS.numberOfHour ( ) +\" ) .append ( \"numberOfT' ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(?:F20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ) .intern ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( '-' ) \" ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfDot ) .append ( \"numberOfT' ) \" ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) .append ( id ) .append ( WRITE_QUARTERS )",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression FetchTypeF20 ( \"SC\" ) +\" ) .append ( id ) .append ( WRITE_QUARTERS.numberOfFEB ) .append ( \"numberOfDot\" ) .intern ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( WRITE_QUARTERS ( ) \" ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(?:Finding20 ( \"SC\" ) ) .append ( id ) .append ( '/' ) .append ( getDenominator ( ) +\" ) .doubleValue ( ) : \" ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\") // iccid"
    },
    "Bears-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 && i != -1 ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 && i != -1 ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 && i != -1 ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (deviceState.getMotion ( ) != null && startPositionIndex == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (deviceState.getMotion ( ) == null && startPositionIndex == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( triplet.getMotion ( ) != null && result == -1 && triplet != -1 && i.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( triState.getMotion ( ) == null && startPositionIndex == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( triplet.getMotion ( ) == null && startPositionIndex == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (deviceState.getMotion ( ) == null && startPositionIndex == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if ( triplet.getMotion ( ) == null && result == -1 && triplet != -1 && i.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( triplet.getMotion ( ) != null && startPositionState == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (deviceState.getMotion ( ) != null && startPositionIndex == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (deviceState.getMotion ( ) != null && triplet == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( triState.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if ( triState.getMotion ( ) != null && startPositionIndex == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (deviceState.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ? -1 : i;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( triplet.getMotion ( ) != null && result == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (deviceState.getMotion ( ) != null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( triplet.getMotion ( ) != null && startPositionIndex == -1 && triplet != -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if ( triState.getMotion ( ) == null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (deviceState.getMotion ( ) != null && tripletCount == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 && i == -1 ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet ( ) == -1 ? -1 : i.getMotion ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( triState.getMotion ( ) == null && startPositionIndex == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (deviceState.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( triState.getMotion ( ) != null && startPositionIndex == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 && i == -1 ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if ( triplet.getMotion ( ) != null && startPositionState == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( triplet.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 && i == -1 ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if ( triState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (deviceState.getMotion ( ) != null && result == null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( triState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( triState.getMotion ( ) == null && result == -1 && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( triplet.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( triplet.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( triState.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( triplet.getMotion ( ) == null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ? -1 : i;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( triState.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) != -1 ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (deviceState.getMotionIndex ( ) != null && triplet == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? 1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( triplet.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( triplet.getMotion ( ) != null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( triplet.getMotion ( ) == null && startPositionIndex == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getFieldIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( triState.getMotion ( ) != null && tripletCount == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( triplet.getMotion ( ) != null && startPositionIndex == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (deviceState.getMotion ( ) != null && startPositionState == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( triplet.getMotion ( ) != null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getFieldIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) != -1 ? -1 : i.getIndex ( ) ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) != -1 ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getMotion ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( triState.getMotion ( ) == null && result == -1 && triplet.getMotionIndex ( ) != -1 ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( triState.getMotion ( ) == null && result != null && tripletCount ( ) == 0 ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ? -1 : i;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (deviceState.getMotion ( ) == null && result != null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? 1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (deviceState.getMotion ( ) != null && triplet != -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (deviceState.getMotion ( ) != null && result == -1 && tripletCount != -1 ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (deviceState.getMotion ( ) != null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if ( triplet.getMotion ( ) != null && triplet == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( triplet.getMotion ( ) != null && triplet == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) != -1 ? -1 : i.getIndex ( ) ) ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getFlowIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( triplet.getMotionIndex ( ) != null && startPositionState == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( triplet.getMotion ( ) != null && result == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) != -1 ? -1 : i.getIndex ( ) ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getrelativePosition ( ) ) ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( triState.getMotion ( ) != null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) != -1 ? -1 : i.getIndex ( ) ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (deviceState.getMotion ( ) == null && result == -1 && triplet.getMotionIndex ( ) == -1 ? -1 : i;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -startIndex ? -1 : start ) ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( triplet.getMotionIndex ( ) != null && triplet == -1 && triplet != -1 ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( triState.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? 1 : i.getIndex ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (deviceState.getMotion ( ) == null && result == null && triplet.getIndex ( ) == -1 ? -1 : i.getMotion ( ) == -1 ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( triplet.getMotion ( ) == null && result == null && triplet.getMotionIndex ( ) == -1 ? -1 : i.getMotion ( ) ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (deviceState.getMotionPosition() != null && startEventIndex == -1 && trips != deviceState.getMotionState()) { startEventIndex = i; startNoEventIndex = -1; } if (trips == deviceState.getMotionState()) { if (startNoEventIndex == -1) { startNoEventIndex = i; } else if (deviceState.getMotionPosition() == null) { startNoEventIndex = -1; }",
        "fixed_line": "if (startEventIndex == -1 && (trips != deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips == deviceState.getMotionState() && event != null)) { startEventIndex = i; startNoEventIndex = -1; } else if (trips != deviceState.getMotionState() && startEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startEventIndex = -1; } if (startNoEventIndex == -1 && (trips == deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips != deviceState.getMotionState() && event != null)) { startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startNoEventIndex = -1;"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (Session.getPipeline ( ) .get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Context.class ) != null ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (Session.getPipeline ( ) .get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Session.getPipeline ( ) .Pipeline.get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Context.class ) == null ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Session.getPipeline ( ) .Pipeline.get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (survey.getPipeline ( ) .get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Session.getPipeline ( ) .ERR.get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Session.getPipeline ( ) .0( (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Session.getPipeline ( ) .ERR.get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (Session.getPipeline ( ) .Union (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (\u9d2c.getPipeline ( ) .get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (survey.getPipeline ( ) .get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Session.getPipeline ( ) .Union (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Session.getPipeline ( ) . JsonObjectDecoder ( ) .get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Session.getPipeline ( ) .0( (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (Session.getPipeline ( ) .getDecoder ( ) !=HttpRequest.class ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Session.getPipeline ( ) . JsonObjectDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (\u9d2c.getPipeline ( ) .get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Session.getPipeline ( ) . JsonObjectDecoder ( ) .get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( itemName.getPipeline ( ) .get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( extendedDecoder.class ) != null ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (Session.getPipeline ( ) .restrictDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class.getDecoder ( ) .class ) != null ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Session.getPipeline ( ) .instanceDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Class.class ) != null ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class.getDecoder ( ) .class ) == null ) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Authenticated.getPipeline ( ) .get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( CharacterDecoder.class ) != null ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Session.getPipeline ( ) .getDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Session.getPipeline ( ) .Pipeline (push.class ) != null ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Session.getPipeline ( ) .birth ( Context.class ) == null ) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Session.getPipeline ( ) .\u6830 ( Context.class ) != null ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Session.getPipeline ( ) .\u6830 ( Context.class ) == null ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Session.getPipeline ( ) .publicDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( CharacterDecoder.class ) == null ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( itemName.getPipeline ( ) .get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Session.getPipeline ( ) .push (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Session.getPipeline ( ) .birth ( Context.class ) != null ) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( extendedDecoder.class ) == null ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (ReadOnly.getPipeline ( ) .Pipeline.get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Session.getPipeline ( ) . newConfigDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Session.getPipeline ( ) .Pipeline (Union.class ) != null ) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Session.getPipeline ( ) .ERR ( Context.class ) == null ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Authenticated.getPipeline ( ) .get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Session.getPipeline ( ) .Pipeline (ially.class ) != null ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Session.getPipeline ( ) .Pipeline (asp.class ) != null ) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Session.getPipeline ( ) .get (HttpRequest.class ) != Context.class ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Context.class.getDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Session.getPipeline ( ) .ERR ( Context.class ) != null ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (())..getPipeline ( ) .Pipeline.get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (ReadOnly.getPipeline ( ) .Pipeline.get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Session.getPipeline ( ) . eatDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Session.getPipeline ( ) .Pipeline (ially.class ) == null ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Session.getPipeline ( ) .Pipeline (te.class ) != null ) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Session.getPipeline ( ) .Pipeline (push.class ) == null ) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (RowCount.getPipeline ( ) .Pipeline ( Context.class ) != null ) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( MULTI.class ) != null ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Session.getPipeline ( ) .Pipeline (NodeMap.class ) != null ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Session.getPipeline ( ) .Pipeline (RowCount.class ) != null ) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Session.getPipeline ( ) .push (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( hope.getPipeline ( ) .Pipeline ( Context.class ) != null ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (RowCount.getPipeline ( ) .Pipeline ( Context.class ) == null ) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class.get ( ) != null ) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( cgi.class ) != null ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (())..getPipeline ( ) .Pipeline.get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Class.class ) == null ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( getID.class ) != null ) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Session.get ( ) .Pipeline.get (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Authenticated.getPipeline ( ) .getDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Session.getPipeline ( ) . JsonObjectDecoder ( ) == null ) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Session.getPipeline ( ) .Pipeline (Authenticated.class ) != null ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (Session.getPipeline ( ) . 270 (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Session.getPipeline ( ) .instanceDecoder ( ) == null ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Session.getPipeline ( ) . newConfigDecoder ( ) == null ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Session.getPipeline ( ) .Pipeline (asp.class ) == null ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( INSTANCE.class ) != null ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if ( hope.getPipeline ( ) .Pipeline ( Context.class ) == null ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( cgi.class ) == null ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Context.class ) > Context.class ) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Session.getPipeline ( ) .Pipeline (Spacing.class ) != null ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Context.class.getDecoder ( ) == null ) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( MULTI.class ) == null ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Session.getPipeline ( ) .Pipeline.get (HttpRequest.class ) != Context.class ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Session.getPipeline ( ) .Series (HttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Session.getPipeline ( ) .Pipeline (NodeMap.class ) == null ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Session.get ( ) .Pipeline.get (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Session.getPipeline ( ) .Pipeline (UnHttpRequest.class ) != null ) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Session.getPipeline ( ) .Pipeline ( Context.class ) == null.class ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class ) == null ) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Session.getPipeline ( ) .publicDecoder ( ) == null ) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Session.getPipeline ( ) .Pipeline (Union.class ) == null ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class.getDecoder ( ) != null ) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Session.getPipeline ( ) .Pipeline.get (HttpRequest.class ) > Context.class ) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Session.getPipeline ( ) . 270 (HttpRequest.class.get ( ) != null ) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Session.getPipeline ( ) .restrictDecoder ( ) == null ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Session.getPipeline ( ) . getItemCount ( ) !=HttpRequest.class ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Session.getPipeline ( ) .Encoded (HttpRequest.class.get ( ) == null ) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Session.getPipeline ( ) .Pipeline.get (public ) != null ) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-224": {
        "fixes": [
            {
                "k": 1,
                "patch": "Object source = input;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Object source = target;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Object source = input.apply ( target == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Object source = ( input != null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Object source = ( input = target == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Object source = ( input == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Object source = p;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Object source = ( input = target == null ) ? p : operations.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Object source = input.apply ( target == null ) ? p : operations.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Object source = input.apply ( target == null ) ? p : operations.apply ( source ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Object source = ( input = target == null ) ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Object source = ( target == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Object source = ( input = target == null ) ? p : operations.apply ( source ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Object source = input. for ( ; target != null ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( (source ) p ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Object source = \" ( input = target == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Object source = input.apply ( target == null ) ? operations : source.apply ( target ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Object source = ( target == null ) ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Object source = \" ( input = target == null ) ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Object source = input.apply ( target != null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Object source = ( target == null ) ? p : operations.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Object source = input. for ( ; target == null; p = target.apply ( (OTTOM ) p.apply ( input ) == null ) ? p : target ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Object source = input.apply ( target == null ) ? p : operations.apply ( target ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Object source = ( input = target != null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Object source = ( input != null ) ? p : operations.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Object source = canRemove == null ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Object source = input. for ( ; target == null : p.apply ( ( target ) ) ) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( (OTTOM ) p.apply ( input ) == null ) ? p : target ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Object source = input.apply ( target == null ) ? operations : source.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Object source = \" ( input = target == null ) ? p : operations.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Object source = ( input == null ) ? p : operations.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Object source = input. for ( ; target == null : p.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Object source = input.format ( target ) : operations.apply ( target ) == null ? p : target ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Object source = input.apply ( target != null ) ? operations : source.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Object source = ( target == null ) ? p : operations.apply ( source ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Object source = input.apply ( target == null ) ? p : operations.apply ( target ) == null ? p : target ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Object source = ( p != null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Object source = input == null ? p : ( ( Object ) source.apply ( target ) ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( ( target ) != null ) ? source.apply ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Object source = input.apply ( target == null ) ? p : operations.apply ( input ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Object source = ( input != null ) ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Object source = source;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Object source = in.apply ( target == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Object source = \" ( p = target == null ) ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Object source = input. for ( ; target == null; p = p.apply ( (OTTOM ) p.apply ( input ) == null ) ? p : target ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Object source = input. for ( ; target == null; p = target.apply ( (OTTOM ) p ) ) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Object source = input == null ? p : ( ( Object ) p.apply ( target ) ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( ( target ) p ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Object source = input. for ( ; target == null; p = p.apply ( (OTTOM ) p ) ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Object source = input. for ( ; target == null; p = target.apply ( (OTTOM ) p.apply ( input ) == null ) ? source ( ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Object source = ( input != null ) ? p : operations.apply ( source ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Object source = ( input == null ) ? p : operations.apply ( ( target ) p ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( (OTTOM ) p ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( (OTTOM ) p ) ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) source ) .apply ( target ) == null ? p : target ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Object source = input. for ( ; target != null ? p : operations.apply ( (source ) p ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) source ) .apply ( target ) == null ? p : target.apply ( Reference ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Object source = ( p == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( (OTTOM ) p.apply ( input ) == null ) ? source ( ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( (source ) p ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Object source = input. for ( ; target == null ? p : source.apply ( (source ) p ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( ( target ) ) ) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Object source = input == null ? p : ( ( Object ) p.apply ( target ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Object source = \" ( p = target == null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Object source = input. for ( ; target == null; p = target.apply ( (OTTOM ) p.apply ( input ) == null ) ? source ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Object source = ( input = target == null ) ? p : operations.apply ( input ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) p ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( (source ) p ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( ( target ) != null ) ? p : ( ( long ) p.apply ( source ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Object source = input. for ( ; target == null ? p : source.apply ( (OTTOM ) p ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( (OTTOM ) p ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Object source = input. for ( ; target == null; p = p.apply ( (OTTOM ) p.apply ( input ) == null ) ? source ( ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Object source = ( target != null ) ? p : operations.apply ( target ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( ( input ) p ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Object source = input != null ? p : ( ( Object ) p.apply ( target ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) source ) .apply ( target ) == null ? p : ( ( Value ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Object source = input. for ( ; target == null; p = target.apply ( (source ) p ) ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Object source = \" ( input = target == null ) ? p : operations.apply ( source ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( (OTTOM ) p.apply ( input ) == null ) ? source ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Object source = ( input == null ) ? p : operations.apply ( source ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( ( source ) p ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Object source = input.apply ( target == null ) ? operations : source.apply ( p ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) source ) .apply ( target ) == null ? p.apply ( ( Value ) \" : target ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( ( target ) != null ) ? input = source.apply ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( ( target ) != null ) ? p : target ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( ( target ) != null ) ? p : ( ( long ) target ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Object source = input. for ( ; target == null ? p : operations.apply ( ( target ) ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) source ) .apply ( target ) == null ? p.apply ( ( Value ) \" : target ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Object source = \" ( p = target == null ) ? operations : target.apply ( ( Value ) p ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Object source = input.apply ( target == null ) ? \" ( p ) : source.apply ( ( Value ) p ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Object source = input.apply ( target != null ) ? operations : source.apply ( target ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Object source = ( input = target == null ? p : operations.apply ( ( Value ) source ) .apply ( target ) == null ? p.apply ( ( Value ) : target ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( (OTTOM ) p ) ? ( ( target == null ) : target ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Object source = input. for ( ; target == null ? p : source.apply ( ( long ) target ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Object source = input. for ( ; target == null; p = target.apply ( (OTTOM ) p.apply ( source ) == null ) ? p : target ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Object source = input. for ( ; target == null : p.apply ( (OTTOM ) p ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Object source = input. for ( ; target == null; p = p.apply ( (OTTOM ) p.apply ( input ) == null ) ? source ( target ) : target ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Object source = input. for ( ; target == null; p = source.apply ( (OTTOM ) p.apply ( target ) == null ) ? p : target ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Object source = NO_SIDE_EFFECTS_CALL;",
                "identical": false
            }
        ],
        "buggy_line": "Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty();",
        "fixed_line": "try { Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty(); } catch (Exception ex) { return Value.empty();"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.addro ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.addro ( \"ropppp\" ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.addropp.add ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.addro ( \"ropppp.session\" ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.addropp.addropp ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.addroResolver.addroppData ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.addro ( \"ropppp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.addroIndex.addropp ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.addroIndex.addroppData ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.addroDateFormat ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.addro ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.addro ( \"ropp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.addroIndex ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.addropp.addroppData ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.addropp ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.addroInsn ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.addro.addropp ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.addro.add ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.addrocard ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.addroynomial.add ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.addroIndex.add ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.addro ( \"ropppp.session ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.addroMaybe.add ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.addroppData ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.addro ( \"ropp.session ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.addro ( \"ro\" ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.addro ( \"roDateFormat.sessionpp\" ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.addro ( \"roppHexString\" ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.addropp.addropp ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.addropp.add ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.addro ( \"ropp,Session.sessionData ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.addroIndex.addropp ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add ( \"ropipp.session\" ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.addroData ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.addroIndex.addroppData ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.addro ( \"roppstream.session\" ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.addro ( \"roppData\" ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.addro ( \"ropp,Session.sessionData ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.addroIterator ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.addroResolver.addroppData ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.addroList ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.addro ( \"ropp VAR\" ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.addro ( \"ropppp.session.D\" ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.addro.add ( \"ropppp\" ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.addro ( \"ropp:\" ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.addrox ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add ( \"ro\" ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.addropp.add ( \"ropppp\" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.addropp ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.addro ( \"ropp,Session.sessionData ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.addro ( \"roList.sessionpp\" ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add ( \"roDateFormat.sessionpp\" ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.addroposition ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.addro ( \"ropppp,Session.sessionData ( ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.addro ( \"roDefined.session\" ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.addroStart ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.addro ( \"ropp must.session\" ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.addrodelta ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.addro ( \"roInsn\" ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.addropp.add ( \"ropp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.addroDateFormat ( \"ropppp\" ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add ( \"ropppp.session\" ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.addro ( \"ropppp,Session.sessionData ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.addro ( \"ro,SessionList.sessionData ( ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.addro ( \"ropppipp.session\" ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add ( \"ropppp\" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.addro ( \"ropppp.session.keepList\" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.addroInsn ( \"ropp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.addro ( \"ropppp.session.sessionData ( ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.addro.addropp ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.addropp.addroppData ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.addropi ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.addropp ( \"ropp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.addroMismatch ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.addro:\" ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.addroTO ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add ( \"ropppp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.addroInsn ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.addro ( \"roppstream.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.addro ( \"ropppp.session ( ) ,Session ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.addro ( \"ropppp.session ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.addroClass ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.addroDefined ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.addaddro ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.addro ( \"ro,Session.session.sessionData ( ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.addroAxis ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add ( \"ropp.session\" ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.addro ( \"ropppp.session ( ) ) ,Session ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.addro ( \"ropppp.session.sessionData\" ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.addro ( \"ropppp.session.newInstance ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.addroIndex ( \"ropppp\" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.addroIndex ( \"ropp.session ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.addro ( \"ropp.session ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.addro xx ( \"ropp\" ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.addro ( \"ropppp,Session.sessionData ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.addro ( \"ro,SessionList.sessionData ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.addro.add ( \"ropppp.session\" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.addroIndex ( \"ropppp.session\" ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.addro ( \"ropp DateTimeConstants.sessionData\" ) ;",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-119": {
        "fixes": [
            {
                "k": 1,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( context ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "String type = sentence.substring ( type,(',.indexOfStart ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( '\\n', type ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( '\\n', type ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( context ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "String type = sentence.substring ( type, targetType.indexOf ( decode ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "String type = sentence.substring ( type, targetType', type ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "String type = sentence.substring ( type, switchStart ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String type = sentenceStart.substring ( type,(', ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "String type = sentence.substring ( type,(', ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( decode ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( '\\L', type ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "String type = sentence.substring ( type, new sentenceStart ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "String type = sentence.substring ( type, targetType.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "String type = sentence.substring ( type, targetType.indexOf ( context ) ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( decode ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOfStart ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String type = sentence.substring ( type, targetType.indexOf ( '\\n', type ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "String type = sentence.substring ( type,urt', type ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, context ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "String type = sentenceStart.substring ( type,urt', type ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( \"\\' ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "String type = sentenceStart.substring ( type, keys.indexOf ( '\\n', type ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( targetType ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( avail ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( '\\'' ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "String type = sentence.substring ( type, result ) sentence ( type ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "String type = sentence.substring ( type, keys.indexOf ( '\\n', type ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, \" + decodeL' ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( '\\'' ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "String type = sentence.substring ( type, switchStart', type ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type, decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "String type = sentence.substring ( type,(', ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String type = sentenceStart.substring ( type, keys', type ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "String type = sentence.substring ( type,(',.indexOfStart', type ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "String type = sentence.substring ( type,(', ) sentence.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String type = sentence.substring ( type, targetType.indexOf ( decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type, decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type, context ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "String type = sentenceStart.substring ( type, targetType ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String type = sentence.substring ( type, e sentenceStart ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "String type = sentenceStart.substring ( type, targetType ) sentence.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( avail ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOfL sentence ( type ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, \" 8 ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, \" + decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( \"\\' ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( keys ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type, \" + decodeL' ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String type = sentence.substring ( type,(', ) sentence.indexOf ( type, context ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type, context ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "String type = sentence.substring ( type,(', ) sentence.indexOf ( type, decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( context ) ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String type = sentenceStart.substring ( type,(', ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "String type = sentence.substring ( type, drawLine ) sentence.indexOf ( type, decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "String type = sentence.substring ( type, freqStart ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( keys ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "String type = sentence.substring ( type, keys.indexOf ( context ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "String type = sentenceStart.substring ( type, switchStart ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( object ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "String type = sentenceStart.substring ( type,(',', type ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( targetType ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type, \" 8 ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, decodeL' ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type, \" + decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "String type = sentenceStart.substring ( type,(',.indexOf ( decodeL ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String type = sentence.substring ( type, SERStart ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, decodeLype ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( '\\.type ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String type = sentence.substring ( type, targetType.indexOf ( decode ) ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( method ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, decodeL, \"Link\" ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( ',', type ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String type = sentence.substring ( type, targetType ) sentence.indexOf ( type,",
                "identical": false
            },
            {
                "k": 84,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type, \" + decodeL' ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String type = sentence.substring ( type, keys', type ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, \" + decodeLit ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( decode ) ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "String type = sentenceStart.substring ( type, targetType ) sentence.indexOf ( type, context ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String type = sentenceStart.substring ( type, targetType ) sentence.indexOf ( type, decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "String type = sentenceStart.substring ( type, keys.indexOf ( context ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type, decodeLit ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "String type = sentence.substring ( type, keys.indexOf ( type ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type, \" 8 ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( sets ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "String type = sentence.substring ( type, bound', type ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( type ) ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String type = sentence.substring ( type,(',.indexOf ( '\\over ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String type = sentence.substring ( type, drawLine ) sentence.indexOf ( type, decodeLineno ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "String type = sentence.substring ( type, result ) sentence.indexOf ( type,",
                "identical": false
            },
            {
                "k": 100,
                "patch": "String type = sentenceStart.substring ( type, result ) sentence.indexOf ( type, \" + decodeLineno ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart)); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress);",
        "fixed_line": "int typeEnd = sentence.indexOf(',', typeStart); if (typeEnd > 0) { String type = sentence.substring(typeStart, typeEnd); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress); } } else { return null;"
    },
    "Bears-102": {
        "fixes": [
            {
                "k": 1,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) +\", buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) ) + \" ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.read ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.read ( ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , buf.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) + \" ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.readUnsignedShort ( ) ) + \" ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf, position.readUnsignedShort ( ) ) + \" ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.read ( ) ) .setPosition ( \" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case 21: position position.setTemp ( \"Temp.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.readers ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) ) , position.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf, position.readUnsignedShort ( ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case 21: position position.setTempInt ( \"Temp.read ( ) +\", buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \"L\", position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.read ( ) ) , position.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.readers ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case 21: position position.setTemp ( \"Temp.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.size ( ) + \" ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.read ( ) ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case 21: position position.setTempInt ( \"Temp.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) ) .setPosition ( \" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case 21: position position.setTemp ( \"Temp: position.readers.read ( ) ) , buf.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf, position.readUnsignedShort ( ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case 21: position position.setTemp ( \"Temp: position.readers.read ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , position.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case 21: position position.setTemp ( read ( \"Temp\", position.read ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.readFrom ( ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read\", buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) + \" ) , buf.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) + \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.getWidth ( ) + \" ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case 21: position position.setTemp ( \"Temp: position.setPosition ( ) ) , buf.readUnsignedShort ( \" + position.read ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case 21: position position.setTempInt ( \"Temp.readers.read ( ) + \" ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.getWidth ( ) + \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case 21: position position.setTemp ( \"Temp: position.setPosition ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case 21: position position.setTempInt ( \"Temp.read ( ) + \" ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case 21: position position.setTempInt (ow.read ( ) + buf.read ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) ) , buf.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case 21: position position.setTempInt (ow.read ( ) + buf.read ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case 21: position position.setTempInt ( \"Temp\", position.read ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf, position.readUnsignedShort ( ) ) + \" ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case 21: position position.setTempInt ( \"Temp.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case 21: position position.setTempInt ( \"Temp\", buf.read ( ) ) , position.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case 21: position position.setTempInt (pc.read ( ) + buf.read ( \" ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case 21: position position.setTemp ( \"Temp: position.setPosition ( ) ) , buf.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.readUnsignedShort ( ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case 21: position position.setTemp ( \"Temp\", buf.read ( ) ) , position.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case 21: position position.setTemp ( \"Temp\", buf.read ( ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case 21: position position.setTemp ( \"Temp\", position.read ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case 21: position position.setTempInt ( \"Temp\", buf.read ( ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.readUnsignedShort ( ) ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.size ( ) + \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read\", buf, position.readUnsignedShort ( ) ) + \" ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.readers ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case 21: position position.setTempInt (pc.read ( ) + buf.read ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \" ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) + \" ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \" ) , position.readUnsignedShort ( \" + 1, 1 ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case 21: position position.setTempInt ( \"Temp\", position.read ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case 21: position position.setTemp ( \"Temp\", position.read ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.readUnsignedShort ( ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readFrom ( \" ) , position.getByte ( ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case 21: position position.setTempInt ( \"$\", buf.read ( ) ) , position.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" + 1, 1 ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.readers ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case 21: position position.setTemp ( \"Temp\", position.readers.read ( ) ) , buf.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case 21: position position.setTempInt (pc.read ( ) + buf.read ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , buf.readUnsignedShort ( \" + position.read ) ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) + \" ) , position.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case 21: position position.setTempInt ( \"Temp.read\", buf.read ( ) ) , position.setPosition ( ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case 21: position position.setTemp ( \"Temp\", position.readers.read ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case 21: position position.setTemp ( read ( \"Temp\", position.read ( ) - buf, position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read ( ) ) , buf.readUnsignedShort ( \"L\", position.read ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.set ( ) + \" ) , position.readUnsignedShort ( \" + position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case 21: position position.setTempInt ( codes.read ( ) ) , buf.readFrom ( \" ) , position.readUnsignedShort ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case 21: position position.setTemp ( read ( \"Temp\", position.read ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.readers ( ) ) , buf.readUnsignedShort ( \"L\", position.readUnsignedShort ( ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case 21: position position.setTemp ( \"Temp.readers.read\", buf, position.readUnsignedShort ( ) ) + \" ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case 21: position position.setTemp ( \"Temp.read\", buf.read ( ) ) , position.setPosition ( ) ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case 21: position position.setTemp ( \"Temp: position.setPosition ( ) ) , buf.readFrom ( \" ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case 21: position position.setTemp ( \"Temp\", buf.read ( ) ) , position.readUnsignedShort ( ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break; case 22: position.set(\"profile\", buf.readUnsignedByte()); break; case 66: position.set(Position.KEY_POWER, buf.readUnsignedShort() + \"mV\"); break; case 67: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() + \"mV\"); break; case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
        "fixed_line": "position.set(\"pcbTemp\", (length == 4 ? buf.readInt() : buf.readShort()) * 0.1);"
    },
    "Bears-181": {
        "fixes": [
            {
                "k": 1,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .paint.getWidth ( ) instanceof String.select ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) || resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) == resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.select ( ) % resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) || resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.select ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ResultSet resultSet = this.database.databaseUse ( ) .getWidth ( ) % count.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .paint.getWidth ( ) % count.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .toString ( ) , count.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.getEntity ( ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) == resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) || resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.select ( ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) %s ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s.getEntity ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) & count.select ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( \"tableEntity ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .paint.getWidth ( ) instanceof String.select ( \"tableEntity ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .getWidth ( ) % count.select ( ) % resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) %Float.nextName ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .getWidth ( ) % count.select ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.getEntity ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) || resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) ) , resultSet.getEntity ( ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ResultSet resultSet = this.database.databaseUse ( ) .getWidth ( ) % count.select ( ) % resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ResultSet resultSet = this.database.databaseUse ( ) .getWidth ( ) % count.select ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.select ( ) <= resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"selectStatement.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.getEntity ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) == resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( \" ) ) , resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) ) , resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) %s.getEntity ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) ) , resultSet.getEntity ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) == resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"selectStatement.select ( ) %s.getEntity ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"Context.getEntity ( ) ) , resultSet.getLongName ( ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) || resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.select ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"tableEntity ) ) , resultSet.getEntity ( ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .paint.getWidth ( ) instanceof String.select ( \"tableEntity ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) == resultSet.getEntity ( ) ) , resultSet.getLongName ( ) >>> >>> resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ResultSet resultSet = this.\ub730Use ( ) .database ( \"UnexpectedStatement.select ( ) %s ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( \"tableEntity ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) == resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"selectStatement.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) % count.select ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) || resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .next ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( ) ) , resultSet.getLongName ( ) .next ( ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"tableEntity ) , resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .toString ( ) , count.getEntity ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( ) ) , resultSet.getEntity ( ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( \"tableEntity ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .paint.getWidth ( ) instanceof String.select ( \"tableEntity ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"Context.select ( ) %s.getEntity ( ) ) , resultSet.getLongName ( ) .getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .getWidth ( ) % count.select ( ) .getEntity ( ) ) , resultSet.getLongName ( ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) >>> >>> resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ResultSet resultSet = this.databaseUse ( ) .database ( \"UnexpectedStatement.select ( \" ) | resultSet.getEntity ( ) ) , resultSet.getLongName ( ) .toString ( ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) , resultSet.getLongName ( ) ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"tableEntity ) ) , resultSet.getEntity ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getWidth ( ) instanceof String.select ( ) ) , resultSet.getLongName ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ResultSet resultSet = this.databaseUse.database ( ) .getType ( ) instanceof String.select ( \"symbols\", resultSet.getEntity ( ) ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": "ResultSet resultSet = this.databaseClient.singleUse().executeQuery(Statement.of( String.format(\"select count(*) from %s\", persistentEntity.tableName()))); resultSet.next(); return resultSet.getLong(0);",
        "fixed_line": "Statement statement = Statement.of(String.format( \"select count(*) from %s\", persistentEntity.tableName())); try (ResultSet resultSet = this.databaseClient.singleUse().executeQuery(statement)) { resultSet.next(); return resultSet.getLong(0); }"
    },
    "Bears-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "beanDesc = provider.findAndAddSerializer ( map, this ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "beanDesc = provider.findAndAddSerializer ( map, null ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "beanDesc = provider.findAndAddDynamic ( map, this ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( serializers, provider ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "beanDesc = _dynamicSerializers.find ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "beanDesc = provider.findAndAddDynamic ( map, null ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "beanDesc = _dynamicSerializers.findMap ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "serializer serializer = _dynamicSerializers.findAndAddSerializer ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "beanDesc = map.find ( _dynamicSerializers, provider ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "beanDesc = map.findAndAddSerializer ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "serializer serializer = _dynamicSerializers.findAndAddSerializer ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "beanDesc = provider.findAndAddSerializer ( _property, map ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( map, null ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "size sizePlus1 = _dynamicSerializers.findMap ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( type, provider ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "beanDesc = _dynamicSerializers.findAndMap ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "beanDesc = provider.findAndAddDynamic ( _typeSerializer, map ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ser ser = _dynamicSerializers.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "bean bean = provider.findAndAddSerializer ( map, this ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "beanDesc = provider.findAndAddSerializer ( _dynamicSerializers, map ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( serializers, provider ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "beanDesc = _typeId.findAndAddSerializer ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ser ser = _dynamicSerializers.findAndAddSerializer ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ser ser = _dynamicSerializers.findAndAddSerializer ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "beanDesc = _dynamicSerializers.findAndMap ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( serializers, provider ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "beanDesc = provider.findAndAddSerializer ( this, map ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "beanDesc = provider.findAndAddSerializer ( _dynamicSerializers, staticTyping ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "beanDesc = _dynamicSerializers.findAndMap ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( map, this ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "beanDesc = provider.findAndAddSerializer ( map, _type ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "staticTyping = _dynamicSerializers.findMap ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "beanDesc = this.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "beanDesc = provider.findAndAddDynamic ( _dynamicSerializers, map ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "size sizePlus1 = _dynamicSerializers.findAndAddSerializer ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "beanDesc = provider.findAndAddSerializer ( _dynamicSerializers, this ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "beanDesc = provider.findAndAddSerializer ( _dynamicSerializers, type ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( map, null ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, staticTyping ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "beanDesc = provider.findAndAddSerializer ( _property, this ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "beanDesc = _dynamicSerializers.findMap ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "serializer serializer = _dynamicSerializers.find ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "staticTyping = _dynamicSerializers.find ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "beanDesc = provider.findAndAddDynamic ( _dynamicSerializers, this ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "beanDesc = map.find ( _typeProvider, provider ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "beanDesc = _mapType.find ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ser ser = _typeSerializer.findAndAddDynamic ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ser ser = _dynamicSerializers.findAndAddSerializer ( type, provider ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "beanDesc = this.findAndAddSerializer ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "size sizePlus1 = _mapType.find ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "serializer serializer = _dynamicSerializers.findMap ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "serializer serializer = _dynamicSerializers.findAndAddSerializer ( provider, beanDesc ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "beanDesc.findAndAddSerializer ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "beanDesc = _typeSerializer.findAndAddField ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "beanDesc = this.findAndAddSerializer ( provider, _type ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ser ser = _dynamicSerializers.findAndAddSerializer ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "beanDesc = _mapType.find ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ser ser = _typeSerializer.findAndAddDynamic ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ser ser = _dynamicSerializers.findAndAddField ( provider, null ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "beanDesc = provider.findAndAddDynamic ( _dynamicSerializers, type ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "beanDesc = _dynamicSerializers.find ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "beanDesc = _dynamicSerializers.findAndAddDynamic ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( serializers, this ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ser ser = _typeSerializer.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "beanDesc = provider.findAndAddSerializer ( _mapType, map ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "beanDesc = _typeSerializer.findAndAddField ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "beanDesc = _typeSerializer.findAndAddSerializer ( serializers, null ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ser ser = _typeSerializer.findAndAddSerializer ( map, provider ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "beanDesc.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "beanDesc = _dynamicSerializers.findAndAddDynamic ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, false ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( serializers, this ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "beanDesc = _typeId.findAndAddSerializer ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( serializers, null ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "size sizePlus1 = map.find ( _mapType, provider ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "beanDesc = _typeSerializer.findAndAddDynamic ( map, this ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "beanDesc = _dynamicSerializers.findMap ( provider, map ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ser ser = provider.findAndAddSerializer ( map, this ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "bean bean = provider.findAndAddSerializer ( map, null ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "beanDesc = _typeSerializer.findMap ( provider, this ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, serializers ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "serializer serializer = _dynamicSerializers.findAndAddSerializer ( type, provider ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "beanDesc = _dynamicSerializers.findMap ( type, provider ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "beanDesc = provider.findAndAddSerializer ( map, _property ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "beanDesc = this.findAndAddSerializer ( provider, _property ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( map, null ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "beanDesc = map.find ( _mapType, provider ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "beanDesc = map.findAndAddSerializer ( provider, _type ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "beanDesc = _dynamicSerializers.findAndAddSerializer ( provider, 1 ) ;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError... if (type == Object.class) { // basically just need to call `toString()`, easiest way: JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type); _dynamicSerializers = map.newWith(type, ser); return ser; }"
    },
    "Bears-138": {
        "fixes": [
            {
                "k": 1,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int mn =CellUnsignedShort ( cattrs, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int mn =CellUnsignedShort ( cType, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int mn =CellUnsignedByte ( c, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int mn =CellAsString ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int mn =CellUnsignedShort ( cByte, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int mn =CellUnsignedShort ( cArg, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int mn =CellUnsignedByte ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int mn =CellAsString ( c, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int mn =CellUnsignedShort ( c codePoint, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int mn =Cell readUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int mn =CellUnsignedShort ( cShort.readUnsignedByte ( ), buf, i.readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int mn =CellUnsignedShort ( cix, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int mn =CellUnsignedShort ( cYD.readUnsignedByte ( ), buf, i.readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int mn =CellToAdd ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int mn =CellUnsignedShort ( cbuf.readUnsignedByte ( ), buf, i.readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int mn =CellTags ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int mn =CellUp ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int mn =CellUnsignedShort ( ccy, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, buf ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int mn ( cattrs, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int mn =CellUnsignedShort ( cByteOffset, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i.readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int mn =CellUp ( c, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int mn =CellUnsignedShort ( cOffset, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int mn =CellUnsignedShort ( cConverter, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int mn =Cellsave ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int mn =CellUnsignedShort ( clocalsSize, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int mn =CellUnsignedShort ( c.readUnsignedByte ( ), buf, i.readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int mn =CellUnsignedShort ( cattrs.readUnsignedByte ( ), buf, i.readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int mn =CellUnsignedShort ( c appears, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int mn =CellUnsignedShort ( cORY, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .read ( ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, locale ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int mn =CellToAdd ( c, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int mn =CellUnsignedShort ( cInstance, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int mn =CellUnsignedShort ( cClass, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int mn =CellUnsignedShort ( cIncludedSize, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int mnfloor =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( '/' ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int mn =CellAsString ( cattrs, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .read ( ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int mn =CellUnsignedShort ( cShort.readUnsignedByte ( ), buf, i ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int mn =CellUnsignedShort ( cYD.readUnsignedByte ( ), buf, i.readUnsignedShort ( ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int mn =CellUnsignedShort ( cCache, buf.readUnsignedByte ( ) ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( 6 ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ), buf ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .read ( '/' ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .read ( cbufByte ( ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( cattrs, i ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int mn =CellUnsignedShort ( c.readUnsignedByte ( ), buf, locale ) .readUnsignedByte ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, buf ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readFrom ( '/' ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int mn =CellUnsignedShort ( cShort.readUnsignedByte ( ), buf, 7 ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .read ( '/' ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .read ( cbufByte ( ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ), locale ) .readUnsignedShort ( ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, 8 ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( maxStringLength ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, buf.read ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( c ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int mn =CellUnsignedShort ( cattrs.readUnsignedByte ( ), buf, i ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int mn =CellUnsignedShort ( cArg, buf.readUnsignedByte ( ) ) .read ( ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int mn =CellUnsignedShort ( c.readUnsignedByte ( ), buf, new lac[i] ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .readFrom ( '/' ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, locale ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int mn =CellUnsignedShort ( cIncludedSize, buf.readUnsignedByte ( ) ) .read ( ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, i ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i.readUnsignedShort ( ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int mn =CellUnsignedShort ( cbuf.readUnsignedByte ( ), buf, new lacByte ( ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int mn =CellUnsignedShort ( cattrs, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int mn =CellUnsignedShort ( cattrs, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, buf ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( cattrs, buf ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .read ( cattrs, buf ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int mn =CellUnsignedShort ( cType, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .read ( i, buf ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( ( i, buf ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ), buf ) .readUnsignedShort ( i ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .read ( i, buf ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( c - i.read ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int mn =CellUnsignedShort ( cbuf.readUnsignedByte ( ), buf, i ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( maxStringLength, buf ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int mn =CellUnsignedShort ( cattrs.readUnsignedByte ( ), buf, new lac ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( cbuf, i ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .read ( cattrs, buf ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int mn =CellUnsignedShort ( c, buf, lac.readUnsignedByte ( ) ) .read ( ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int mn =CellUnsignedShort ( cArg, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, 7 ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, off ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( locale ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int mn =CellUnsignedShort ( c.readUnsignedByte ( ), buf, i ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int mn =CellUnsignedShort ( cbuf, buf.readUnsignedByte ( ) ) .read ( i, locale ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int mn =CellUnsignedShort ( cByteOffset, buf.readUnsignedByte ( ) ) .read ( ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int mn =CellUnsignedShort ( c.readUnsignedByte ( ), buf, new lacByte ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int mn =CellUnsignedShort ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, 6 ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int mn =CellUnsignedByte ( c, buf.readUnsignedByte ( ) ) .readUnsignedShort ( i, buf ) ;",
                "identical": false
            }
        ],
        "buggy_line": "int mnc = buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));",
        "fixed_line": "int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));"
    },
    "Bears-184": {
        "fixes": [
            {
                "k": 1,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( types ) ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( condition ) ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( null ) ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( entity ) ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( walker ) ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( chain ) ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".filter ( it.getJavaType ( ) .equals ( Arc ) ) ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".filter ( it.getJavaType ( ) .equals ( condition ) ) .equals ( types ) ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chain ) ) ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( recvType ) ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( vertical ) ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chain ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( 128 ) ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chain ) ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( y ) ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) *",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".filter ( it.getJavaType ( ) .equals ( condition ) ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( leftType ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( true ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( types ) ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".filter ( it.getJavaType ( ) .equals ( verticalType ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( name ) ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( leftType ) ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( Type ) ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( this ) ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( that ) ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( string ) ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chainType ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( filter ) ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chain.get ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".filter ( it.getJavaType ( ) .equals ( leftType ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( base ) ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) &&",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".filter ( it.getJavaType ( ) .equals ( condition ) ) ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( delta ) ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( s ) ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".filter ( it.getJavaType ( ) .equals ( staticType ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".filter ( it.getJavaType ( ) .equals ( Arc ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( double ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( i ) ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( annotated ) ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".filter ( it.getJavaType ( ) .equals ( verticalType ) ) ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( true ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".filter ( it.getJavaType ( ) .equals ( getMaximumType ( ) ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".filter ( it.getJavaType ( ) .equals ( types ) ) ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".filter ( it.getJavaType ( ) .equals ( verticalType ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( typedef ) ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( xx ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".filter ( it.getJavaType ( ) .equals ( Arc ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".filter ( it.getJavaType ( ) .equals ('\" ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".filter ( it.getJavaType ( ) .equals ( leftType ) ) ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( param ) ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( that ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".filter ( it.getJavaType ( ) .equals ( leftType ) ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chain ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chain ) ) .equals ( types ) ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chainType ) ) ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( pojo ) ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chainType ) ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( x ) ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( inverted ) ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".filter ( it.getJavaType ( ) .equals ( entity ) ) .equals ( xx ) ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( index ) ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( Days ) ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".filter ( it.getJavaType ( ) .equals ( condition ) ) .int ( ) ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( variableName ) ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( recvType ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( constructor ) ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals (content ) ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".filter ( it.getJavaType ( ) .equals ( verticalType ) ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( isSupported ) ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals (outline ) ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".filter ( it.getJavaType ( ) .equals ( condition ) ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals (display ) ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( chain ) ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( A ) ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( converter ) ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals (ifyingType ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".filter ( it.getJavaType ( ) .equals ( synthesizedExterns ) ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( entity ) ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".filter ( it.getJavaType ( ) .equals ( condition ) ) .equals ( vertical ) ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( condition ) ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( typedef ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".filter ( it.getJavaType ( ) .equals ( entity ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".filter ( it.getJavaType ( ) .equals ( recvType ) ) .equals ( name ) ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".filter ( it.getJavaType ( ) .equals ( variableName ) ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals ( entity ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) * vertical ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".filter ( it.getJavaType ( ) .equals ( chainType ) ) .equals ( it ) ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".filter ( it.getJavaType ( ) .equals ( it ) ) .equals (Equals ) ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".filter(it -> it.getJavaType().equals(entity)) //",
        "fixed_line": ".filter(it -> entity.equals(it.getJavaType())) //"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = null.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = this.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = prop.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = bean.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = factory.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = builder.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = propName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = value.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = type.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = raworals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = 4.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ctor.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignored.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = anyorals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ctxt.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = param.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = name.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = context.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorMethod.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = 3.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = properties.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = u.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = unknownDef.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = \"\\orals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = property.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = accessor.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = old.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = n.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = intr.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = Instanceorals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = classDef.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = constructorals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = jp.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = adjusted.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = annotation.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = valueType.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = prefix.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = config.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = set.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = getter.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = json.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = parent.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = explicitName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = 0.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = key.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = rawProperty.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = methodName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = elementType.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = passName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = isUnknownals.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ref.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = rhs.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = deserMethod.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = params.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = qName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = isVisible.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = hasUnknown.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = arg.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = qualifiedName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = map.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = propertyName.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = it.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = prov.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = receiver.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = propList.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = pie.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = result.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = in.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = names.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = existing.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored =ters.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = that.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = other.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = unknownDefine.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = obj.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = formatter.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = root.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = creator.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = fn.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = subType.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = days.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = description.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = call.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = fieldValue.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = curr.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = mapper.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ser.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = values.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = expr.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = xpath.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = enumSet.orals ( ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = 1.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = re.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = 2.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = Modifier.orals ( ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = 1.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = w.getIgnored ( ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnored ( && ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = prop.orals ( ) ;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number ( \"number+\" ) , power ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number ( \"numberInt ) , power ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number ( \"number+\" ) , x ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number ( \"number instanceof ( q ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( )",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number ( \"number ( -x ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number ( \"numberQuad ) , power ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number ( \" ( q1 ) , power ) \" ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number ( \"number+\" ) , remaining ( power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number ( \"number instanceof ( power ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number ( \" ( q2 ) , power ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number ( \"number+\" ) , f4 ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number ( \"numberInt\" ) , power ( ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number ( \"number '<' ) , power ( ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number ( \" ( q2 ) , power ) \" ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number ( \"number || ( power ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .int ( ) . ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number ( \" ( i+ ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number ( \"number instanceof ( f ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number ( \"x == ( power ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .doubleValue ( )",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number ( \"number+\" ) , remaining ( power ) ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number ( \"number == ( 4 ) , power ) ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number ( \"x instanceof ( power ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number ( \"number instanceof ( 4 ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number ( \"number+\" ) , value ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number ( \" ( maxx ) , power ) \" ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .int ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number ( \"number+\" ) , f ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number ( \"number ( x ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number ( \"numbercon ) , power ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number ( \"number+\" ) , power ( power ) \" ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number ( \" ( oldx ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number ( \"number+\" ) , out ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .int ( )",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number ( \" ( q1 ) , f ) +\" ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number ( \" ( q1 ) , f ) \" ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number ( \" ( q2 ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number ( \" ( tolerance ) , power ) \" ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number ( \" ( q1 ) , power ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number ( \"x instanceof ( power ) , power ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( ) + \" ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number ( \"number instanceof ( power ) , power ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number ( \" ( q ) , f ) \" ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number ( \"numberBigDecimal ) , power ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number ( \" ( -x ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number ( \"number == ( 2 ) , power ) ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number ( \"number instanceof ( 2 ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number ( \"number instanceof ( 2 ) , power ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .group ( ) .intValue ( )",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number ( \"number == ( x ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number ( \" ( q1 ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number ( \"x instanceof ( power ) , power ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number ( \" ( value ) , power ) \" ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number ( \"number == ( q ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number ( \"number ( 1y ) , power ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number ( \"number '<' ) , power ( ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( ) + \" ) . }",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number ( \"numberInt\" ) , power ( ) .int ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number ( \"number instanceof ( power ) , power ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number ( \"number ( q2 ) , power ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number ( \"number+\" ) , f4 ( 2 ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number ( \"number: padding ) , power ( \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number ( \"x == ( power ) , power ) .append ( \"]\" ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number ( \"x instanceof ( power ) , power ) .append ( \"]\" ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number ( \"number ( -x ) , power ) .append ( \"]\" ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number ( \"number <= ( power ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .doubleValue ( ) + \" ) \" ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number ( \" ( startx ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number ( \"number instanceof ( power ) , power ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .intValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number ( \"number '<' ) , power ( ) .int ( ) . ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number ( \"x instanceof ( power ) , power ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number ( \"number == ( 4 ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number ( \"number ( 4 ) , power ) \" ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number ( \"number ( 1y ) , power ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number ( \"numberQuad\", power ) , power ( ) .doubleValue ( ) +\" ) \" ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number ( \"x+\" ) , power ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number ( \"numberInt\" ) , power ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number ( \"numberInt\" ) , power ( ) +\" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number ( \"number+\" ) , i ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number ( \"number: z ) , power ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number ( \"x == ( power ) , power ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number ( \"number ( q2 ) , power ) .\" ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number ( \"number ( 1y ) , power ) .doubleValue ( ) + \" ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number ( \"numberInt\" ) , power ( ) .doubleValue ( ) +\" )",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number ( \"number instanceof ( power ) , power ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number ( \"number+\" ) , f4 ( power ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number ( \"number+\" ) , f4 ( 2 ) .doubleValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number ( \"number ( 1y ) , power ) .doubleValue ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number ( \"number+\" ) , f4 ) .int ( ) +\" ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number ( \"number ( 1x ) , power ) .int ( ) + \" ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number ( \"numberInt\" ) , power ( ) .intValue ( ) + \" ) .\" ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number ( \"numberx ) , power ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number ( \"numberInt\" ) , power ( ) .int ( ) . ) ;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\") // power",
        "fixed_line": ".number(\"(x+)?,\") // power"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return setQueryParameter ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return setQueryParameter ( \"position\", old ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return setQueryParameter_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return setQueryParameter ( \"position\", oldEnd ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return setQueryParameter ( \"position\", position_msk1 ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return setQueryParameter ( \"position\", length ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return setQueryParameter ( \"position\", old1 ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return setQueryParameter_msk_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return setQueryParameter ( \"position\", position2 ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return setQueryParameter ( \"position\", second_msk1 ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return setQueryParameter_msk_msk_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return setQueryParameter_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return setQueryParameter_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return setQueryParameter ( \"position_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return setQueryParameter ( \"position\", FIELD_msk1 ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return setQueryParameter_msf ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return setQueryParameter_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return setQueryParameter ( \"position\", position1 ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return setQuery_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return setQueryParameter ( \"position\", NO_msk1 ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return setQueryParameter_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return setQueryParameter_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return setQueryParameter ( \"position\", endL_msk1 ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return setQueryParameter_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return setQueryParameter_ms_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return setQueryParameter_msk_msf ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return setQueryParameter ( \"position\", start ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return setQueryParameter_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return setQueryParameter_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return setQueryParameter ( \"position\", 2 ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return setQueryParameter ( \"position\", RANGE_msk1 ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return setQueryParameter ( \"position\", it_msk1 ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return setQueryParameter ( \"position\", old_msk1 ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return setQueryParameter ( \"position\", oldPos ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return setQueryParameter ( \"position\", i ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return setQueryParameter_msk_msk_msk_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return setQueryParameter_ms_msk_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return setQueryParameter_msk_msk_msf ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return setQueryParameter ( \"position\", maxParsedDigits ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return setQueryParameter ( \"position\", max ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return setQueryParameter ( \"position\", G_msk1 ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return setQueryParameter ( \"position\", minutes ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return setQueryParameter_msk_msk_msk_msf ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return setQueryParameter ( \"position\", line ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return setQueryParameter ( \"position\", YEAR_msk1 ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return setQueryParameter ( \"position\", position_msk ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return setQueryParameter_ms_msk_msk_ms ( \"position\", position ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return setQueryParameter_ms_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msf ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return setQueryParameter_ms_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msf ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return setQueryParameter ( \"position\", STRING_msk1 ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return setQueryParameter ( \"position\", oldmsk ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return setQueryParameter ( \"position\", label_msk1 ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return setQueryParameter_ms_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return setQueryParameter_ms_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return setQueryParameter_ms ( \"position\", old ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return setQueryParameter ( \"position\", wholeValue ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return setQueryParameter ( \"position\", oldmsk1 ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msf ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return setQueryParameter_msk_msk_msk_msk_ms ( \"_msk\", position ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return setQueryParameter_msk_ms ( \"position\", old ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return setQueryParameter ( \"position\", old_msk ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_ms ( \"_msk\", position ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msf ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return setQueryParameter_msk_msk_msk_ms ( \"_msk\", position ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return setQueryParameter_ms_msk_msk_msk_msk_msk_msk_msk_msk_msk_msk1 ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msf ( \"ms\", position ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return setQueryParameter_msk_msk_msk_msk_msk_msk_msk_msk_ms ( \"_ms\", position ) ;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-109": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setPosition ( index.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setPosition ( Opcodes.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setPosition ( values.KEY_VERSION, title[index++] ) ;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setPosition ( paint.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition ( values.KEY_VERSION, index[index++] ) ;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setPosition ( dateFormat.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setPosition ( position.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setPosition ( dateFormatAsString.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setPosition ( values.KEY_VERSION, dateFormatAsString[index++] ) ;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setPosition ( it.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setPosition ( start.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setPosition ( values.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setPosition ( values.KEY_VERSION, i[index++] ) ;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setPosition ( threshold.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setPosition ( values.KEY_VERSION, position[index++] ) ;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setPosition ( types.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setPosition ( Type.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setPosition ( super.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition ( handler.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setPosition ( startPosition.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setPosition (KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setPosition (Alignment.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setPosition ( title.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setPosition ( loop.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setPosition ( values.KEY_VERSION, handler[index++] ) ;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setPosition ( locale.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setPosition ( values.KEY_VERSION, FIELD[index++] ) ;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setPosition ( dateFormat_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setPosition ( values.KEY_VERSION, types[index++] ) ;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setPosition ( Context.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setPosition ( copy.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setPosition ( Constants.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setPosition ( font.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setPosition (s.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setPosition (unicode.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setPosition (codes.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setPosition ( padding.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setPosition ( Rectangle.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setPosition ( superType.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setPosition ( A.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setPosition ( Opcodes.KEY_VERSION, index[index++] ) ;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setPosition ( line.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setPosition ( List.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setPosition ( DateFormat.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setPosition ( bl.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setPosition ( chain.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setPosition ( index, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setPosition ( store.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setPosition (schema.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setPosition ( dateFormats.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setPosition ( instruction.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setPosition ( style.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setPosition ( values.KEY_VERSION, start[index++] ) ;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setPosition ( values.KEY_VERSION, input[index++] ) ;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setPosition ( values.KEY_VERSION, dateFormat[index++] ) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setPosition ( values.KEY_VERSION, Context[index++] ) ;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setPosition ( types.KEY_VERSION, index[index++] ) ;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setPosition ( KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setPosition ( Read.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setPosition ( this.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setPosition ( values.KEY_VERSION, paint[index++] ) ;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setPosition ( opt.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setPosition ( map.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setPosition ( majorPosition.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setPosition ( staticTyp.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setPosition ( dateFormat_KEY, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set ( Opcodes.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setPosition ( values.KEY_VERSION, dateFormats[index++] ) ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setPosition (this.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setPosition ( bins.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setPosition ( i.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setPosition ( values.KEY_VERSION, it[index++] ) ;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setPosition ( all.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setPosition (Difference.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setPosition ( values.KEY_VERSION, cw[index++] ) ;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setPosition (crete.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setPosition ( divider.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setPosition ( Preconditions.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setPosition ( MOCK_VERSION.KEY, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.setPosition ( mut.KEY_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setPosition ( values.KEY_VERSION, parent[index++] ) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setPosition ( values.KEY_VERSION, elements[index++] ) ;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setPosition ( values.KEY_VERSION, Opcodes.VERSION[index++] ) ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setPosition ( values.KEY_VERSION, line[index++] ) ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setPosition ( values.KEY_VERSION, style[index++] ) ;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setPosition ( values.KEY_VERSION, super[index++] ) ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setPosition ( startPosition, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setPosition (verify_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition ( INTERFW_VERSION, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setPosition ( getItemCount ( ) , values[index++] ) ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setPosition ( line, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setPosition ( FIELD_NAME, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setPosition ( values.KEY_VERSION, Opcodes.index[index++] ) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setPosition ( preferredBreakPosition, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setPosition ( values.KEY_VERSION[index++] ) ;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setPosition ( loadFactor, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setPosition ( values.KEY_VERSION, index++[index++] ) ;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setPosition ( type, values[index++] ) ;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setPosition ( Opcodes.KEY_VERSION, values[index] ) ;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setPosition ( values.KEY_VERSION, index[index] ) ;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.KEY_VERSION_FW, values[index++]);",
        "fixed_line": "if (!type.equals(\"Alert\") || protocolType == 0) { position.set(Position.KEY_VERSION_FW, values[index++]); }"
    }
}