{
    "Bears-131": {
        "fixes": [
            {
                "k": 1,
                "patch": "int index = value.substring(index + 16;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int index = value.substring(index + 2 * 16;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int index = value.substring(index + 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int index = value.substring(index + 12;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int index = value.substring(index +exit;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int index = value.substring(0, index) - 16;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int index = value.substring(index + 2];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int index = value.substring(1)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int index = value.substring(1 << 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int index = value.substring(1 << 16;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int index = Integer.valueOf(0) ? 16 : value.substring(index + 2 * 16;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int index = value.substring(index + Kit.length() - 16;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int index = value.substring(index + 127) - 16;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int index = Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int index = value.substring(index + 9;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int index = value.substring(index + 2].length() - 16;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int index = value.substring(index + 6;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int index = value.substring(index + 1, 16;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int index = value.substring(index + 2].length+1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int index = value.substring(index + 2 * 9;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int index = value.substring(index +(3, 16;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int index = Integer.valueOf(0) ? 16 : Integer.valueOf;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int index = Integer.valueOf(0) ? 16 : : value.substring(index + 2 * 16;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int index = value.substring(index + code;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int index = value.substring(index + 4)];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int index = value.substring(index + 2 *Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int index = value.substring(index + Kit.length+1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int index = value.substring(index + allocate;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int index = value.substring(position) - 16;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int index = value.substring(index + 30;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int index = value.substring(0, index)];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int index = value.substring(index + 1)) >= Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int index = value.substring(index + 2 * Kit.substring(index + 16;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int index = value.substring(index +Quad;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int index = value.substring(index +CommonPosition;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int index = value.substring(index + 2].length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int index = Integer.valueOf(0) ? 16 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int index = value.substring(index + 36;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int index = value.substring(index + diff;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int index = value.substring(index +Uri;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int index = value.substring(index + 3];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int index = value.substring(indexindex + 2 * 16;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int index = value.substring(index + 2 *Quad;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int index = Integer.valueOf(value) - 16;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int index = value.substring(index + width;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int index = value.substring(position) + 12;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int index = Integer.valueOf(0) ? 16 : value.substring(index + 2 : 16;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int index = value.substring(index + writes;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int index = value.substring(index + 10 + Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int index = value.substring(index +Changed;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int index = value.substring(index + 13;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int index = value.substring(index + 10 + Kit.length() - 16;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int index = value.substring(indexindex + 16;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int index = value.substring(index +Navigator.length() - 16;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int index = value.substring(index + 1)) >= Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int index = value.substring(index +Feature.ACC_DEPRECATED;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int index = value.substring(index + extent;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int index = value.substring(index + 2 : 16;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int index = value.substring(index + length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int index = Integer.MAX_VALUE - 16;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int index = value.substring(index +Bounds.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int index = value.substring(index + 2 * Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int index = value.substring(index +Equals;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int index = Integer.valueOf(0) ? 16 : value.substring(index + 12;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int index = Integer.MAX_VALUE - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int index = value.substring(index + TextBox;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int index = value.substring(index + 21 - 16;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int index = value.substring(index + 2 * Kit.substring(position) - 16;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int index = value.substring(1 << 8;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int index = value.substring(index + tokens.length() - 16;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int index = value.substring(index + 2 * Kit.length() - 16;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int index = value.substring(index + Breakf;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int index = value.substring(index + tokens.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int index = Integer.valueOf(index+1)+\" - 16;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int index = value.substring(index + 2)];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int index = value.substring(index +tach;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int index = value.substring(index + dm.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int index = value.substring(index +bottom;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int index = value.substring(index + position;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int index = value.substring(5) - 16;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int index = value.substring(index + 0.8f;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int index = value.substring(index + 2 * Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int index = value.substring(index +128;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int index = value.substring(1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int index = value.substring(index + 2) - 16;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int index = value.substring(index + dm.length+1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int index = value.substring(index + 3)+1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int index = value.substring(index + 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int index = value.substring(index + 1) % 12;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int index = value.substring(index +writing;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int index = value.substring(index +room;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int index = value.substring(index +Bounds.length+1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int index = value.substring(index + 2 * 10;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int index = value.substring(index + 2 * 2;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int index = value.substring(index +QuadBytes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int index = value.substring(index + rule;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int index = value.substring(index + 49;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int index = Integer.valueOf(0) ? 16 : value.substring(index + 2];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int index = value.substring(index +Compare;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int index = value.substring(index +lin.length+1;",
                "identical": false
            }
        ],
        "buggy_line": "int index = Integer.valueOf(temp.substring(0, 2), 16); if (protocol >= 3) { double value = Short.valueOf(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.valueOf(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);",
        "fixed_line": "int index = Integer.parseInt(temp.substring(0, 2), 16); if (protocol >= 3) { double value = (short) Integer.parseInt(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.parseByte(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.parseInt(temp.substring(4), 16);"
    },
    "Bears-22": {
        "fixes": [
            {
                "k": 1,
                "patch": "namespace.referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw new IllegalStateException(\"Typeinging = _referencedType;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new IllegalStateException(\"Type = _referencedType;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType;;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = _referencedType;;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new IllegalStateException(\"Type = _referencedType;;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = oldType;;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "namespace, oldType = _referencedType;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new IllegalStateException(\"Type type = _referencedType;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "._referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new IllegalStateException(\"Typeing = _referencedType;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "old oldType = _referencedType;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old oldType;;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = = _referencedType;;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = oldType;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw new IllegalStateException(\"Type type = _referencedType;;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "throw new IllegalStateException(\"Typeinging = _referencedType;;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw new IllegalStateException(\"Typeing parameterized type = _referencedType;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = _referencedType;;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "namespace namespace = _referencedType;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "throw new IllegalStateException(\"Type----Type = _referencedType;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old oldType;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = value;;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType;;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "types, oldType = _referencedType;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = = _referencedType;;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "throw new IllegalStateException(\"Type node type.referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = = oldType;;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = old oldType;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "throw new IllegalStateException(\"Can not instantiate value of type \"+referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "throw new IllegalStateException(\"Type type mismatching = _referencedType;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "namespace---referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = oldType;;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw new IllegalStateException(\"Typeing parameterized type = _referencedType;;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = oldType;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_referencedType = old;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "throw new IllegalStateException(\"Typeing = _referencedType;;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "throw new IllegalStateException(\"Can not instantiate \"+_referencedType = = _referencedType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "throw new IllegalStateException(\"Can not instantiate \"+_Type = = _referencedType;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw new IllegalStateException(\"No--Type = _referencedType;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "throw new IllegalStateException(\"Type type mismatchinging = _referencedType;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old;;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "throw new IllegalStateException(\"Can not instantiate value of type \"+referencedType = = _referencedType;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "throw new IllegalStateException(\"Type---Type = _referencedType;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old old oldType;;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = olding;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw new IllegalStateException(\"No---Type = _referencedType;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw new IllegalStateException(\"Can not instantiate value of type \"+_referencedType = = _referencedType;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw new IllegalStateException(\"Type-----Type = _referencedType;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = old oldType;;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = value;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "throw new IllegalStateException(\"Can not instantiate \"+_referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw new IllegalStateException(\"Can not instantiate \"+_referencedType = olding;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "namespace--referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = = _referencedType;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = = _referencedType;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "throw new IllegalStateException(\"Type node type.referreferencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "throw new IllegalStateException(\"No--Type = _referencedType;;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "throw new IllegalStateException(\", _referencedType = olding;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw new IllegalStateException(\"Can not instantiate \"+_referencedType = value;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "throw new IllegalStateException(\"Type sizeing = _referencedType;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "throw new IllegalStateException(\"Can not instantiate value of type \"+referencedType = _referencedType;;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = olding;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "throw new IllegalStateException(\"SubtypeSubtypeSubtype of type \"+_referencedType = _referencedType;;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = value;;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new IllegalStateException(\"Type----referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "throw new IllegalStateException(\"Type arraying parameterized type = _referencedType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = _valueType;;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "types types, oldType = _referencedType;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = = oldType;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "throw new IllegalStateException(\"Can not instantiate value;;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old old oldType;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "throw new IllegalStateException(\"Type = = _referencedType;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "throw new IllegalStateException(\"Type---referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = old old oldType;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "throw new IllegalStateException(\"SubtypeSubtypeSubtype of type \"+_referencedType = oldType;;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw new IllegalStateException(\"SubtypeSubtypeSubtype of type \"+_referencedType;;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "throw new IllegalStateException(\"SubtypeSubtypeSubtype = _referencedType;;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "throw new IllegalStateException(\"Type constructor for \"+_referencedType = old;;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "throw new IllegalStateException(\"Type constructor for \"+_referencedType;;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw new IllegalStateException(\"Can not instantiate \"+_Type = = = _referencedType;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old old;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "throw new IllegalStateException(\"Type = = _referencedType;;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "throw new IllegalStateException(\"SubtypeSubtype of type \"+_referencedType = old;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new IllegalStateException(\"Type----Type = _referencedType;;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = value;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "throw new IllegalStateException(\"No---Type = _referencedType;;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw new IllegalStateException(\", _referencedType = old;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "throw new IllegalStateException(\"TypeType = _referencedType;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = = oldType;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "throw new IllegalStateException(\"Typeinging parameterized type = _referencedType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "throw new IllegalStateException(\"Subtype of type \"+_referencedType = = oldType;;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "throw new IllegalStateException(\"Type \"\\ing = _referencedType;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "throw new IllegalStateException(\"TypeType = _referencedType;;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "throw new IllegalStateException(\"Typeing parameterized type, _referencedType = _referencedType;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "throw new IllegalStateException(\"No----Type = _referencedType;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw new IllegalStateException(\"Type type mismatching = _referencedType;;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); }"
    },
    "Bears-181": {
        "fixes": [
            {
                "k": 1,
                "patch": "ResultSet = resultSet.format(size % 2 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s5 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ResultSet = resultSet.format(fromIndex %s5 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ResultSet = resultSet.singleClient.format(fromEntity.class %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 || count.getLong() + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromEntity.next6\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 ) return type;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ResultSet = resultSet.singleClient.format(fromEntity.class %s\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s\", count % 2 != 0 || count.getLong() + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ResultSet = resultSet.singleClient(toJsonArray.class %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ResultSet = resultSet.singleClient.format(fromLong.class %s\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ResultSet = resultSet.format(fromIndex % 2 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLongName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ResultSet = resultSet.singleClient %s\", count % 2 != 0 || count.getLong() + 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 ? count.getLong() : resultSet.nextLongName;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ResultSet = resultSet.Reflect % 2 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ResultSet = resultSet.singleClient( count %s5 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ResultSet = resultSet.singleClient += count %s.format(fromLongName);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromEntity.nextient\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 ? count.getLong() : resultSet.nextLong(0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ResultSet = resultSet.singleClient(fromIndex %s5 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ResultSet = resultSet.singleClient.format(fromLong.class %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s5 != 0 || count %s\", fromClass.getLongName);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ResultSet = resultSet.format(fromIndex % 2 != 0 || count.getLong() + 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ResultSet = resultSet.singleClient(fromIndex %s5 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ResultSet = resultSet.singleClient.format(fromEntity.nextStatement %s\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ResultSet = resultSet.singleClient %s\", count % 2 != 0 || count %s.getLongName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromEntity.nextStatement)[0];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromEntity.nextLocalName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ResultSet = resultSet.singleClient %s.format(fromEntity.nextStatement;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s5 != 0 || count %s.getLong() + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ResultSet = resultSet.singleClient.of(fromIndex %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ResultSet = resultSet.singleClient( count %s5 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ResultSet = resultSet.singleClient(fromIndex %s.format(\" persistent\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ResultSet = resultSet.format(toJsonArray.class %s\", count % 2 != 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ResultSet = resultSet.singleClient.format(fromEntity.nextStatement %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ResultSet = resultSet.Reflect % 2 != 0 || count %s.getLong() + 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ResultSet = resultSet.variableName % 2 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLongName()];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 ) return resultSet.getLongName;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ResultSet = resultSet.format(fromLong.class %s\", count % 2 != 0 || count.getLong() + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s5 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromLongName).getLong\",",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ResultSet = resultSet.singleClient(fromIndex %s5 != 0 || count %s.getLongName);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ResultSet = resultSet.variableName % 2 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromIndex %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLong() + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLong(0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 || count.getLongName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ResultSet = resultSet.Reflect % 2 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s\", fromClass.getLongName);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 ? count.getLongName : resultSet.nextLong(0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromLongName).getLong();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ResultSet = resultSet.singleClient fractionStatement % 2 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromIndex %s\", count, count.getLongName);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s.length + count;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ResultSet = resultSet.format(fromIndex %s5 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ResultSet = resultSet.format(fromIndex %s5 != 0 || count %s.getLong() + 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ResultSet = resultSet.singleClientArray(fromIndex %s\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s\", fromClass.getLongName);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromIndex %s\", count, count);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ResultSet = resultSet.format(fromIndex %s5 != 0 || count %s.getLong\",",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s5 != 0 || count %s.getLong(0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ResultSet = resultSet.Reflect % 2 != 0 || count %s.getLongName() != 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 || count;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ResultSet = resultSet.singleClient(fromIndex %s5 != 0 || count %s.getLong() + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s5 != 0 || count % 2 != 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ResultSet = resultSet.:13 + count %s.format(fromLongName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLongName() != 0) return;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ResultSet = resultSet.singleClient(fromLong.format(\" persistent\", count %s5.getLongName);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ResultSet = resultSet.format(from) % 2 != 0 || count.getLong();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s5 != 0 || count %s.getLongName()",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ResultSet = resultSet.singleClient(fromIndex %s5 != 0 || count %s.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ResultSet = resultSet.Reflect % 2 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromEntity.nextLocalName).getLong();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ResultSet = resultSet.useClient + count %s.format(fromLongName);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ResultSet = resultSet. debugClient.format(fromEntity.class %s\", count;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromEntity.nextStatement;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ResultSet = resultSet.format(Entity.class %s.getLong\", count %s.getLongName);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ResultSet = resultSet.format(from) % 2 != 0 || count.getLong() != 0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ResultSet = resultSet.singleClient fractionStatement %s.format(fromLongName)];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ResultSet = resultSet.format(fromLong.class %s\", count % 2 != 0 || count.getLongName;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ResultSet = resultSet.singleClient.format(fromEntity.nextStatement %s\", count % 2 != 0 ) return resultSet.getLongName);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ResultSet = resultSet.variableName % 2 != 0 || count.getLong() + 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ResultSet = resultSet.format(size % 2 != 0 || count %s.getLongName() + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s, count %s.length];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ResultSet = resultSet.singleClient.format(fromLong.class %s\", count %s, count;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ResultSet = resultSet.format(toClient.class %s\", count % 2 != 0 ) return resultSet.getLongName(0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ResultSet = resultSet.useClient fraction from String.format(from) %s5.getLong\",",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ResultSet = resultSet.singleClient.format(fromIndex %s, count %s.length;",
                "identical": false
            }
        ],
        "buggy_line": "ResultSet resultSet = this.databaseClient.singleUse().executeQuery(Statement.of( String.format(\"select count(*) from %s\", persistentEntity.tableName()))); resultSet.next(); return resultSet.getLong(0);",
        "fixed_line": "Statement statement = Statement.of(String.format( \"select count(*) from %s\", persistentEntity.tableName())); try (ResultSet resultSet = this.databaseClient.singleUse().executeQuery(statement)) { resultSet.next(); return resultSet.getLong(0); }"
    },
    "Bears-222": {
        "fixes": [
            {
                "k": 1,
                "patch": "List<E> v = n;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "List<E> v = i;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "List<E> v = e.get(i);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "List<E> v = a.get(i);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "List<E> v = set.i;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "List<E> v = r.get(i);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "List<E> v =stream.get(i);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "List<E> v = e;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "List<E> vi = e.get(i);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "List<E> vi = r.get(i);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "List<E> n = r.get(i);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "List<E> v = a.get(i) - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "List<E> vi = r.get(i) - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "List<E> vi = set.i;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "List<E> v = r;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "List<E> v = e.i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "List<E> v = 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "List<E> nAdj = r.get(i);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "List<E> v = j;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "List<E> v = label;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "List<E> vi = a.get(i) - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "List<E> v = shape.get(i);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "List<E> vi = a.get(i);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "List<E> v = r.get(i) - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "List<E> v = x.get(i);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "List<E> vi = 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "List<E> v =stream.get(i) - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "List<E> vi = e.get(i) - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "List<E> v = cfg.get(i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "List<E> vi =stream.get(i) - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "List<E> v = 13;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "List<E> v = set.get(i);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "List<E> vi = r;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "List<E> k> vi = e.get(i);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "List<E> vi = a.get(k);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "List<E> vi = height - k;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "List<E> vi =stream.get(i);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "List<E> v = e.get(i) - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "List<E> n = r.get(i).intValue;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "List<E> v = r.get(i).intValue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "List<E> v = convertValue;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "List<E> vi = r.target;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "List<E> result = r.get(i);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "List<E> v = rvalAdj;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "List<E> v =stream.get(i).k;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "List<E> v = - r;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "List<E> n = r.get(i) - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "List<E> v = z;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "List<E> v = reaching;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "List<E> vi =target;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "List<E> v = a.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "List<E> v = 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "List<E> vi = '\" + k;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "List<E> vi = j;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "List<E> nAdj = r.get(i).intValue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "List<E> vi = e;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "List<E> nAdj = r.get(i) - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "List<E> vi = 5 - k;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "List<E> v = a.get(i).intValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "List<E> v = a.get(i + 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "List<E> v = height - k;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "List<E> vi = a.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "List<E> vi = i;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "List<E> vi = r.i;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "List<E> v = a;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "List<E> v = a.get(i).k;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "List<E> v = convert;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "List<E> vi = r.get(i).intValue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "List<E> v = height;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "List<E> vi = set.get(i);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "List<E> v = convertValue.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "List<E> v = value;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "List<E> v = a.get(i;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "List<E> vi = r.left;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "List<E> v = src.get(i);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "List<E> vi = r || k;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "List<E> yAdj = i;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "List<E> v = 3;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "List<E> v = see;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "List<E> v = convert][k;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "List<E> v = a.get(k);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "List<E> v = x.get(i) - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "List<E> v = shape;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "List<E> v = e.get(i).intValue;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "List<E> vi = n;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "List<E> v = <= n;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "List<E> vi = height;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "List<E> v = r.get(i + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "List<E> vi = set.get(i) - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "List<E> v =k;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "List<E> v1 = i;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "List<E> v = cfg;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "List<E> vi = e.get(k);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "List<E> v = volume;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "List<E> k> vi = r.get(i);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "List<E> nAdj = r.length - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "List<E> k> vi = r.get(i) - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "List<E> v =deser;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "List<E> v = '-';",
                "identical": false
            },
            {
                "k": 100,
                "patch": "List<E> vi = v;",
                "identical": false
            }
        ],
        "buggy_line": "List<E> viAdj = adj.get(i); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { V v = ring.get(i); E e = adj.get(i).get(r);",
        "fixed_line": "List<E> viAdj = adj.get(vi); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { if (rng.nextDouble() < p) { V v = ring.get(i); E e = adj.get(v).get(r);"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position >= 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this.positionParameter;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return assert72_MAX_msposition;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return assert72_OF_msposition;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return assert72_OF_msposition + 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return assert72_MAX_msl\", position);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return assert72_OF_msl\", position);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return assert72_OF_msposition + position;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return assert72_MAX_msposition + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk]",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msLeading;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msLeading;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msLeading;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msLeading;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms Index_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msk][0];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return assert72_OF_msA_msk\",ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_msl_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(result.length + 2) + buf.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(result.length + 2 + bufpos;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(result.length + 2 + buf.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(buf.length + 2 + bufpos;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(buf, 3 + buf.length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(buf, 3 + buf.length / 2 + length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(buf + 2) + buf.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(result.length + 2) % 2 + buf.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(result.length + 2)).readableClassBytes;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(result.length + 2) + length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(buf.length + 2) + buf.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(buf.length + 2) % 2 + buf.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(buf.length + 2 + buf.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(result.length + 2 + bufcolumnBytes;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(result.length + 2) 2) + buf.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(result.length + 2 + buf bufpos;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(result + 2) + buf.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(result.length / 2) + buf.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(buf, 3 + buf.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(result.length + 2) > buf.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(buf.length + 2 + length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(result.length + 2) + bufpos + length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(result.length + 2 + buf buf.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(result.length + 2)];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(result.length + 2) * result + buf.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(result.length + 2 * result + buf.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(buf + buf.length / 2 + length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(result.length + 2 + bufpos + length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(result.length / 2 + buf.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(buf.length + 2)).readableClassBytes;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(result.length + 2)).readableClass;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(result.length + 2) + bufpos;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(result.length + 2 + buf bufpos + length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(buf.length + 2 + buf bufpos;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(buf[off + 2), result.length + 2 + bufpos;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(buf[off + 2), result.length + 2 + buf.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(result.length + 2) % 2 + length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(buf.length + 2) + length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(buf + 2) / 2 + buf.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(result.length + 2)).readableClassBytes",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(cw.length + 2) + buf.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(buf + 2) % 2 + buf.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(result.length + 2)).readable result.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(result.length + 2)).readable();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(buf + 2 * result + buf.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(buf.length + 2) % 2 + length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(buf[length + 2 + buf.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(buf.length + 2 * result + buf.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(buf[length + 2 * result + buf.readableClassBytes;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(buf, 3 + buf.length / 2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(buf.length + 2)];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(result.length + 2 + bufpos + 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(buf, 3 + buf.length / 2 + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(result.length + 2) missing minutes + length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(buf.length + 2 * result + bufpos;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(result.length + 2) * result + buf.readableBytes;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(result.length + 2)).readable result result.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(buf[length + 2 * result.readableClassBytes;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(buf, offset + length / 2 + 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(result.length + 2 + bufpos);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(buf + 2) * result + buf.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(buf, offset + length / 2 + buf.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(buf.length + 2 + bufcolumnBytes;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(result.length + 2) 2) + length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(buf + 2) / 2 + length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(buf.length + 2) + bufpos;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(result.length + 2) = result.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(result.length + 2)).readable result result result.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(result.length + 2)).readable result result",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(result.length + 2)).readable result result result",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(buf, 3 + buf.length + 2)];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(result.length + 2) + bufpos + 2 + 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(cw. + 2) + buf.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(buf, 3 + buf.length / 2) + length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(cw.length + 2) + length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(buf + 2 + buf.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(buf + 2);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(buf.length + 2) 2) + buf.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(buf.length + 2 + bufpos + length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(result.length + 2 + bufpos + WORD;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(buf.length + 2) > buf.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(buf, 3 + buf.length + 1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(result.length + 2) + bufpos + 2 + length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(result.length + 2)).readable + buf.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(result.length + 2) / 2 + buf.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(buf + 2) + length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(result.length + 2 + bufcolumnBytes.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(result.length + 2) + bufpos + WORD;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(result.length + 2 + buf bufcolumnBytes;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(result.length + 2 + buf.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(buf.length + 2) = result + buf.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(result.length + 2)).readable result result result result",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(result.length + 2 * result + bufpos;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(result.length + 2) + buf;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(buf + 2) 2) + buf.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(buf[length + 2 * result + buf.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(buf[length + 2 + buf.readableBytes;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(result.length + 2 + buf bufpos + 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(result.length + 2 + bufcolumnBytes.length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(result.length + 2 + length;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-160": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (tokens.cancanObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectType",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndex",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndex",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndex",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndex",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndexIndex",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (tokens.cancanObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectTypeObjectType) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (tokens.cancancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndexIndex",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndexIndex",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndexIndex",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableIndex",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (tokens.cancanTopTopTopTopTopTopTopTopTopTopTopTop Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable VariableBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "tokens.canConsume(\"RESTRICT\");"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType() == 0 && field.isArray() || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldNames.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(field);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType() == 0 && field.getType() == ignored.class;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldIndex);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldNames.getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType() == 0 || field.getType() == ignored.class;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() +\") || ignored.getName();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.contains(field);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"field.getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldNames.getName();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() +\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType() == 0 && field.getType().contains(\"fieldNames +\") || ignored.getName();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"field.getName();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType() == 0 || field.getType() == ignored.getName;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType() == 0 && field.isPrimitive() || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType() == 0 && field.isArray() || fieldNames.contains(field);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType() == 0 && field.getType() == ignored.field;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType() == 0 && field.getType().contains + ignored.getName();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType() == 0 && field.getType().contains(\"fieldNames + ignored.getName();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType() == 0 || field.getType() != ignored.isArray();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldPair.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType() == 0 && field.isArray() || field.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType() == 0 || field.getType() != object || ignored.contains(field);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType() == 0 && field.isArray() || ignoredNames.contains(\"field.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldTypes);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType() && field.isPrimitive() || fieldNames.contains(field);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType() == 0 && field.getType().contains(\"fieldNames + query.getName();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType() == 0 || field.getType() != ignored.class;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType() == 0 && field.getType() == ignored.isArray;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType() == 0 && field.getType().containsArray();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldTypes.getName());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.contains(fieldPair.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() +\")\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() +\")",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType() == 0 && field.isArray() && ignored.contains(fieldNames);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType() == 0 && field.isArray() || ignoredNames.contains(fieldIndex);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field +\") || ignored.getName();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType() == 0 && field.isArray() || ignoredNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.containsAllUnknown;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"field\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType() == 0 && field.isArray() && ignored.contains(field);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType() == 0 || field.getType() != object || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType() == 0 && field.isPrimitive() || ignoredNames.contains(\"field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\" @fieldNames.getName();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType() == 0 || field.getType() != object || ignored.containsAllUnknown;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType() == 0 && field.getType().contains(\"fieldNames.getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType() == 0 && field.isArray() || field.contains(\"fieldNames.getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.containsAllNames.getName();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldTypes.getName();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName()+\") || ignored.getName();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType() == 0 || field.getType() == ignored.field;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType() == 0 && field.isPrimitive() || fieldNames.contains(field);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType() == 0 || field.getType() != Token.GETPROP || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType() && field.isPrimitive() || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType() == 0 && field.isArray() && fieldNames.contains(field);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType() == 0 && field.getType() == m.getNamegetName;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldAttributes.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\" @fieldNames.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType() == 1 && field.isArray() || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType() == 0 || field.getType() != MAX_LINE || ignored.contains(field);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType() == 0 && field.isArray() && ignored.contains(fieldNames.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType() == 0 && field.getType() == ignored.isArray &&",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType() == 0 && field.isArray() || field.contains(\"fieldNames.getName();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldDelegate.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.contains(fieldTypes);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType() == 0 && field.isArray() || fieldNames.contains(fieldIndex);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType() == 0 && field.getType().contains(fieldNames + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType() == 0 && field.getType() == m.getName;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType() == 0 || field.getType() || ignored.isArray();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"field classNames.getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType() == 0 || field.getType() || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(fieldSource);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType() == 0 || field.getType() == Object.class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.containsAllUnknown;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() + 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType() == 0 && field.getType().contains(field);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.containsAll(field);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return fieldNames.getType() == 0 && field.isArray() || ignored.contains(field);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() +\") || ignored.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"fieldts\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType() == 0 && field.getType() == ignored.isArray && field.getName();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field1.getType() == object || field.getType() != object && ignored.contains(field);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType() == 0 && field.isArray() && ignored.contains(fieldIndex);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType() == 0 || field.getType() || ignored.isArray;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field\".\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType() == 0 && field.getType() == ignored.isArray && ignored.getName();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType() == 0 && field.getType().contains(\"field.getName() +\") || ignored.getNamegetName();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType() == 0 || field.getType() != object && ignored.contains(fieldSource);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType() == 0 || field.getType() != field.getName;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType() == 0 || field.isArray() || ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType() == 0 || field.getType() != info.field;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"field\".\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType() == 0 || field.getType() != ignored;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType() == 0 && field.isArray() || ignored.contains(\"field'",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (_inputPtr >= len) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (_cfgNumbersAsStrings || c == '}') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (_enumCount == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (_inputPtr >= end) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == '}') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (_inputPtr >= len && c <= ' ') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == '}",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (_cfgNumbersAsStrings || c == ' ')') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (_attributeCount == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_KEY_AS_LONGS) >= 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index - 1) == '}') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (_inputPtr >= _config.length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == ']') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (_inputPtr >= 0 && c <= ' ') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == ' ');",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (_inputPtr >= len && c != ' ')') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (_enumCount == 1 && c.charAt(0) == ' ')') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_KEY_AS_NULL) >= 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRINGS_AS_NULL_FOR_OBJECT) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index - 1) == ']') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(offset) == ' ') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (_inputPtr >= rect.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_negative) >= 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == '0') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (_enums.charAt(0) == ' ') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_FOR_EMPTYS) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == ' ')",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (_cfgNumbersAsStrings.length == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1) == '}') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(0) == '}') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (_inputPtr >= Collection.length) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == '\\0') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)+\"'",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) ==Line;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (_inputPtr >= len && c <= '}') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_ON_FOR_AS_NULL) >= 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(0) == ' ') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_FOR_OBJECT) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (_inputPtr >= _mainHash.length) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (_enumCount == 1 && c c = value;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (_enumCount == 1 && c.charAt(0) == '}') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index)) == ' ') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_AS_LONGS) >= 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRINGS_AS_NULL_FOR_LENGTH) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (_typeDeserializer == TYPE_OBJECT) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRINGS_AS_BOTH_FOR_LENGTH) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (_inputPtr >= 0 && c <= '}') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == ']';",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (_enumClass.charAt(0) == ' ')') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (_inputPtr >= Integer.MIN_VALUE_LENGTH) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_KEY_AS_LONG) >= 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (_inputPtr >= _config.length && c != ' ')') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_FOR_INTS) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == 4;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (_enumCount == 1 && c = value;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (_attributeCount == 0) { // first spill over?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_ON_FOR_PIS_AS_NULL) >= 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (_inputStart >= 0 && c <= ' ') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)Start);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1) variable_AS_LONGS) >= 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_AS_NULL_FOR_LENGTH) >= 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)-bitIndex) >= 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)-bitIndex) >= 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (_enumCount == 1 && c >= ' ')';",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_FOR_AS_NULL) >= 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (_enumClass.charAt(0) == ' ') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (_attributeCount == 0 && name.charAt(0) == ' ')') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (_inputPtr >= len && c.length) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (_enums.charAt(value-1)==S_PER_SEGMENT) >= 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) ==Line') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == '\\r') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1) == ' ') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index)) == '}') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1) == ' ') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (_inputPtr >= 0 && c.length) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRINGS_AS_NULL_FOR_OBJECT) >= 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_FOR_LENGTH) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length-1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (_enums.charAt(0) == ' ')') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (_inputPtr >= 0 && c <= 'context') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (_attributeCount == 0 && name.charAt(0) == '}') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)End;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (_inputPtr >= >= len) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (_inputPtr >= _config.length && c <= ' ') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (_inputPtr >= len && c.charAt(0) == ' ')') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (_inputPtr >= len && c <= 'z') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1).length-1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1) variable_AS_NULL) >= 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRINGS_AS_BOTH_FOR_EMPTYS) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (_inputPtr >= 0 && c <= ']') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (_enumDeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_FOR_OBJECT) >= 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)_KEY_AS_LONG_SIZE) >= 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (_enumDeserializer == 1 && c.charAt(0) == ' ')') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (_typeDeserializer == TYPE_ARRAY) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (_inputPtr >= >= len && c <= ' ') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (_cfgNumbersAsStrings.charAt(index+1)+\"' // value first",
                "identical": false
            }
        ],
        "buggy_line": "} else { // [databind#149]: Allow use of 'String' indexes as well char c = name.charAt(0); if (c >= '0' && c <= '9') { try { int index = Integer.parseInt(name); if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\" ); }",
        "fixed_line": "} else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)"
    },
    "Bears-224": {
        "fixes": [
            {
                "k": 1,
                "patch": "Object source = target == null ? Value.apply_VALUE : p.empty;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Object source = target == null ? Value.apply(target) : target;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Object source = target == null ? Value.apply_VALUE : p;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Object source = target == null ? Value.apply(target) : Value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Object source = target == null ? Value.apply;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Object source = target == null ? Value.apply() : p;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Object source = target == null ? Value.apply_DEFAULT : p;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Object source = target == null ? Value.apply(source) : Value;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Object source = target == null ? Value.apply(target) : p;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Object source = target == null ? Value. partial : p;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Object source = target == null ? Value.apply() : input;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Object source = target == null ? Value.apply : p;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Object source = target == null ? Value. getG : p;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Object source = target == null ? ValueUtils.apply(source) : Value;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Object source = target == null ? ValueUtils.apply(target) : Value;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Object source = target == null ? Value.source : p;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Object source = target == null ? Value.apply_VALUE : target;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Object source = target == null ? Value.apply() : target;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Object source = target == null ? Value.apply(target) : input;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Object source = target == null ? ValueUtils.apply(target) : target;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Object source = target == null ? Value.new Value(target) : p;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Object source = target == null ? Value.apply || p.empty == Value;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Object source = target == null ? p.source : target;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Object source = target == null ? Value.apply || p.empty;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Object source = target == null ? p.source : Value;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Object source = target == null ? Value.apply_VAR : p;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Object source = source.value == null ? p : target.empty;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Object source = target == null ? p.source : target.empty;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Object source = target == null ? Value.left;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Object source = source.source;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Object source = input == null ? Value.apply(target) : target;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Object source = target == null ? p.source : input;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Object source = target == null ? Value.apply\" : target.empty;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Object source = target == null ? Value.target : target;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Object source = target == null ? Value.apply(target) : ValueClass;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Object source = target == null ? Value.new Value() : p;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Object source = target == null ? Value.source : target;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Object source = target == null ? p.source;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Object source = target == null ? ValueUtils.apply(target) : p;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Object source = target == null ? \"\" : target.empty;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Object source = source;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Object source = target == null ? Value.of;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Object source = target == null ? Value.apply() : Value;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Object source = target == null ? Value. getG : target;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Object source = target == null ? Value.apply || p.empty == null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Object source = target == null ? Value.apply_MATCH : target;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Object source = target == null ? Value.apply(target) : ValueGenerator;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Object source = target == null ? Value.apply_UNINITIALIZED : target;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Object source = target == null ? Value.apply(source) : ValueClass;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Object source = target == null ? Value.apply_UNINIT_VALUE : p.empty;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Object source = target == null ? Value.apply_VALUE : target.empty;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Object source = target == null ? Value.apply_STATIC : p;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Object source = target == null ? Value.instance : p;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Object source = target == null ? Value.apply(target) : ValueUtils.empty;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Object source = target == null ? Value.apply_UNINITIALIZED : p;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Object source = target == null ? Value.URL : p;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Object source = target == null ? Value.target : p;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Object source = target == null ? Value.methods : p;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Object source = target == null ? Value. 24 : target.empty;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Object source = target == null ? Value.apply(source) : target;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Object source = target == null ? Value.commons : p;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Object source = source.value == null ? p.length() : target;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Object source = target == null ? Value.new Value(target) : target;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Object source = p == null ? Value.apply(target) : target;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Object source = target == null ? Value. partial : target;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Object source = source.value == null ? p : target;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Object source = target == null ? Value.applyPeriod(target) : Value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Object source = target == null ? default.source : target;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Object source = source.target == null ? 1 : target.empty;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Object source = target == null ? Value.HORIZONTAL : target.empty;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Object source = target == null ? Value. Class_VALUE : p.empty;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Object source = target == null ? ValueUtils.apply(source) : ValueClass;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Object source = target == null ? Value.apply_UNINIT_VALUE : p;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Object source = target == null ? Value.apply || p.empty) : Value;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Object source = target == null ? Value. Class_VALUE : p;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Object source = target == null ? Value.registry : p;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Object source = target == null ? Value. End : input;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Object source = target == null ? Value. 24 : p;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Object source = target == null ? Value.apply(superclass) : Value;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Object source = target == null ? Value.applyPeriod(target) : target;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Object source = target == null ? Value.apply : target;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Object source = target == null ? Value.apply_TYPES : p;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Object source = target == null ? Value.apply_ATIC : p;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Object source = target == null ? Value.apply\" : target;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Object source = target == null ? Value.apply_VAR : p.empty;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Object source = target == null ? Value.apply_MATCH : p;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Object source = target == null ? Value. done : p;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Object source = target != null ? p.source : Value;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Object source = target == null ? Value.apply_VARIABLE : p;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Object source = target == null ? Value. zero.empty : target;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Object source = target == null ? Value.apply(source) : ValueGenerator;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Object source = target == null ? Value.SIZE : p;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Object source = target == null ? Value.apply(source) : p;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Object source = target == null ? ValueUtils.apply(source) : target;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Object source = source.target == null ? Value.empty : target;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Object source = target == null ? Value.() : p;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Object source = target == null ? Value.HORIZONTAL : target;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Object source = target == null ? Value.apply(source) : input;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Object source = target == null ? Value.apply(target) : this.source;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Object source = target == null ? Value.apply || p.empty.empty;",
                "identical": false
            }
        ],
        "buggy_line": "Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty();",
        "fixed_line": "try { Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty(); } catch (Exception ex) { return Value.empty();"
    },
    "Bears-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "BeanSerializerMap.SerializerAndMap(type, provider, _valueSerializer) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "BeanSerializerMap.SerializerAndMap {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "JsonSerializer<?> result = map.Serializer;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "StackSerializerMap.SerializerAndMap(type, provider, _valueSerializer) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "JsonSerializer<Object> result = map.findAndProperty(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "BeanProperty.Std result = map.findAndSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _valueSerializer)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "JsonSerializer<?> result = map.get(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "JsonSerializer<?> result = map.findAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "BeanProperty.Std result = map.findAndAddSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "StackSerializerMap.SerializerAndMap(type, provider, _valueSerializer)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "JsonSerializer<Object> result = map.findAndProperty(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "BeanProperty.Std result = map.findAndSerializer(type, provider, _valueSerializer)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "BeanSerializerMap.SerializerModifierModifier(type, provider, _valueSerializer) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _typeSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "JsonSerializer<?> result = map.findAndHandler(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializer);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider,",
                "identical": false
            },
            {
                "k": 44,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndProperty(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerMapMap);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "JsonSerializer<Object,Object> result = map.findAndProperty(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "BeanSerializerMap.SerializerAndMap(type, provider, _valueSerializer)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findAndProperty(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _typeSerializerMap) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializer);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "JsonSerializer<Object,Object> result = map.findAndProperty(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "BeanSerializerMap.Serializer<Object,Object> result = map.findAndProperty(type, provider, _property);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "JsonSerializer<?> result = map.findAndSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findAndProperty(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "JsonSerializer<?> result = map.findAndProperty(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "JsonSerializer<?> result = map.findAndAddSerializer(type, provider, _valueSerializer) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndProperty(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Shape Shape result = map.findAndSerializer(type, provider, _valueSerializer)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializer)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerMapMap);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializerMapMap);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "BeanSerializerMap.Serializer<Object,Object> result = map.findAndProperty(type, provider,",
                "identical": false
            },
            {
                "k": 88,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializerSerializer);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "JsonSerializer<Object> result = map.findAndProperty(type, provider, _typeSerializerMap)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMap);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "JsonSerializer<?> result = map.findAndSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider,",
                "identical": false
            },
            {
                "k": 95,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerMapMapMap) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializer);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenode = map.findAndSerializer(type, provider, _typeSerializerSerializerMapMap) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _typeSerializerSerializerSerializer);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "JsonSerializerMap.Serializernodenodenodenodenodenodenodenodenodenodenode = map.findSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private private staticSerializerMapMap.SerializerAndMap {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError... if (type == Object.class) { // basically just need to call `toString()`, easiest way: JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type); _dynamicSerializers = map.newWith(type, ser); return ser; }"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return uri.of;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return uri.of.getHost(), uri;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return uri.ofId;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return uri.of.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return uri.ofInstance;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return uri.of(uri);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return uri.ofInstance.getHost(), uri;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return uri.ofors.getHost(), uri;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return uri.of(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return uri.ofId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return uri.of.getDown(), uri.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return uri.of.getHost(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return uri.of.getHost(),",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return uri.of String.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return uri.ofMillisecond.getHost(), uri;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return uri.of.get greater(), uri.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return uri.ofUR(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return uri.ofInstance.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Blob.ofId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return uri.ofulInstance.getHost(), uri;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return uri.ofFirst(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return uri.ofWeeks.getHost(), uri;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return uri.of.getHost(), uri.length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return uri.ofId.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return uri.of.getupper(), uri.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return uri.of.getDown(), uri;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return uri.ofMethod.getHost(), uri;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return uri.of String.getHost(), uri;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return uri.of Transform(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return uri.ofa.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return uri.of.getHost(), uri.getVALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return uri.of.getHost(), uri.get >= URI;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return uri.ofSuper(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return uri.ofors.getHost(),",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return uri.ofMapping.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return theory.ofId.getHost(), uri;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return uri.of(uriId);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return uri.ofMapping.getHost(), uri;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return uri.of.getHost(), uri.get >=Opts.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return uri.ofa.getHost(), uri;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return uri.of<?, uri.getHost(),",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return uri.ofingMode.getHost(), uri;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return uri.ofRange(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return uri.of.getbuild(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Blob.ofId.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return uri.ofors.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return uri.of.getend(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return uri.ofulInstance.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return uri.ofMethod.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return uri.of.getHost(), uri.get >=",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return uri.of.getComponent(), uri.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returnarguments.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return uri.of.getHost(), uri.length);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return uri.of.getValid(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return uri.of.getContain(), uri.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return uri.of.getHost(), uri.get >= visited;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return uri.ofMillisecond.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return uri.of.get REG(), uri.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return uri.of2(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return uri.of.getbuild(), uri.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return uri.of.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return uri.ofIO.getHost(), uri;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return uri.of.getHost(),ators.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return theory.ofId.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return uri.ofingMode.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return uri.of(), uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return uri.of.getiate(), uri.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return uri.ofType.getHost(), uri;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return uri.ofAxis(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return uri.of unknown(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return uri.of.getset(), uri.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return uri.of.getupper(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return uri.of.getHost(), bufferPath;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return uri.of.get minor(), uri.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return uri.ofA.getHost(), uri;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return uri.ofIO.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return uri.ofA.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return uri.of.getHost(), uri.getVars();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return uri.of[0].getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return uri.of.get basePath(), uri.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return uri.of.get REG(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return uri.of.getTo(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return uri.of.getHH(), uri.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return uri.of.getPred(), uri.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return uri.ofInstance.getHost(),",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return uri.of.get dom(), uri.getHost(),",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return uri.ofors;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return uri.of.get CONF(), uri.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return uri.ofFirst(), uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return uri.of.getParams(), uri.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return uri.of.get 5.0(), uri.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return uri.of || uri.getHost(),",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return uri.ofType.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return uri.of.getAbsolutePath(), uri.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return uri.of.getHost(), uri.get >=69;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return uri.of.getupper(), uri;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return uri.of.getHost(), uri.get greaterId;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return uri.of.getHost(), uri.array;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return uri.of.getLe(), uri.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return uri.of.getHost(),Tick;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-110": {
        "fixes": [
            {
                "k": 1,
                "patch": ".any(0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".anySYNTHETIC;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".any inner\") .any();",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".anyShapeVisible() .defaultEnd;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".any inner\") .anySYNTHETIC;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".anyRecIdx <= 0) .util.numberOfValid;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".anyShape() .defaultEnd;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".anyEnd() .defaultImpl;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".anyPER_or(numberOfArgs).any();",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".any}",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".anyShape();",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".anyEnd() .inject;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".anyShapeFilled(numberOflines).any();",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".anyEnd() .defaultImpl();",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".anyEnd() .defaultdefaultEnd;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".anyRecIdx <= 0) .util.numberOf;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".anyShapeFilled(numberOfArgs).any();",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".anySYNTHETIC_ .anySYNTHETIC;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".any inner\") .any(0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".anyEnd() .defaultEnd;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".any inner\") .anyShape;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".anyPER_or(numberOflines).any();",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".anyShape\")) .util.numberOfValid;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_MOTYPE).any();",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".anyode;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".anyRecIdx : 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_PROPERTY_MOTYPE).any();",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_MOTYPE_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".anyBuilder() .defaultEnd;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".anyRecIdx;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_SYNTHETIC_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".anyRecIdx <= 0) .inject;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".anySYNTHETIC_LOAD_).any();",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".anyPER_MIN_VALUE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".anyRecIdx <= 0) .i;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".anyShapeFilled(numberOfFAST_L_MOTYPE_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".anyRecIdx/or;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".anyShape;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".anyEnd() .escape;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN).any();",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_Lineno) .infer();",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".anyShapeVisible() .hi;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_MOTYPE_WITH_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_ outline_MOTYPE_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".anyShapeFilled(numberOfFAST_INT_L).any();",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".anyIVE_or;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".anyPER_or;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_SYNTHETIC_MAX_VALUE).",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".anyEnd() .defaultdefaultImpl;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_Lineno).any();",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_SYNTHETIC_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_L_MOTYPE).any();",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".anyStrings() .defaultEnd;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".anyShapeFilled(numberOfFAST_Lineno).any();",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_MILLIS_MAX_SIZE).any();",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".anySYNTHETIC_LOAD_FACTOR .anySYNTHETIC;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".anyShapeFilled(numberOfFAST_L_MOTYPE).any();",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".anyShapeFilled(numberOfFAST_L_ized).any();",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".anySYNTHETIC_ .any();",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".anyShapeFilled(numberOfFAST_L_MUST_LINE_LENGTH).any();",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_WITH_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".anyRecIdx <= 0) .util.numberOf_L;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".anyShapeFilled(numberOfFAST_L_CHAIN_LENGTH).any();",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_WITH_MAX_SIZE).any();",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".anyPER_or(numberOfFAST_CACHE_L).any();",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".any()._or;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".anySYNTHETIC_LOAD_MINIMUM_LINE_INSTANCE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".anyShapeFilled(numberOfFAST_INT_Lineno).any();",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_ineno).any();",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_MOTYPE_ outline_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".anyFunction() .defaultdefaultEnd;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".anySYNTHETIC_LOAD_MINIMUM_LINE_LENGTH).any();",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".anyPER_or(numberOfThis).any();",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_Lineno) .defaultEnd;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".anyps().any(0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_MOTYPE_WITH_MAX_SIZE).any();",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".anyShape() .defaultdefaultEnd;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_ds).any();",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".anyPER_or(numberOfFAST_CACHE_SIZE) .defaultEnd;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".anyFunction() .defaultEnd;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_L).i();",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".anySYNTHETIC_LOAD_INSTANCE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_MILLIS_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_PROPERTY_MOTYPE) .defaultEnd;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_ outline_MOTYPE_Lineno).any();",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".anyShapeFilled;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_ outline_MAX_VALUE).any();",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".any() .defaultdefaultEnd;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".anyShapeFilled(numberOfS).any();",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".any inner\") .anyShape();",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_SIZE) .defaultEnd;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".anyShapeFilled(numberOfS)._ARGUMENT_EXCEPTION;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_DEPRECATED;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".anyRecIdx <= 0) .util.numberOf._anyBR;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_Lineno) .",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".anyEnd() .hi;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".anyPER_or(numberOfArgs).i();",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".anyShapeFilled(numberOfFAST_L_PLAIN_PROTOTYPE_WITH_MAX_SIZE).",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".anyShapeFilled(numberOfFAST_CACHE_PROPERTY_MOTYPE).",
                "identical": false
            }
        ],
        "buggy_line": ".any()",
        "fixed_line": ".expression(\",.*\") .or() .text(\"#\")"
    },
    "Bears-151": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (value instanceof String) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (subname.put(sourceName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (sub.value instanceof String) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (subname.put(sourceName, String.valueOf(value) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (subname.put(sourceName, String.valueOf(value) != String.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (subname.put(sourceName, String.valueOf(value) == String.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (preserve.put(name, valuePrefix).string == String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (subname.put(sourceName, String.valueOf(value) : String.valueOf(sourceName;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (preserve.put(name, valuePrefix).valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (preserve.put(name, valuePrefix).valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) : String.valueOf(value);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (subname.put(sourceName, String.valueOf(name) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (subname.put(sourceName, String.valueOf(name) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (subname.put(sourceName, String.valueOf(value) != String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (subProperties.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) != String.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(name) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (name.put(sourceName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (subname.put(sourceName, String.valueOf(value) : String.valueOf(source);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (subname.put(sourceName, String.valueOf(value)[0];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (sourceFilePrefix.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.put(sourceName, String.valueOf(value) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (subtitle.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (sub + String.valueOf(sourceName, String.valueOf(name) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) != String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (sublabel.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) != String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) : String.valueOf(shapePrefix;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (subtitle.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (subname.put(sourceName, String.valueOf(dataElement) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (subProperty.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(dataElement) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (subProperty.put(name, valuePrefix).valueOf(sourceName, String.valueOf(name) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (subname.put(sourceName, String.valueOf(superName) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) : String.valueOf(name) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(value) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(source);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) : String.valueOf(name);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (subname.put(sourceName, String.valueOf(value) == String.BLOCK) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name.put(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (subname + String.valueOf(sourceName, String.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (subname.put(sourceName, String.valueOf(value)+\" = value;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (preserve.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (sourceFilePrefix.put(name, String.valueOf(sourceName) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (subgraph.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (sub != String.class, value = String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) : String.valueOf(sourceName;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (subProperty.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (subname.put(sourceName, String.valueOf(subrangeName) != String.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName)[0];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (sub == String.class, value = String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (preserve.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (subname.put(sourceName, String.valueOf(shape.subrangePrefix) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (subname.put(sourceName, String.valueOf(subrangeName) : String.valueOf(value);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (subname.put(sourceName, String.valueOf(minName) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (subProperty.put(name, valuePrefix).valueOf(sourceName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (subProperties.put(name, valuePrefix).valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (subProperties.put(name, String.valueOf(sourceName) != String.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (name.put(sourceName, String.valueOf(value) == String.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (source.value instanceof String) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (subname.put(sourceName, String.valueOf(value) == String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (subgraph.put(name, valuePrefix).valueOf(sourceName, String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (sub + String.valueOf(sourceName, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (preserve.put(name, valuePrefix).valueOf(sourceName,",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) != String.valueOf(value);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (subute.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(attrib) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (subname.put(sourceName, String.valueOf(shape.subrangeName) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(shapePrefix) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (subrangePrefix.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (subname.put(sourceName, String.valueOf(value) }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (subtitle.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(shape.value) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (subProperties.put(name, String.valueOf(sourceName) != String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (sub + String.valueOf(sourceName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(name) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (subname.put(sourceName, String.valueOf(value) ) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (subname.put(sourceName, String.valueOf(shape.subrangeName) != String.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) == String.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(shape.name) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (preserve.put(name, value = String.valueOf(sourceName) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (sourceName instanceof String) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (subProperty.put(name, valuePrefix).valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(shape.value) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(value) != String.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (subPropertyNames.put(name, String.valueOf(sourceName) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (subProperties.put(name, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(sourceName) : String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(Iteration) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (sublabel.put(name, valuePrefix).valueOf(sourceName, String.valueOf(superName);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (subname + String.valueOf(sourceName, String.valueOf(sourceName) : String.valueOf(value);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (preserve.put(name, valuePrefix).string == String.valueOf(sourceName);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (subname.put(sourceName, String.valueOf(sourceName) != String.valueOf(name) {",
                "identical": false
            }
        ],
        "buggy_line": "if (value instanceof String) { subProperties.put(subName, String.valueOf(value)); }",
        "fixed_line": "subProperties.put(subName, String.valueOf(value));"
    },
    "Bears-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt..0,",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt..0,.0,",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id id",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id id",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id id id",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt..0,.0,.0,",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id id id",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt..0,",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id id",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that is ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt..0,.0,",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt type id id",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that that that that that that that that that ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt ctxt..0,",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "} else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } }"
    },
    "Bears-183": {
        "fixes": [
            {
                "k": 1,
                "patch": "return queryClassAll(pageable, pageableValue, null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return queryClassAll(pageableValues, baseUri, null);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return queryClassAll(pageableClass, pageableValue, null);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return queryClassAll(pageable, pageable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return queryClassAll(pageableClass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return queryClassAll(pageable, pageableClass, null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return queryClassAll(pageable, pageableValues, null);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return queryClassAll(pageableValue, baseUri, null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return queryClassAll(pageableRaw, pageableValue, null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return queryClassAll(pageableClass, pageableClass, null);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return queryClassAll(pageableClass, pageable);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return queryClassAll(pageableValues, pageable);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return queryClassAll(pageableValue, property, null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return queryClassAll(pageableClass, pageableStrings, null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return queryClassAll(pageableValues, pageableValue, null);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return queryClassAll(pageableType, pageable);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return queryClassAll(superclass, pageableClass, null);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return queryClassAll(pageable, pageableStrings, null);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return queryClassAll(pageable, pageableType, null);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return queryClassAll(superableClass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return queryClassAll(pageable count, pageableValue, null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return queryClassAll(pageableClass, baseUri, null);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return queryClassAll(pageableClass, pageableType, null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return queryClassAll(pageableValues, null, null);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return queryClassAll(pageableBlockSize, pageableClass, null);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return queryClassAll(pageableValues, pageableClass, null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return queryClassAll(pageableType, pageableValue, null);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return queryClassAll(pageable, baseUri, null);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return queryClassAll(pageable count, new PageableClass, null);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return queryClassAll(pageableBlockSize, pageableValue, null);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return queryClassAll(pageablein, pageableClass, null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return queryClassAll(pageableDeclared, pageableValue, null);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return queryClassAll(pageableValue, property, typeable);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return queryClassAll(pageable, pageable[0];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return queryClassAll(pageable, pageableBuilder, null);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return queryClassAll(superableClass, pageableValues);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return queryClassAll(superableClass, pageableValue, null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return queryClassAll(pageable count, pageableClass, null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return queryClassAll(pageableValues, baseClass, null);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return queryClassAll(pageableRaw, pageableValues, null);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return queryClassAll(superclass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return queryClassAll(pageableClass, pageableBuilder, null);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return queryClassAll(pageable, type, null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return queryClassAll(pageableSize, pageableValue, null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return queryClassAll(pageableValues, baseUri, null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return queryClassAll(pageable, pageableDef, null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return queryClassAll(pageable lex, pageableValue, null);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return queryClassAll(pageableValues, pageableValues, null);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return queryClassAll(pageableType, baseUri, null);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return queryClassAll(pageableType, null, null);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return queryClassAll(pageableChildren, pageable);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return queryClassAll(pageableRaw, pageableClass, null);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return queryClassAll(pageableimiters, pageableValue, null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return queryClassAll(pageable, pageableBlockSize, null);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return queryClassAll(pageableRaw, pageable);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return queryClassAll(pageable don, pageableValue, null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return queryClassAll(pageable count, pageableValues, null);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return queryClassAll(pageableDeclared, pageableClass, null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return queryClassAll(pageableClass, pageableBlockSize, null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return queryClassAll(pageable, property, null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return queryClassAll(pageableroutine, pageableValue, null);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return finalTextAll(pageableClass, pageableClass, null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return queryClassAll(pageableValue, info, null);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return queryClassAll(pageablein, pageableValue, null);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return queryClassAll(pageableDeclared, pageableValues, null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return queryClassAll(pageableValue, isExtern, null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return queryClassAll(superclass, pageableValue, null);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return queryClassAll(pageableBlockSize, pageableValues, null);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return queryClassAll(pageable count, baseUri, null);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return queryClassAll(pageableType, pageableClass, null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return queryClassAll(pageableValues, typeable);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return queryClassAll(pageableChildren, pageableValue, null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return queryClassAll(pageable, pageable count, null);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return queryClassAll(pageableClass, pageableDef, null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return queryClassAll(pageableableClass, pageableValue, null);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return queryClassAll(pageableValues, finalText, null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return queryClassAll(pageable, pageableBlock, null);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return queryClassAll(pageable, second, null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return queryClassAll(pageableDeclared, pageable);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return queryClassAll(pageableableClass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return queryClassAll(pageableClass, pageable[0];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return queryClassAll(pageable, pageableCondition, null);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return queryClassAll(pageableValues, millis, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return queryClassAll(pageableClass, property, null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return queryClassAll(pageablein, property, null);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return queryClassAll(pageableBlock, null, null);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return queryClassAll(pageableValue, null, null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return queryClassAll(pageableBlockSize, pageable);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return queryClassAll(pageable, finalText, null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return queryClassAll(pageableClass, type, null);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return queryClassAll(pageable, HOUR, null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return queryClassAll(pageable, null, null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return queryClassAll(superableClass, pageable);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return queryClassAll(pageableValues, null,",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return queryClassAll(pageableValues, pageable[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return queryClassAll(pageable count, pageable);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return queryClassAll(pageable, m, null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return isAllClass(superclass, pageableValues);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return queryClassAll(pageableClass, pageableValueId, null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return queryClassAll(pageableType, property);",
                "identical": false
            }
        ],
        "buggy_line": "return queryAll(entityClass, pageable, null);",
        "fixed_line": "return queryAll(entityClass, pageable, new SpannerQueryOptions() .setOffset(pageable.getOffset()).setLimit(pageable.getPageSize()));"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = l << 8 | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = l << 8 - a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = r << 8 - a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = l << rval - a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = r << 32 | a[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = r << 8 | a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = l << 7 + a[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = l << 48 | a[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = l << rs | a[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = r << 8) | a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = l << Bias | a[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = l << Bias - a[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = l << Bias + a[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = r << 48 | a[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = l << 8 + a[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = r << 7 + a[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = l << 48 | size[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = l + 13 - a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = l << 3) | a[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = l + i -l | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = l << 48 | b[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = l << power | a[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = l + OBJECT | a[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = r << rval - a[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = l << 6 | a[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = l - r[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = r << 4) | a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = l << i - a[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = l << rval + a[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = r << 3) | a[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = l >>> 8 - a[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = l -l | a[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = l << 2 | b[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = l -l |a[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = size << 8) | a[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = l <<Deser + a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = l << Ba - a[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = l << 8] - a[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = l << Ba | b[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = l << BULB | a[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = lval - a[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = l << 8) | c[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = l << 48 | r[i];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = l << 7 | a[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = l << BULB | cw[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = r << 2 | a[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = l << 8) | b[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = l << RUN - a[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = l << 4) | a[i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = l + i - a[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = l << 7 - a[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = l -l << a[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = l << r | a[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = labels -l | a[i];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = l +\"), - a[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = l << i | a[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = l << 2 | a[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = l << 3) + a[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = r << 8 + a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = l << 6) | a[i];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = r << 24 + a[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = l << 32 | a[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = r << power | a[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = l +Tick - a[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = l + 6 - a[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = r << i | a[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = l -l << power[i];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = l << 13 - a[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = l << 9 | a[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = l << 48 | size;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = r << i - a[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = l << limited | a[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = l << 1)) | a[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = r << 3 | a[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = l << happen | a[i];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = r << expand - a[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = l <<Node | a[i];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = l + 8) - a[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = l << Node | a[i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = r << 32 | l[i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = l << Bias + i - a[i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = l + r[i];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = l + byte[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = l + labels[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = l << BULB | b[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = l - r << 8];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = l - r r[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = l << 7 + 2];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = r << 8) | i;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = -l << a[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = l << BULB |$ - a[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = l << BULB | OBJECT | a[i];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = l << Bias + i];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = l << 8) | i;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = l + rval[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = l << arr[i];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = l << rval[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = l << rs[i];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = l << BULB | (a[i];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encrypted = request;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encrypted = requestOrder.getEncrypted();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encrypted = requestfa.getEncrypted();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encrypted = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encrypted = requestCLs.getEncrypted();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encrypted = request.getEncrypted;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encrypted = requestType.getEncrypted();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encrypted = requestOrder.getEncrypted;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encrypted = request Pointer;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encrypted = request cw.getEncrypted();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encrypted = requestfaWith.getEncrypted();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encrypted = requestTimeZone.getEncrypted();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encrypted = requestSegment.getEncrypted();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encrypted = request > request;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encrypted = requestfa.getEncrypted;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encrypted = requestg.getEncrypted();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encrypted = requestas.getEncrypted();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encrypted = request isEmpty.getEncrypted();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encrypted = requestfa.getGroup();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encrypted = requestExpression.getEncrypted();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encrypted = requestCLs.getGroup();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encrypted = request location.getEncrypted();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encrypted = request >replaceAll.getEncrypted();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encrypted = requestdelta;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encrypted = request others.getEncrypted();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encrypted = requestRen.getEncrypted();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encrypted = requestfa.getViews();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encrypted = requestParent.getEncrypted();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encrypted = request request;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encrypted = request location;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encrypted = request",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encrypted = requestCLs.getEncrypted;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encrypted = requestAnalyzer.getEncrypted;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encrypted = requestBlock.getEncrypted();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encrypted = requestLog.getEncrypted();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encrypted = requestCLs.getViews();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encrypted = request TreeNode.getEncrypted();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encrypted = requestAnalyzer.getViews();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encrypted = requestio.getEncrypted();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encrypted = requestreplaceAll.getEncrypted();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encrypted = request.getGroup();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encrypted = requestForce;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encrypted = requestManager.getEncrypted();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encrypted = requestTable.getEncrypted();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encrypted = requestbalancer.getEncrypted();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encrypted = requestBuilding.getEncrypted();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encrypted = request > request.getEncrypted();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encrypted = requestOrder.getGroup();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encrypted = request\ud83a\udd3f.getEncrypted();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encrypted = requestLike;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encrypted = request1.4.getEncrypted();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encrypted = requestAnalyzer.getEncrypted();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encrypted = requestOrder.getViews();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encrypted = request.getViews();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encrypted = request getText.getEncrypted();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encrypted = requestBE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encrypted = request ic;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encrypted = requestParent;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encrypted = request\ud83a\udd3f.getGroup();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encrypted = requestRenaming.getEncrypted();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encrypted = requestAnalyzer.getGroup();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encrypted = requestLog.getEncrypted;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encrypted = request = request;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encrypted = requestfeature.getEncrypted();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encrypted = requestBuilding.getEncrypted;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encrypted = request others.getEncrypted;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encrypted = request\ud83a\udd3f.getViews();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encrypted = requestfaWith.getGroup();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encrypted = request XMLStream;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted = request definition;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encrypted = request sp;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encrypted = requestities;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encrypted = request isEmpty.getEncrypted;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encrypted = requestBuilding.getGroup();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encrypted = requestGu;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encrypted = requestences;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encrypted = requestTable.getGroup();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted = request calculations.getEncrypted();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encrypted = request getResponse.getEncrypted();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encrypted = requestManager.getEncrypted;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encrypted = requestTimeZone;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encrypted = requestfeature;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encrypted = requestQuotes.getEncrypted();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encrypted = request &Encrypted.getEncrypted();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encrypted = requestVar;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encrypted = requestbalancer.getEncrypted;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encrypted = requestfa;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encrypted = requestBlock.getEncrypted;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encrypted = request.geteditable;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encrypted = request isEmpty.getGroup();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encrypted = request TreeNode.getViews();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encrypted = request isEmpty.getViews();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encrypted = requestales;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encrypted = request\u22cf.getEncrypted();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encrypted = request cw.getEncrypted;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encrypted = requestOrder.geteditable;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encrypted = request Put;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encrypted = request\ud83a\udd3f.getEncrypted;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encrypted = requestRen.getEncrypted;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encrypted = request &Encrypted.getEncrypted;",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-184": {
        "fixes": [
            {
                "k": 1,
                "patch": ".filter(t.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".filter(t.getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".filter(t.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".filter(t.getJavaType().equals(cw)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".filter(t.getJavaType().equals(name)[0];",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".filter(t.getJavaType().equals(name);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".filter(t.getJavaType().equals(NOId);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".filter(t.getJavaType().equals(varType);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".filter(t.getJavaType().equals(CollisionId);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".filter(t.getJavaType().getName()[0]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".filter(t.getJavaType().equals(attributeId)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".filter(t.getJavaType().equals(tokenId);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".filter(t.getJavaType().equals(owner);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".filter(owner.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".filter(t.getJavaType().equals(x);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".filter(t.getJavaType().equals(accessor);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".filter(t.getJavaType().equals(attribute)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".filter(t.getJavaType().equals(propName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".filter(t.getJavaType().equals(dayId);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".filter(t.getJavaType().equals(methodNameId);",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".filter(t.getJavaType().equals(Collision)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".filter(t.getJavaType().equals(INNERType);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".filter(t.getJavaType().equals(NOId)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".filter(t.getJavaType().equals(coefficients)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".filter(t.getJavaType().equals(methodName)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".filter(t.getJavaType().equals( values)[0];",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".filter(t.getFirstType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".filter(owner.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".filter(owner.getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".filter(t.getJavaType().equals(propertyName);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".filter(t.getJavaType().equals(xId);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".filter(t.getJavaType().equals(typeId);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".filter(t.getJavaType().equals(x)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".filter(t.getJavaType().equals(ownerowner);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".filter(t.getJavaType().equals(objectId);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".filter(t.getJavaType().equals(methodName)[0];",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".filter(t.getJavaType().equals(ownerName);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".filter(t.getJavaType().equals(status)[0];",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".filter(t.getJavaType().equals(;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".filter(tId.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".filter( compiler.getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".filter(owner.getJavaType().equals(name)[0];",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".filter(t.getJavaType().equals(name)) .inferred;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".filter(t.getJavaType().equals(dsName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".filter.getJavaType().equals(name)[0];",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".filter(t.getJavaType().equals(0)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".filter(typeId.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".filter(t.getJavaType().equals(z)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".filter(t.getJavaType().getName)[0];",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".filter(t.getJavaType().equals( attributeType);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".filter(t.getJavaType().equals(opcodeId);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".filter(cw.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".filterShape(t.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".filter(t.getJavaType().equals(alt)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".filter( compiler.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".filter(name).getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".filter(t.getJavaType().equals(LBId);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".filter(t.getJavaType().equals(name)) .';",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".filter(t.getFirstType().equals(methodName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".filter.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".filter(t.getJavaType().equals(paramType);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".filter(t.getJavaType().equals( boundaryId);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".filter(type.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".filter(t.getJavaType().equals(recType);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".filter(t.getJavaType().equals(tId);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".filter(t.getJavaType().equals(bodyId);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".filter(Utility.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".filterShape(t.getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".filter(t.getFirstType().equals(attribute)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".filter(t.getJavaType().equals( intr)[0];",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".filter(t.getJavaType().equals(propertyNameId);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".filter(t.getJavaType().equals(info)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".filter(t.getJavaType().equals( selectorType);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".filter(t.getJavaType().equals( 30)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".filter(t.getJavaType().equals(RETURN)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".filter(t.getJavaType().equals(\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".filter(t.getJavaType().equals(parameter)[0];",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".filter(t.getJavaType().equals(CollisionId)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".filter(t.getJavaType().equals( }",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".filter( lineno.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".filterShape(t.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".filter(t.getJavaType().equals(Setting)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".filter(t.getJavaType().equals(z);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".filter(tId.getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".filterId.getJavaType().equals(methodName);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".filter(t.getJavaType().equals(owner));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".filter(t.getJavaType().equals(mid)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".filter(t.getJavaType().equals(hasId);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".filter(t.getJavaType().equals(zType);",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".filter(t.getJavaType().equals(accessor)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".filter(t.getJavaType().equals(nativeType);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".filter(t.getJavaType().equals(property);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".filter(t.getJavaType().equals(tokenId)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".filter(t.getJavaType().equals(ds)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".filter(t.getJavaType().equals(attributeCount)[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".filter(t.getJavaType().equals(targetType);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".filter(t.getJavaType().equals(p);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".filter.getJavaType().equals(attributeId);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".filter(t.getJavaType().equals(args)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".filter(t.getJavaType().equals(attributeCount)",
                "identical": false
            }
        ],
        "buggy_line": ".filter(it -> it.getJavaType().equals(entity)) //",
        "fixed_line": ".filter(it -> entity.equals(it.getJavaType())) //"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent.getGraphics(passArgs);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent(AffineTransform.getGraphics;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent(AffineTransform);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent.getGraphics = calculateGraphics;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent.getGraphicsAsId());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent.getGraphicsEncoding = calculateGraphics;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponent.getGraphics();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponent(externs.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponent.getGraphicsVisible() {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent(fromAngle);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponent(externs = calculateGraphics;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent(externs,Graphics);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponent(version);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponent.getGraphics(;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent.getGraphics namespaces());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent.getGraphicsOnly());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponent.getGraphics(oldometer);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponent.getGraphics Chart());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponent.getGraphicsImage();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponent.getGraphicsExtern());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponent(AffineTransform.getGraphics());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponent(externs.getGraphics());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponent(externsrogPseudoNames;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponent.getGraphics(externs);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponent(externs,Graphics;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponent( fp);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent.getGraphics(0).input;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent.getGraphicsOn());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponent.getGraphics(externed);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent(lines);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent.getGraphics(relativePosition);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent(Primary);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponent(externsinator);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponent.getGraphics Declaration());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent.getGraphicsgetMessage());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponent.getGraphicsfer());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent.getGraphicsProperties();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent.getGraphics26();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponent(externs);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponent(top);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponent(AffineTransform;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent.getGraphicsjo());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent.getGraphicsExterns = calculateGraphics;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent(externs.getGraphicspertype());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponent.getGraphicsCutover();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponent(AffineTransform.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent.getGraphics entries());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent.getGraphics38());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent.getGraphics(input);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent.getGraphicsAsId() {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponent.getGraphicsalternometer = calculateGraphics;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponent.getGraphics isEnabled(oldometer);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponent.getGraphicsometer());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponent.getGraphicsheap());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponent(externs,NumberOfInvocations);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponent.getGraphicsParameter());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent.getGraphicscall());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponent(groupedAngle);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent(hour);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent.getGraphicspertype();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent.getGraphicsGraphics());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent.getGraphicsstartAngle());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponent.getGraphicsts());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent(input);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent(numOccurrences);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent.getGraphics isEnabled(passArgs);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent.getGraphicsAsId = calculateGraphics;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent.getGraphicstn());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent(externsUnknown);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponent.getGraphics(str);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponent.getGraphicscall();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent(relativePosition);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponent.getGraphicsAsthenReturn());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent(AffineTransform.getGraphicsjo());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent.getGraphics never());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponent.getGraphics replacement;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponent.getGraphicsneeds());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponent(externs?));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponent.getGraphics(ializing);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponent.getGraphicsiator();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent(grouped);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponent.getGraphicsalternometer());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent.getGraphicsLER());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponent(externsaw);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent.getGraphicsstandard());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent(externsawFormat.getGraphics());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent.getGraphicsBean());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent.getGraphicscountcount;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent.getGraphics(0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent.getGraphicsWriter());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent(externsRoot);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent(externsawDefault());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponent(externsExclusive);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent.getGraphicsAsthenReturn(input);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponent(externs, owner;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent(state.getGraphicsometer());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent.getGraphics controls());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent(externs.getGraphicsgetMessage());",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-119": {
        "fixes": [
            {
                "k": 1,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) { return; }",
                "identical": false
            },
            {
                "k": 2,
                "patch": "String type = _typeFactory.indexOf(',', mark, type: \" + decodeProp,",
                "identical": false
            },
            {
                "k": 3,
                "patch": "String type = text.substring(0, MAX_BRATORS,",
                "identical": false
            },
            {
                "k": 4,
                "patch": "String type = name.substring(0, MAX_BRATORS,",
                "identical": false
            },
            {
                "k": 5,
                "patch": "String type = _typeFactory.indexOf(',', mark, type:numOccurrences, decodeProp:",
                "identical": false
            },
            {
                "k": 6,
                "patch": "String type = _typeFactory.indexOf(',', mark, type:",
                "identical": false
            },
            {
                "k": 7,
                "patch": "String type = data.substring(0, MAX_BRATORS,",
                "identical": false
            },
            {
                "k": 8,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) 0) { return; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "String type = c.indexOf(',', mark, type: \" + decodeProp,",
                "identical": false
            },
            {
                "k": 10,
                "patch": "String type = _typeFactory.indexOf(',', \"0\", 0) { return; }",
                "identical": false
            },
            {
                "k": 11,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) { return NONE; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "String type = output.substring(0, MAX_COLL,Usage, decodeProp:",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence return;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String type = _typeFactory.indexOf(',', \"0, 0) { return; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "String type = len;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "String type = text.substring(0, node.length() - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String type = _typeFactory.indexOf(',', mark, type, decodeProp:",
                "identical": false
            },
            {
                "k": 18,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) { return name; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN,Usage,",
                "identical": false
            },
            {
                "k": 21,
                "patch": "String type = output.substring(0, MAX_COLL,Usage, decode\":",
                "identical": false
            },
            {
                "k": 22,
                "patch": "String type = input.substring(0, node.length()-1, decode\": \"+typeStart,",
                "identical": false
            },
            {
                "k": 23,
                "patch": "String type = text.substring(0, MAX_COLL_CHAIN_LENGTH,",
                "identical": false
            },
            {
                "k": 24,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"]\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "String type = _typeFactory.indexOf(',', mark, type: %outputEnd, decode;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String type = text.substring(0, node.length() - 10);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "String type = type.substring(0, MAX_BRATORS, superStart, decode\":",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String type = _typeFactory.indexOf(',', mark, type, decode;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, 0) + \"$;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "String type = input.substring(0, node.length() - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "String type = _typeFactory.indexOf(',', mark, type: %outputEnd, decodeProp:",
                "identical": false
            },
            {
                "k": 32,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \" packed;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "String type = text.substring(0, MAX_COLL_CHAIN, 0) + \"$;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "String type = text.substring(0, buf, 0);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "String type = type.substring(0, MAX_BRATORS,', \"",
                "identical": false
            },
            {
                "k": 36,
                "patch": "String type = name.substring(0, MAX_BRATORS, \"",
                "identical": false
            },
            {
                "k": 37,
                "patch": "String type = input.substring(0, \"BR to(',\": value, decodeContent",
                "identical": false
            },
            {
                "k": 38,
                "patch": "String type = _typeFactory.indexOf(',', mark, type: \" + decode;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "String type = super.substring(0, MAX_BRATORS,', \"",
                "identical": false
            },
            {
                "k": 40,
                "patch": "String type = text.substring(0, MAX_COUNT, 0) + \" packed;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "String type = input.substring(0, node.length()-1, decode\": \"+type == 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "String type = input.substring(0, MAX_BRATORS, 2),",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String type = type.substring(0, MAX_BRATORS,VAR;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "String type = _typeFactory.indexOf(',', Limit, decodeProp:",
                "identical": false
            },
            {
                "k": 45,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence,",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String type = _typeFactory.indexOf(',', mark, type:numOccurrences;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "String type = data.substring(0, MAX_COLL_CHAIN_LENGTH,",
                "identical": false
            },
            {
                "k": 48,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN,Usage, decodeProp);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN_LENGTH,",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN,Usage, decodeProp:",
                "identical": false
            },
            {
                "k": 51,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"End, decode;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "String type = input.substring(0, \"BR to(',\": value, decode;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "String type = text.substring(0, MAX_COLL_CHAIN, 0) K;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "String type = type.substring(0, MAX_BRATORS, 2),",
                "identical": false
            },
            {
                "k": 55,
                "patch": "String type = input.substring(0, MAX_BRATORS, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, 0) + decode;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence, all;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, 0) + tail,",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String type = type.substring(0, MAX_COLL_CHAIN_LENGTH,",
                "identical": false
            },
            {
                "k": 60,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "String type = input.substring(0, MAX_BRATORS,",
                "identical": false
            },
            {
                "k": 62,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence, array:",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String type = text.substring(0, MAX_COLL_CHAIN, 0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "String type = input.substring(0, \"BR to(',\": value, decode\":",
                "identical": false
            },
            {
                "k": 65,
                "patch": "String type = _typeFactory.indexOf(',', mark, type, decode\":",
                "identical": false
            },
            {
                "k": 66,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence, 32;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "String type = type.substring(0, MAX_BRATORS,",
                "identical": false
            },
            {
                "k": 68,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, overlay, decodeProp:",
                "identical": false
            },
            {
                "k": 69,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0)];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "String type = type.substring(0, MAX_COLL_CHAIN, 0) + \"$;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "String type = name.substring(0, MAX_BRATORS, type, decode\":",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \" considered;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "String type = data.substring(0, MAX_BRATORS, type, decode\":",
                "identical": false
            },
            {
                "k": 74,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, 0)];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN,Usage, decode\":",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String type = type.substring(0, MAX_BRATORS, 0, -1, -1, msg);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "String type = types.substring(0, MAX_BRATORS,",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String type = input.substring(0, \"BR to(',\": value, decode \" + decode;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence, calendar:",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "String type = _typeFactory.indexOf(',\")\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "String type = name.substring(0, MAX_BRATORS, type, decodeL:",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, 0) K;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "String type = data.substring(0, MAX_BRATORS, \"",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String type = text.substring(0,",
                "identical": false
            },
            {
                "k": 86,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence, 1.0\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "String type = _typeFactory.indexOf(',',\") >= 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "String type = _typeFactory.indexOf(',', mark, type: \" + decodeBuilder,",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String type = _typeFactory.indexOf(',', startPos, 0) + \"sentence, e;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "String type = type.substring(0, MAX_CLASS,",
                "identical": false
            },
            {
                "k": 91,
                "patch": "String type = super.substring(0, MAX_BRATORS, type, decodeL:",
                "identical": false
            },
            {
                "k": 92,
                "patch": "String type = output.substring(0, MAX_CLASS,",
                "identical": false
            },
            {
                "k": 93,
                "patch": "String type = name.substring(0, MAX_BRL,",
                "identical": false
            },
            {
                "k": 94,
                "patch": "String type = output.substring(0, MAX_COLL_CHAIN, 0) + getMinimum,",
                "identical": false
            },
            {
                "k": 95,
                "patch": "String type = text.substring(0, MAX_COLL_CHAIN, 0)];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String type = text.substring(0, MAX_BRATORS, \"",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String type = data.substring(0, MAX_COLL_CHAIN,",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String type = _typeFactory.indexOf(',', mark, type: \" + decodeProp, decode;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "String type = classType.substring(0, MAX_BRATORS, \"",
                "identical": false
            },
            {
                "k": 100,
                "patch": "String type = type.substring(0, MAX_COLL_CHAIN, 0) K;",
                "identical": false
            }
        ],
        "buggy_line": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart)); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress);",
        "fixed_line": "int typeEnd = sentence.indexOf(',', typeStart); if (typeEnd > 0) { String type = sentence.substring(typeStart, typeEnd); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress); } } else { return null;"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOf].x+c, 21) .buf[c];",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfdelegates(Tri .x * 2dS,",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfValid(g2, 21) .x[2];",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOf].x+1 || unit+c, 2d;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfdelegates != 0x+1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfAnalyzer().x+c, 21) >= 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfValid(g2, 21) .x+1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfdelegates(invocations, 2d);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow)",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOf].x+c, 21) . .buf[c];",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfdelegates( 14,) .x * 2dS,",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2) .CIRCLE",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfdelegates( function)( .x * 2dS,",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfdelegates(Tri .x * 2dS, 3;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfAnalyzer().x+c, 2darrowWidth);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfx+1 || adt+c)",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfValid(invocations, 2d);",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfdelegates(invocations, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOf 5) .x+1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_PADDING, 2) .CIRCLE",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfEntries(g2, dataArea, ad)?d",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfx[2];",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfOVERRIDE(missing, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOf].x+1 || unit+c, 2d)(x]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfdelegates(Values, 21) .x[2];",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfValid(g2, dataArea, ad)?d",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOf].x+1 || adt+c)",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfdelegates(Values, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfAnalyzer().x+c, 2d volume;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfx+1 || adt+\") .5)",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberOfdelegates( TypeId, 21) .x[2];",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfAnalyzer().x+c, 2dages);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2darrow .CIRCLE",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOf].x+1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfdelegates(g2, 2) . % 21)",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfOVERRIDE(owner, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2d);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow) .c lowerBound lowerBound lowerBound lowerBound;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfdelegates(png, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataElement);",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfdelegates(Tri .x * 2dS,rees",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfdelegates(Tri .x * 2dS, min;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberOfdelegates(invocations, 21) .x[2];",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfdelegates(Tri .x * 2dS, data[0].length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOf].x+c, 2d)?OVERRIDE : 52;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 21)",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow) .c lowerBound lowerBound lowerBound;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfx+1 || tokenBegin+c)",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow) .c lowerBound lowerBound lowerBound lowerBound lowerBound;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfx+1 || adt+\") . .5)",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOf].x+c, 21) . .5)",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfdelegates(Timeline, 2 .x+1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2) .pn;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOf].x+c, 21) . . .5)",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOf].x+c, 21) .buf[c]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfdelegates(factor, 21) . .xC12Writer.denominator/d;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataWidth)",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2) . .CIRCLE",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfdelegates(desc, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2dMonth);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOfdelegates( 14,) .x * 2d;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2d;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOf].x+1 || unit+c, 2d",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2 // min .",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfdelegates(invocations, 21) .x % 2 == 2;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2d volume;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfx+c, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfdelegates(g2, 2) . .5)",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2darrow . .CIRCLE",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow) .sp lowerBound lowerBound lowerBound;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataArea);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfOVERRIDE(missing, 21) .x % 2 == 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfAnalyzer().x+c, 2darrowWidth)",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOf].x+1 || tokenBegin+c)",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2) .pn",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_PADDING, 2)).c];",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOfOVERRIDE(result, 2 .x+1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfx+1 || adt+\") .",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOf].x+c, 2d)? shape;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow) .sp lowerBound lowerBound lowerBound lowerBound;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfOVERRIDE(owner, 21) .x();",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfdelegates(delta, 21) . .5)",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberOf].x+1 || tokenBegin+c, 2d",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfdelegates(Values, 21) .x fit",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOfdelegates(Tri .x * 2dS, data == 2)",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfdelegates(factor, 21) .xC12Writer.denominator/c);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfdelegates(factor, 21) . .xC12 3)",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfOVERRIDE(missing, 21) .x();",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfOVERRIDE(owner, 21) .x lowerBound lowerBound,",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2d)(b, 2) .CIRCLE",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 21) .CIRCLE",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfdelegates(factor, 21) .x % 2];",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfdelegates(Tri .x * 2dS, dataShadow) .c lowerBound lowerBound lowerBound lowerBound lowerBound lowerBound;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_BLOCK_SIZE, 2)).c(1, 2 // 3;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfdelegates(factor, 21) . .5)",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfdelegates(V, 2 .x+1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfAnalyzer().x+c, 21) >= 3;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOf].x+1 || unit+c, 2d)(x7FFFFFFF)",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfdelegates(ous, 2d+\") .inject;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOfOVERRIDE(checkState.BASE64_VALUE_PADDING, 2)).c lowerBound lowerBound lowerBound,",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\") // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional() // adc 2"
    },
    "Bears-102": {
        "fixes": [
            {
                "k": 1,
                "patch": "case 21:.setPosition(buf, off);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case 21:.setPosition(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case 21:.setPosition(buf, off off);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShort(8);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case 21:.setPosition(buf, off off, len);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case 21: (buf != 0) buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b, position);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case 21: (buf != 0) buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case 21: = buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case 21:.setPosition(buf, off, len);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case 21:.setPosition(buf, off off, len;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case 21:.setPosition(13, buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case 21:.setPosition(13, buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case 21: set.setPosition(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DELIMITER, buf);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case 21:.setPosition(1, buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case 21:.setPosition(buf, off off, len %s.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case 21: (buf != 0) buf.readUnsignedShort(buf, 0, length);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case 21:.setPosition(1FRAME_KEY_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case 21:.setPosition(buf, off, len;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case 21:.setPosition(13, position = buf.readUnsignedShort(buf, 3);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case 21:.setPosition(1 attribute.KEY_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case 21: c = buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, 0, length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case 21:.setPosition(1 labels.KEY_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case 21:.setPosition(1plot.KEY_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case 21:.setPosition(buf, off off, len-2);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case 21:.setPosition(buf, offset, len).readUnsignedShort(b);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case 21:(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_BOTH,",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case 21:.setPosition(buf, off off off);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedByte\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case 21:.setPosition(1, buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DEPRECATED_BIG",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case 21:.setPosition(1)) throwables.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case 21:.setPosition(buf, 0, buf.length) * 354;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case 21:.setPosition(1 side.KEY_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShortSize;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case 21:.setPosition(buf, offset, len);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_BIG",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShort(8;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case 21:.setPosition(1)) throw errorReporter.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShort(buf, 0, length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case 21:.setPosition(13, buf.readUnsignedShort(buf, position);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case 21:.setPosition(buf, off, len %s.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case 21:.setPosition(buf, 0, buf.readUnsignedPosition);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case 21:.setPosition(5.KEY_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShort |= Label.KEY_DEPRECATED;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, 3);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case 21: = buf.readUnsignedByte(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case 21:.setPosition(buf, offset, len) buf.readUnsignedShortSize);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case 21:.setPosition(13, buf.readUnsignedShort(buf, 0, length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case 21:.setPosition(1 labels.KEY_readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case 21:.setPosition(buf, offset, len) buf.readUnsignedShort(b);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case 21: (buf != 0) buf.readUnsignedShort(b, position);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case 21:.setPosition(1 attribute.KEY_readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case 21:.setPosition(buf, off off, len).readUnsignedShort(b);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case 21:.setPosition(buf, off off;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, i);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case 21:.setPosition(buf, off offR.readUnsignedShortSize);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, off);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case 21:.setPosition(1, buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case 21:.setPosition(buf, 0, buf.length) - 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DEPRECATED_BOTH,",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case 21:.setPosition(1 side.KEY_readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DEPRECATED_KEY, buf);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_compiler, buf);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case 21:.setPosition(buf, off off, len)(b.readUnsignedByte)",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case 21:.setPosition(buf, 0, buf.readUnsignedShortSize);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case 21:.setPosition(buf, 0, buf.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShortSizeEstimate;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case 21:.setPosition(1, buf.readUnsignedShort(bufSize);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, iValue);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case 21:.setPosition(buf, off off off, len;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case 21:.setPosition(1, buf.readUnsignedShort(buf, 0, length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShortSize();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case 21:.setPosition(buf, off off off, len);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(),",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case 21:.setPosition(buf, offset, len) buf.readUnsignedShort(8);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case 21:.setPosition(1plot.KEY_readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case 21:.setPosition(1, buf.readUnsignedShort(8);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case 21:.setPosition(buf, off, len-2);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DEPRECATED_KEY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(buf, 0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case 21:edPosition.setPosition(1)) buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case 21: (buf != 0) buf.readUnsignedShort(buf, 0, buf.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case 21:.setPosition(12, buf.readUnsignedShort(buf, 0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DELIMITER,",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case 21:edPosition.setPosition(1)) buf.readUnsignedShort(b, position);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DEPRECATED;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case 21:.setPosition(11, buf.readUnsignedShortMAX_KEY;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case 21:.setPosition(buf, off off, length);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case 21:edPosition.setPosition(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case 21:.setPosition(1)) buf.readUnsignedShort(b.KEY_DEPRECATED, buf);",
                "identical": false
            }
        ],
        "buggy_line": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break; case 22: position.set(\"profile\", buf.readUnsignedByte()); break; case 66: position.set(Position.KEY_POWER, buf.readUnsignedShort() + \"mV\"); break; case 67: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() + \"mV\"); break; case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
        "fixed_line": "position.set(\"pcbTemp\", (length == 4 ? buf.readInt() : buf.readShort()) * 0.1);"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || raw == Object.class;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to use a.class",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to be Object",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of Object",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || owner == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (rawType == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to, raw (raw == Object.class",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to use Object",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to indicate a.class",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to be Object",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one element",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to force static typing",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for Object",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to use Object",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to force a.class",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of class, need to be Object",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to buffer",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to parse using Object.class",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to, raw (raw)",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to parse using Object",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to put < Object.class",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to use a.class",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for subplot",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to indicate explicit disabling of Object",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one,-class",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one_class",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to use Object.class",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one zero",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for reference",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || raw == Object.class) { // [JACKSON-class",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need toImpl.class",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of Object.class",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, as per [JACKSON-314]",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to parse using Object",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for Object.class",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to force accessible",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to force static typing",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to load.class",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to force accessible",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to check for Object",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to Color.class",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to indicate explicit disabling of Object",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to be Object.class",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for property-class",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to, need to be Object",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to property-class",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need toImpl.class",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, let's Object.class",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to, need to use a.class",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { // no Object.class",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for UNINITIALIZED_class",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to force a.class",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, let's Object.class",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // class, need to use a.class",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to use it.class",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // no mapping.class",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to deserializer",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of changes",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of class, need to check for Object",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to most special one of Object",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to buffer",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of class, need to use Object",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need toain?",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to deserializer",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for UNINITIALIZED",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to(),",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need toDeserializer or Object",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need toDeserializer or Object.class",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one.class",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of int",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || raw == Object.class) { class, Object.class",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to use a18,",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // [JACKSON-314]",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, \"\"",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to check for property-class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of 4), 4),",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of property-class",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to check for subplot",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to expand.class",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // NO_class",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to x.class",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to property-class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to zero",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check for0 = rawType",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to check",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one of class, need to parse using Object",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to, need to use Object",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one:",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to use it's Object.class",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, need to indicate Object",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // no Object",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to convert from Object",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) { // no changes, need to parse using 2 int.class",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id=",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id=",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\" spFsideF]{0, // .math.numberOfFTECTED\") .id",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id + 6;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\" spFsideF]{insn\") .injectableValue(name) .id=",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\" spFsideF]{insn\") .injectableValue(name) .id",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"undFsideF]{0, // .math.numberOfFTECTED\") .id",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious warnings",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id are",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\" spFsideF]{insn\") .injectableValue(name) .id + 6;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"interpreter\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-13914]",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\" spFsideF]{Successes\") .injectableValue(name) .id=",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-314]",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\" spFsideF]{Successes\") .injectableValue(name) .id",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id= DateTimeConstants. spurious warnings",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\" spFsideFcy\") .injectableValue(name) .id=",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\" spFsideF]{0, // .math.numberOfFTECTED\") .id=",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\" spFsideFcy\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\" spFsideFcy\") .End(name) .id=",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\" spFsideFcy\") .injectableValue(name) .id + 6;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\" spFsideF]{(name) .id20_LLEGAL_NAME);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\" areLog21772) .injectables(expression)",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\" spFsideF]{ super(name) .id20_LLEGAL_NAME);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON [JACKSON-13914] // sanity check",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"interpreter\") .injectableValue(name) .id=",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON are",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFtright-numberOfF",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\" spFsideF]{insn\") .injectableValue(name) .id + 6];",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectableStrings(expression)",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfF Readable\") .id=",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"undFsideF]{0, // .math.numberOfFTECTED\") .id=",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\" spFsideF]{0, // .math.numberOfFTECTED\") .id are",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-139]",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-407] -- allow",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"undFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id=",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id=callA_LLEGAL_NAME);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable spurious warnings",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\" spFsideF]{Shadow\") .injectables(expression) .id",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\" spFsideF]{Stub\") .injectables(expression) .id",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\" spFsideFcy\") .injectableValue(name) .id",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\" spFsideF]{Successes\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfF",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\" spFsideF]{Shadow\") .injectableValue(name) .id=",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\" spFsideF]{Successes\") .injectableValue(name) .id + 6;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON [JACKSON-13914]",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"undFsideF]{0, // .math. spurious warnings",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .idLog2d",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\" spFsideF]{insn\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\" spFsideF]{0, // .math.numberOfFTECTED\") .id with MAX_LINE_LENGTH)",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON [JACKSON-314] // sanity check",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-space",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\" spFsideF]{insn\") .injectables(name) .id",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id < MAX_LINE_LENGTH)",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFtright-numberOfFREASON",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\" spFsideF]{Shadow\") .injectableValue(name) .id",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON [JACKSON-139] // sanity check",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"undFsideF]{0, // .math.numberOfFTECTED\") .id are",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\" spFsideF]{Shadow\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id=2;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\" spFsideF]{Shadow\") .injectableValue(name) .id + 6;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectableStrings(expression).id",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"getPropertyFsideF]{0, // .math.numberOfFTECTED\") .id",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREsign(name) .id",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\" spFsideF]{ super(name) .id=2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-314] // sanity check",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-314]';",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\" areLog21772) .injectables(expression) .id",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-407] --i",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectableStrings(name)",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFimaginary",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-407] -- allow",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectable [JACKSON-13914]';",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id=callA_LLEGAL_DECIMAL_[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfF Readable\") .id",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious warnings\") .id",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREASON [JACKSON-314]",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\" spFsideFcy\") .injectableValue(name) .id], // it's",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFTECTED\") .id with MAX_LINE_LENGTH)",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"interpreter\") .injectableValue(name) .id-1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .idInvocations",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id=callA_LLEGAL_NAME_ should .id",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\" spFsideF]{0, // .math.denominator\") .injectableStrings(expression) .id",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\" spFsideFcy\") .End(name) .id=2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id=callA_LLEGAL_NAME_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFREsign(name) .id=",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\" spFsideFcy\") .injectableValue(name) .idoutputEnd;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfFMAN)",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"SELECTFsideFEB\") .injectables(expression) .id",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"header\") .injectableValue(name) .id=2;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"interpreter\") .injectableValue(name) .id + 6;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\" spFsideFsideEffect(): .inject\") .id=2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\" spFsideF]{0, // .math. spurious semi-numberOfF values are",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\" spFsideFtright\") .injectableValue(name) .id= duration;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"undFsideF]{0, // .math. spurious warnings\") .id",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\") // iccid"
    },
    "Bears-249": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dep Clock = new Clock;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dep Clock = new Clock[128];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dep Clock = new Clock[16];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dep Clock = new ClockUSE_METHOD;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dep Clock = new Clock[n+1];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dep Clock = new Clock(this.depName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dep Clock = new Clock(this.dep);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dep Clock = new Clock(this.depPredicates);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dep Clock = new Clock[n];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dep Clock = new ClockUSE",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dep Clock = new Clock[7].depDep\")];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dep Clock = new Clock(this.dep composite);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dep Clock = new Clock(this.dep;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dep Clock = new ClockBoxFilled;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dep Clock = new ClockRuntimeException(this.depName);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dep Clock = new Clock schemeField(this.depBox);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dep Clock = new Clock(this.dep++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dep Clock = new ClockRuntimeException(this.dep);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dep Clock = new Clock(this.depS);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dep Clock = new Clock[+1];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dep Clock = new Clockinality;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dep Clock = new Clock[ IO];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dep Clock = new Clock lineno;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dep Clock = new Clock[7].depDep\") ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dep Clock = new Clock(this.depBox);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dep Clock = new ClockBoxMargin;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dep Clock = new Clockawt;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dep Clock = new Clock baseUri;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dep Clock = new ClockBox;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dep Clock = new Clock(this.depannotated;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dep Clock = new Clock(this.depDep<>();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dep Clock = new Clock(this.depOTED",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dep Clock = new Clock(this.dep2);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dep Clock = new Clock(this.depNamespaceURI);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dep Clock = new Clock[Guess];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dep Clock = new Clock DataInputStream;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dep Clock = new Clock(this.depMethod);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dep Clock = new Clock[256];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dep Clock = new Clock side effects;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dep Clock = new ClockupperBound;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dep Clock = new Clock(this.depCharno;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dep Clock = new Clock\ud83d\ude09;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dep Clock = new Clock(this.depvsBox);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dep Clock = new Clockmonths;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dep Clock = new Clock(this.dep baseUri;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dep Clock = new Clock[7].depDeppaper;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dep Clock = new Clock(this.depMap);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dep Clock = new Clock[n;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dep Clock = new Clock(this.depCharno);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dep Clock = new Clock schemeField(this.dep);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dep Clock = new Clock6,",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dep Clock = new Clock errorReporter;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dep Clock = new Clockcomposite;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dep Clock = new Clock(this.dep UNINITIALIZED;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dep Clock = new Clock(this.dep00, 400);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dep Clock = new ClockSHupperBound;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dep Clock = new Clockgson;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dep Clock = new Clock[7]];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dep Clock = new ClockRuntimeException(this.dep;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dep Clock = new Clock(3;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dep Clock = new ClockLiving;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dep Clock = new Clockivative;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dep Clock = new Clock(this.depCode);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dep Clock = new Clock(this.depCharnoir;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dep Clock = new Clock(this.depesting);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dep Clock = new Clock schemeField(this.depName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dep Clock = new Clock(this.fileFormat);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dep Clock = new Clock(this.dep(),",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dep Clock = new Clock(this.n;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dep Clock = new Clock\u3106upperBound;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dep Clock = new Clock(this.dep, messageBox);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dep Clock = new ClockUSE_METHOD_NAMES;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dep Clock = new Clock[7].depDep\u0f12",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dep Clock = new Clockticker(this.dep);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dep Clock = new Clock(this.depElement);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dep Clock = new ClockBoxEdges;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dep Clock = new ClockBox[0];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dep Clock = new Clock(this.depOrder;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dep Clock = new Clock\u2816;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dep Clock = new ClockBox00, 400;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dep Clock = new Clock(this.dep UNINITIALIZED);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dep Clock = new Clock[7].depDep tokenizer;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dep Clock = new Clock[7].dep2);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dep Clock = new Clock(this.depVisibilityDep<>();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dep Clock = new Clock Cluster;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dep Clock = new Clock en;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dep Clock = new Clock base;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dep Clock = new Clock(this.depBuilder;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dep Clock = new Clock CONFDeppaper;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dep Clock = new Clock(this.depPresent);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dep Clock = new Clock[groupBox.dep00,",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dep Clock = new Clock(this.deping<>();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dep Clock = new Clock( this.depDep<>();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dep Clock = new Clock(this.depBoxInfo);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dep Clock = new Clock(this.depuous;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dep Clock = new ClockBox 21,",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dep Clock = new ClockRuntimeException(this.depS);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dep Clock = new Clock(this.depExpressions;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dep Clock = new Clock(this.depAdjusted);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dep Clock = new Clock SCOPE;",
                "identical": false
            }
        ],
        "buggy_line": "this.dep = new Clock<>(commitDepBox.dep);",
        "fixed_line": "if (commitDepBox.dep != null) { this.dep = new Clock<>(commitDepBox.dep); } else { this.dep = null; }"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (!position) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (!this.allowDuplicateXValues) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (position > 2) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (!invocation) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (position.length > 2) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (!mustParse) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (position < 2) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position <= 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position > 1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position > 6) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (!boundMappedToLastCycle) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (position > 30.started) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (!mean) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position > 6) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (!mid) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (!bigEndian) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position == 1) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position <= 2) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (!invocations) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (!this.allowNegatives) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (position <= 9) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (!segmentStart) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( types.length > 2) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (!UNstarted) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.length < 2) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position > 30.length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position.charAtstarted) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (!removed) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.length > 2) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (position > position) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position instanceofstarted) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position.length > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (!this.allowSigns) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (position <= 1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position > 59) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (!wrap) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (data[1] == yEnd) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (bigOngoing) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position != 1) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position > 5) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position > 127) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (!from) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (data.length > position) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position.length < 2) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (positionCache) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (!this.allowNegativesFlag) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (!inferred) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position > 30.started_CACHE_SIZE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (!this.allowSignsVisible) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (position.length > 6) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position.length < 4) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (!this.allowNegatives = position;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position.charAt angleStart) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (position > 10;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( types.length < 2) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (textStart) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (!ards) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (! getDomain) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (bigEndian) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position.length > 5) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (data.length < 2) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position <= 5) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (!big) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.length > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (data.length > 2) {",
                "identical": true
            },
            {
                "k": 71,
                "patch": "if (entry.length < 4) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (!bigDependency) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (position.length == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position.charAt yStart) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (!done) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (!eps) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position.length < 5) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position.length > position) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.length == 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (textEnd) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (!SAVE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position denominator) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (position.charAtDelimiter) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (!this.allowSignsawDefault) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position.length > 4) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position > 30.started_AFTER_COLON) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (!ambiguous) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position > 30.started_AS_LONG) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position > 0){",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (!getterEnd) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (!this.allowDuplicateX1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (position.charAt\u1585) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (!this.allowSignsawDefaultCatchEnd) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (!modifiers) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (copy > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (!this.allowDuplicateXCoordinates) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position.charAt(3) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.length > position) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position.length < 6) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (!FFFF) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-186": {
        "fixes": [
            {
                "k": 1,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 2,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 3,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 4,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 5,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 6,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 7,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 8,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 9,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 10,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 11,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 12,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 13,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 14,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 15,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 16,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 17,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 18,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 19,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 20,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 21,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 22,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 23,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 24,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 25,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 26,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 27,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 28,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,5,5,5,5,5,5,5,5,66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 29,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,5,5,5,5,5,5,5,6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 30,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,5,5,5,5,5,5,5,5,6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 31,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,5,5,5,5,5,5,5,5,666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 32,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,5,5,5,5,5,5,5,666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 33,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,5,5,5,5,5,5,5,5,5,666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                "identical": false
            },
            {
                "k": 35,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 -",
                "identical": false
            },
            {
                "k": 49,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 -",
                "identical": false
            },
            {
                "k": 54,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Declared",
                "identical": false
            },
            {
                "k": 55,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclared",
                "identical": false
            },
            {
                "k": 56,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666661)",
                "identical": false
            },
            {
                "k": 59,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 -",
                "identical": false
            },
            {
                "k": 62,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 63,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Declared",
                "identical": false
            },
            {
                "k": 64,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 -",
                "identical": false
            },
            {
                "k": 65,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclared",
                "identical": false
            },
            {
                "k": 66,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclared",
                "identical": false
            },
            {
                "k": 67,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Declared",
                "identical": false
            },
            {
                "k": 68,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Declared",
                "identical": false
            },
            {
                "k": 69,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclared",
                "identical": false
            },
            {
                "k": 71,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 72,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666661)",
                "identical": false
            },
            {
                "k": 73,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 75,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 76,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 78,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666661)",
                "identical": false
            },
            {
                "k": 81,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 82,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 char char",
                "identical": false
            },
            {
                "k": 84,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 char",
                "identical": false
            },
            {
                "k": 85,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 87,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666661)",
                "identical": false
            },
            {
                "k": 89,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 char char char",
                "identical": false
            },
            {
                "k": 90,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclaredDeclared",
                "identical": false
            },
            {
                "k": 92,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666()+",
                "identical": false
            },
            {
                "k": 94,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 char char char char",
                "identical": false
            },
            {
                "k": 97,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 char",
                "identical": false
            },
            {
                "k": 98,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666 char char",
                "identical": false
            },
            {
                "k": 99,
                "patch": "wrapperwrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot cannot666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "wrapper =.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0, cannot cannot cannot cannot cannot cannot66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DeclaredDeclaredDeclaredDeclaredDeclared",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!interfaceOnly) { additionalProperties.remove(INTERFACE_ONLY); }"
    },
    "Bears-187": {
        "fixes": [
            {
                "k": 1,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new^Generator(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, minor.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, mm.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, mm.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ursdayIOR.MINIMUM_QUOTES, false);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, GENERATE.MIN_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ursdayIOR.MINIMUM_QUOTES, false);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newCENDINGFeature.MINIMUM_IMATED_QUOTES(false, false);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, MeterGenerator.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, minor.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MIN_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, mm.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, MeterGenerator.MIN_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, addParameterGenerator.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false, mm.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ursdayIOR.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE(outputBuffer.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR.MINIMUM_QUOTES, false);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final ObjectMapper mapper = new YAMLableGenerator(false,ZE_MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ZE_QUOTESGenerator.MIN_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(\"configure.MINAMLGenerator(false, false) ;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR_MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(\"configure.MIN_VALUE, false)ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, mm.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new UIDGenerator(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,Groovy.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ursdayIOR.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(\"configure.MIN_VALUE, false) ;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ursdayIOR.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, GENERATE.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final ObjectMapper mapper = new YAMLConstants.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final ObjectMapper mapper = new YAMLNode(logFactory.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new UIDGenerator(outputBuffer.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ZE_QUOTESGenerator.MINIMUM_IMATED_QUOTES, false);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ursdayIOR.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, addParameterGenerator.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, GENER.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ZE_QUOTESGenerator.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, addParameterGenerator.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE(outputBuffer.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final ObjectMapper mapper = new YAMLException(false, addParameterGenerator.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final ObjectMapper mapper = new YAMLException(false, addParameterGenerator.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, GENER.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE(outputBuffer.MINIMUM_IMATED_QUOTES, false, false);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false, addParameterGenerator.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false).MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newCENDINGFeature.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new UIDGenerator(outputBuffer, false);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(\"configure.MIN_VALUE, false)ZE_QUOTES;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newCENDINGFeature.MINIMUM_IMATED_QUOTES(false, false) ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false, addParameterGenerator.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE( info.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATED(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false, mm.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(\"configure.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, addParameterGenerator.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newCENDINGFeature(this.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE(outputBuffer, false);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR.MINIMUM_ITEM_QUOTES, false);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new^Generator(false,ZE_QUOTES, false) ;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(logFactory.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR_QUOTES, false);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final ObjectMapper mapper = new YAML[128.MINUTE_QUOTESGenerator.MINTESGenerator(false, false);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ursdayIOR.MINTESGenerator(false), false, false);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false, addParameterGenerator.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final ObjectMapper mapper = new YAMLGeneratorFactory.new UIDGenerator(outputBuffer, false);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final ObjectMapper mapper = new YAMLNode(false, addParameter.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false, GENER.MIN_QUOTES, false);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR.MINIMUM_INT_QUOTES, false);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MIN_IMOTES, false);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final ObjectMapper mapper = new YAMLNode(false).MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ursdayIOR_QUOTES, false);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTESGenerator.MIN_IMATE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,Groovy.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new UIDGenerator(outputBuffer.MINIMUM_IMATED, false);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false, addParameter.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final ObjectMapper mapper = new YAMLableGenerator(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.Feature.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE(outputBuffer.MINIMUM_VALUE, false);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(\"booleanGenerator.MIN_VALUE, false)ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMSUNDAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory(false,ursdayIOR.MINIMUM_IMATE, false);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final ObjectMapper mapper = new YAMLNode(false,ZE_QUOTES, false) ;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.new UIDGenerator(outputBuffer.MINIMUM_IMATED_QUOTES, false, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ZE_QUOTESGenerator.MIN_VALUE, false);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newCENDINGFeature.MIN_VALUE(false, false);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newCENDINGFeature.MINUTE_VALUE, false);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final ObjectMapper mapper = new YAMLChart(false,ursdayIOR_QUOTES, false);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final ObjectMapper mapper = new YAMLGenerator(false,ZE_QUOTESGenerator.MIN_VALUE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final ObjectMapper mapper = new YAMLNodeFactory.newIMATE(outputBuffer.MINUTE_QUOTES, false);",
                "identical": false
            }
        ],
        "buggy_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
        "fixed_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory() .configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true) .configure(YAMLGenerator.Feature.ALWAYS_QUOTE_NUMBERS_AS_STRINGS, true));"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = propName;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = val.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = _ignorals;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = _ignorableProperties.getIgnored;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = _ignoreAllUnknowns;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = String.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = options.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = jsScope.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = to.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = _ignorableProperties.getIgnored();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = _ignoreAllUnknown;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = insts.getIgnored;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = node.getIgnored;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = right.getIgnored;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = text.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = Calendar.getIgnored;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = _objectIdWriter.getIgnored;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = builder.getIgnored;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = from.getIgnored;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = jsRoot.getIgnored;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = assign.getIgnored;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = textProp.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = _ignorableProps.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored =6].getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = c.getIgnored;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = _ignorableProps.getIgnored();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = moduleVar.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = _ignoreAllUnknowns.getIgnored;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = _ignoreAllUnknowns.getIgnored();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = nextSibling.getIgnored;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = allals.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = keyType.getIgnored;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = factory.getIgnored;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = _objectIdReader.getIgnored;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = _ignorableSet.getIgnored;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = textVar.getIgnored;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignored;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = jsScope.getIgnored();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = _ignorable.getIgnored;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = _ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = copy.getIgnored;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = jsdoc.getIgnored;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = jsScope;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = it.getIgnored;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = assign;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = val.getIgnored().getIgnored;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = registry.getIgnored;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = allNames.getIgnored;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = jsType.getIgnored;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = schema.getIgnored;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = segment.getIgnored;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = angle.getIgnored;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored =ignoreAny.getIgnored;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored =comes.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = entry.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = object.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = all.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = transitions.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = g2.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = marker.getIgnored;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = Calendar.orals;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = _ignorableSet.getIgnored();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored =List.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = prefix;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = newIgnored.getIgnored;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = member.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = textProp.getIgnored();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = BigInteger.getIgnored;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = c.getIgnored();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = val.getIgnored();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored =[1]).getIgnored;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = getFieldName.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored =Writer.getIgnored;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = when.getIgnored;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = a.getIgnored;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = zone.getIgnored;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = fromRef.getIgnored;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = tags.getIgnored;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = _objectIdWriter.getIgnored();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = other.ignoreAllUnknown;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = _ignorableProps;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = prop.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored =Target.getIgnored;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = _objectIdorals.getIgnored;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = _ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = _objectProperties.getIgnored;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = jsScopeCreator.getIgnored;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = other.getIgnored;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = assign.getIgnored();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = textPropNames.getIgnored;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = _objectIdorals;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = other.ignoreAny;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored =ignoreAny;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = other.ignoreAllUnknowns;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = jsScopeCreator.getIgnored();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = text;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = jsRoot.getIgnored();",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (pattern == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (pattern != JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (df == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (pattern == JsonFormat.Shape.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (serializer == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (pattern != JsonFormat.Shape.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (df == JsonFormat.Shape.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (pattern == JsonFormat.Shape.START_serializers) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (format == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (serializer == JsonFormat.Shape.START_serializers) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tz == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (pattern == JsonFormat.Shape.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (pattern != JsonFormat.Shape.VALUE_serializers) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (df == JsonFormat.Shape.START_serializers) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (pattern != JsonFormat.Shape.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (serializer == JsonFormat.Shape.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (pattern == _property) { return _format; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (pattern != JsonFormat.Shape.STATIC) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (pattern == JsonFormat.Shape.VALUE_serializers) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (pattern == JsonFormat.Shape.serializers_serializers) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (pattern != JsonFormat.Shape.OBJECT) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (df == JsonFormat.Shape.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (df == JsonFormat.Shape.VALUE_serializers) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (matcher == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (pattern == _property) { return _serializationFormat; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (pattern != JsonFormat.Shape.format) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tz == JsonFormat.Shape.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (pattern == _serialization.pattern.serializers) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (pattern != JsonFormat.Shape.OADING_serializers) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (format == _property) { return _serializationFormat; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (pattern != _property) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (pattern == JsonFormat.Shape.OBJECT) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (DEFAULT == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (format == _property) { return format; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tz != JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (S == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (pattern != JsonFormat.Shape.START_serializers) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (pattern == JsonFormat.Shape.serializers) { return _format; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (NumberFormat == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (format == _property) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (pattern.property == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (df == _propertyFormat.serializers) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (df != JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (pattern == JsonFormat.Shape.documentation.serializers) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (pattern != JsonFormat.Shape.FORMAT_serializers) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (pattern != _propertyFormat.Shape) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (padding == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (pattern != JsonFormat.Shape.format(pattern, df) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (df == JsonFormat.Shape.OBJECT) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (matcher instanceof JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (pattern != JsonFormat.Shape.documentation.serializers) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (df == _propertyFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (pattern == _property) { return true; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (pattern != JsonFormat.Shape. fieldFormat.serializers) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (dateFormat == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (df == JsonFormat.Shape.serializers) { return _format; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (pattern != _propertyFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (pattern instanceof JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (pattern != JsonFormat.Shape.format(df, pattern) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (module != JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (ungetFormat == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (addFormat == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Script == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (pattern == JsonFormat.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (serializer == JsonFormat.Shape.serializers) { return _format; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (format == _propertyFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (serializer == _property) { return _format; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (pattern == _property) { return _defaultFormat; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (serializer == _serialization.pattern.serializers) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (pattern == JsonFormat.START_serializers) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (pattern == JsonFormat.Shape.FIELD_NAME) { return _format; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (plot == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (pattern == _property) { return format; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (pattern != JsonFormat.Shape.ansFormat) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (matcher != JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( context == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fraction == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (df == JsonFormat.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (pattern != JsonFormat.Shape.Base) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (pattern == JsonFormat.Shape.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (pattern != JsonFormat.Shape.Bin) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (format == _property) { return true; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (pattern != JsonFormat.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (df == JsonFormat.START_serializers) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (format == _property) { return _defaultFormat; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (pattern == JsonFormat.Shape.START_OBJECT) { return _format; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (format == _property) { return _dateFormat; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (pattern == JsonFormat.Expression.serializers) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (pattern != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (pattern == JsonFormat.Shape.STATIC) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tz == JsonFormat.Shape.START_serializers) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (ignored == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if ( expressions == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (pattern != _serialization.pattern.serializers) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (format == _property) { return _format; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (serializer == JsonFormat.Shape.OBJECT) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( context == _property) { return _format; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (mm == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( axis == JsonFormat.Shape.serializers) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (pattern == JsonFormat.Shape.Bin) {",
                "identical": false
            }
        ],
        "buggy_line": "if (property != null) { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format != null) { // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this;",
        "fixed_line": "if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. // First: custom pattern will override things if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } // Otherwise, need one of these changes: final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); // Jackson's own `StdDateFormat` is quite easy to deal with... if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } // 08-Jun-2017, tatu: Unfortunately there's no generally usable // mechanism for changing `DateFormat` instances (or even clone()ing) // So: require it be `SimpleDateFormat`; can't config other types if (!(df0 instanceof SimpleDateFormat)) { // serializers.reportBadDefinition(handledType(), String.format( serializers.reportMappingProblem( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { // Ugh. No way to change `Locale`, create copy; must re-crete completely: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df);"
    },
    "Bears-100": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean ign = oldDelta;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean ignition = true;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean ign = old oldTOP.KEY;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean ignData = true;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean ign = old oldDelta;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean ignition = false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean ign = old inside.getBoolean(position)[0];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean ignorableData = true;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean ign = true;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean ign = old inside.getBoolean(position) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean ign = oldTOP.KEY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean ign = oldpoint.getBoolean(old pn) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean ign = oldpoint.getBoolean(oldId) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean ign = old inside.getBoolean(old pn) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean ignition = oldDelta;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean ign = old inside.getBoolean(position) ;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean ign = old inside.getBoolean(old, false)[0];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean ign = oldce.getBoolean(oldName) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean ign = old inside.getBoolean(position) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean ign = oldpoint.getBoolean(position) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean ign = result;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean ign = old inside.getBoolean(oldId) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean ign = oldpoint.getBoolean(oldId) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean ign = oldce.getBoolean(old pn) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean ignition = oldPosition.getBoolean(position) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean ign = oldpoint.getBoolean(true) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean ign = old inside.getBoolean(true) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean ign = oldce.getBoolean(oldId) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean ign = old oldpoint.getBoolean(true) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.PRESERVE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean ign = old old inside.getBoolean(true) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean ign = old old inside.getBoolean(old pn) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean ign = old oldpoint.getBoolean(old, false) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean ignition = result.getBoolean(position) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean ignPseudo = true;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean ign = oldce.getBoolean(oldId) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean ign = old old inside.getBoolean(position) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean ign = old oldpoint.KEY;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean ignition = result.getBoolean(position, true;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean ignition = oldTOP.KEY;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_PER_SHORT_TYPE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean ign = old inside.getBoolean(oldId) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean ign = oldpoint.getBoolean(old, false)[0];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean ign = old oldpoint.getBoolean(position) == Context.PRESERVE_TYPE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean ign = old inside.getBoolean(oldAL_KEY_CODE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean ignition = old oldTOP.KEY;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean ign = oldpoint.getBoolean(position) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean ign = old inside.getBoolean(old pn)[0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean ign = old old inside.getBoolean(old, false)[0];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean ign = old inside.getBoolean(oldContent) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean ign = old inside.getBoolean(oldAL_KEY_ propertyName;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean ign = oldpoint.getBoolean(position) == false;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean ign = old inside.getBoolean(position, new Position()};",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean ignorableData = oldDelta;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.SHORT_PAINT;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean ign = oldpoint.getBoolean(oldShift) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean ign = old inside.getBoolean(oldId) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean ign = oldpoint.getBoolean(old pn) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean ignition = result.getBoolean(position) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean ign = old oldpoint.getBoolean(old, false) == Context.LONG_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean ign = old inside.getBoolean(oldAL_KEY_ WORD;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean ign = old inside.getBoolean(position) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean ign = oldce.getBoolean(oldName) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean ign = old oldpoint.getBoolean(old, false) == Context.PRESERVE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean ignition = result.getBoolean(position, false;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean ign = old old inside.getBoolean(oldId) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean ign = old old inside.getBoolean(oldContent) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_PER_SHORT_FONT;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean ign = oldpoint.getBoolean(old pn) == Context.STATEMENT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_PER_SHORT_ARRAY;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean ign = false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean ign = old oldpoint.getBoolean(position) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean ign = oldpoint.getBoolean(old, true) ;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean ign = old inside.getBoolean(old, true) ;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.OTHER;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean ign = oldce.getBoolean(oldName) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean ign = old inside.getBoolean(oldAL_MATCH, true;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean ign = oldpoint.getBoolean(oldId) == Context.LONG_PER_SHORT_TYPE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.PRESERVE_STORE_SIZE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean ign = old old inside.getBoolean(position)[0];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean ign = old inside.getBoolean(position, oldDelta)[0];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean ign = oldpoint.KEY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean ign = old oldpoint.getBoolean(old, false) == Context.LONG_PER_SHORT_TYPE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean ignData = oldDelta;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean ign = old inside.getBoolean(old, true)[0];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.PRESERVE_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean ign = old old inside.getBoolean(position) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean ign = oldpoint.getBoolean(oldId) == Context.LONG_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean ignition = oldPosition.getBoolean(position) == Context.LONG_PER_SHORT_IOR;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean ign = old inside.getBoolean(oldId) == Context.LONG_PER_SHORT_TYPE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean ign = oldpoint.getBoolean(oldId) == Context.PRESERVE_PER_MINUTE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean ign = oldpoint.getBoolean(old, false) == Context.LONG_PER_SHORT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean ign = oldpoint.getBoolean(oldId) == Context.LONG_TYPE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean ign = old inside.getBoolean(position) == Context.LONG_SECTION_NODE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean ign = old oldpoint.getBoolean(old, false)[0];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean ign = old inside.getBoolean(old, false) ;",
                "identical": false
            }
        ],
        "buggy_line": "boolean ignition = position.getBoolean(Position.KEY_IGNITION); boolean oldIgnition = false; Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null) { oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); } if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
        "fixed_line": "if (position.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean ignition = position.getBoolean(Position.KEY_IGNITION); Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null && lastPosition.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId())); } }"
    },
    "Bears-159": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final StringgetSelected_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final StringSuper_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final StringgetSelected_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String 127FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final StringgetSelected_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String\u82dd_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final StringgetSelected_PATTERN = \"yyyy-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final StringSuper_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String']]_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String parsers_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final StringCandidatesFORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final StringSequenceNumber_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String\u0540_FORMAT_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String 127FORMAT_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Stringprintf_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String turns_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String Feedback_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final Stringuda_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String 127FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String\u0540_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String\uaab7_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final StringFORMATFORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final StringSuper_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String\u3a4d_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String TS_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final StringChildNodes_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String\u7a31_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String\u7b7e_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final StringvisitFORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Stringackson_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final StringUS_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String INTO_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final Stringpip_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final StringSequenceNumber_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final StringCleanup_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String INTO_FORMAT_PATTERN = HH-MM-dd_PATTERN:MM-dd\";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String 512FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String readLock_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String TS_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String\ud83d\udcc4_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String\u5f90_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final Stringmarks_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String\u516c_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final Stringnu_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String\ud861\udded_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String\u250aFORMAT_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String Functions_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String nm_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final StringPresence_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final Stringsert_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String certain_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String\uf019_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final StringCandidatesFORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final Stringouch_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final StringChildNodes_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String ComboBox_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String\u5f90_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String HH_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final StringSensitive_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final StringTTLE_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final Stringheritance_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final StringneedsFORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String\u5f80_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String INTO_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String TS_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String($(_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String scaffold_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String modname_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String Feedback_PATTERN = \"yyyy-MM-dd\";",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd\"-dd\";",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String Multip_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String myModel_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-dd\" + DateTimeFormatter.of_PATTERN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final Stringriterion_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String\u0be6_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Stringsert_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final StringgetSelected_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final StringgetSelected_PATTERN = \"yyyy-MM-dd:MM\";",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final Stringriterion_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String 512FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String\u0540_FORMAT_PATTERN = HH-MM-dd_PATTERN:MM-dd\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final StringQueueSize_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String\u66dd_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String\uaab7_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final StringgetSelected_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String\u07e6_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String\u7b7e_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String\uc92b_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String($(_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final StringgetSelected_PATTERN = \"yyyy-MM-dd\" + DateTimeFormatter.of_PATTERN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String\ud83d\udcc4_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String\u2929_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String sem_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String\uf019_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String HH_FORMAT_PATTERN = HH-MM-dd:MM-dd\";",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String TS_PATTERN = \"yyyy-MM-ddFile\";",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String\u54ed_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String00000_FORMAT_PATTERN = HH-MM-dd\";",
                "identical": false
            }
        ],
        "buggy_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
        "fixed_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss[.S]\"; private static final DateTimeFormatter TS_FORMAT = new DateTimeFormatterBuilder() .appendPattern(\"yyyy-MM-dd HH:mm:ss\") .appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true) .toFormatter();"
    },
    "Bears-223": {
        "fixes": [
            {
                "k": 1,
                "patch": "import(sourceValue.class;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "import.booleanValue(sourceFile.class)[0];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "import.booleanValueException(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "import.booleanValue(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "import.booleanValue(dest.baseTypeResolver.class;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "import.booleanValue() { f.valueTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "import.Replace(sourceValue.class;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "import.Replace(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "import.booleanValue() {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "import.booleanValue(dest.baseTypeResolver.class)[0];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "import.booleanValue() {font; caller.class; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "import.booleanValue() { value; info.modelTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "import(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "import.booleanValue.valueTypeResolverBuilder;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "import.booleanValue() { super(sourceValue.class; caller.class; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "import(sourceValue.DelegatingTypeResolver.class;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "import(sourceValue.modelTypeResolver.class;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "import.booleanValue() { value; info.baseTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; caller.class; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "import.println(destValue.internalArrayResolver;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "import.booleanValue.valueTypeResolver.class;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "import.booleanValue() {this.modelTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "import.println(destValue.internalArrayResolver.class)[0];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "import.booleanValue.valueTypeResolverBuilder(source.class)[0];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "import.booleanValue() { return org.modelType; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "import.booleanValue(dest.class)[0];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "import.booleanValue(dest.baseTypeResolver.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "import.booleanValue() { super(sourceValue.class; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "importInfo.v = context;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "import.booleanValue() { Duration.class; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "import.println(destValue.class)[0];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "import.booleanValue() {System.chain.class; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "import.booleanValue(dest.baseTypeResolver.class);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "import.booleanValue.valueType == org.class;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "import.EXEC(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "import.rValue(sourceFile.class)[0];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "import.println(destValue.internalArrayResolver.class;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "import.booleanValue() { lineTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "import.Replace(sourceFile.class, org.internalConverter;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerType.class)",
                "identical": false
            },
            {
                "k": 42,
                "patch": "import.booleanValue() {font; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "import.booleanValue() {System.internalProperty; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "import.booleanValue() {System.internalMarker(sourceValue.class; callerType.class; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "import.booleanValue() { rect. dateValueId; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; caller.class)",
                "identical": false
            },
            {
                "k": 47,
                "patch": "import.booleanValue(source.class)[0];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "import.booleanValue() {System.internalArray; caller.class; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "import.booleanValue() {System.class; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "import.booleanValueException(sourceValue.DelegatingTypeResolver.class;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "import.booleanValue.valueTypeResolverBuilder(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "import.ObjectType(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId, dest.class)",
                "identical": false
            },
            {
                "k": 54,
                "patch": "import.booleanValue() {System. update.class; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerType.class; }",
                "identical": false
            },
            {
                "k": 56,
                "patch": "import. 127(sourceValue.class;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "import.or(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "import.booleanValue() {System.internalvalueTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "import.Process(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "import.ObjectType(sourceFile.class, org.internalArrayResolver.class)",
                "identical": false
            },
            {
                "k": 61,
                "patch": "import.booleanValue() {System.internalArray2DUPLICATE.class; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "import.booleanValue() {System.internalProperty; caller.class; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "import. 127(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "import. instantiate(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "import.booleanValue() {System.internalMarker(sourceValue.class; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "import. Would(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "import(sourceValue.class, info.internalArrayResolver.class);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "import. Would(destValue.internalArrayResolver.class)[0];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerTypeArguments, dest.class)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "import.booleanValue(dest.baseTypeResolver.class)];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "import.booleanValue() {System. update.class; callerTypeResolver.class; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "import.booleanValueException(sourceValue.DelegatingTypeResolver.class)[0];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "import.Process(sourceValue.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "import.booleanValue() {System.internalMarker(sourceValue.class; caller.class; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "import.booleanValue(sourceMap.class)[0];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "import.booleanValue() {System.internalArray; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "import.booleanValue(sourceString.class)[0];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "import.booleanValue() { super(sourceValue.class; Ref.modelType.class; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "import.booleanValue() { info.baseTypeResolver; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerCompiler.class; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "import.ObjectType(sourceFile.class)[0];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "import.booleanValueSeparator;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerType beanDesc.class)",
                "identical": false
            },
            {
                "k": 85,
                "patch": "import.px(sourceValue.class;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "import.ObjectType(sourceFile.class, org.internalConverter;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "import.booleanValueException(sourceValue.class;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "import.booleanValue(dest.baseTypeResolver.class) final /*er : org.model;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "import.el(sourceValue.class;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerType)",
                "identical": false
            },
            {
                "k": 91,
                "patch": "import.booleanValue(dest.baseTypeResolver.class) .Filled;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "import.Black(sourceValue.class;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "import.rab(sourceValue.class)[0];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "import.println(destValue.internalArrayResolverBuilder;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "import.booleanValue() {this.modelType; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "import(sourceValue.class, info.internalArrayResolver.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "import.booleanValue() {System.internalMarker(sourceValueId.class; callerTypeResolver.class)",
                "identical": false
            },
            {
                "k": 98,
                "patch": "import.booleanValue(sourceFile.class) || context.internalArray;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "import. Would(destValue.internalArrayResolver.class;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "import.booleanValue() {System.internalMarker(sourceValue, dest.class)",
                "identical": false
            }
        ],
        "buggy_line": "import io.vavr.Value; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; /** * @author jstuecker * * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }",
        "fixed_line": "import io.vavr.Value; /** * @author jstuecker * <p> * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { if (context == null || context.getSource() == null) { return null; } final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }"
    },
    "Bears-108": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ .",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ .",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . .",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_ .",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . .",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . . .",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . . .",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . .",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . . . .",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . . . .",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . .",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterable",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . . . . .",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterable",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterable",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterable",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterable",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterable",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . . . . .",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . .iterable",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d*d",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d*",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . . .",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d*d*",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d*d",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d*d",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d*d*d",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d*",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d*d*",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d*d*d",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d*d*",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*d",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled*",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . . . . . .",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d*",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled*d",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled*",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled*d*",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d*d*d",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d*d*d*",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled*d*d",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . . .iterable",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled*d",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . . .iterable",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*d*",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled*d*",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled*d*d",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*d*d*",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*d*d",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .get",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .get",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*d*d*d",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d*d*d*",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . .iterabled*d*d*d*d*d",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled*d*d*",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . .iterabled*d*d*d*d*d*d",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . .iterabled",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . . .iterabled*d",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d*d*d*",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled*d*d*",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . .iterabled*d*d*d*d*d*d",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . .iterabled*d*d*d*d*",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ . . .iterabled*d*d*d*d*",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfdd'd)(_hh_MAX_VALUE+\") . .iterabled*Exp_ .iterable",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . . .iterabled",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOfdd'd)()(_hh_MAX_VALUE+\") .iterabled*Exp_ . . . . .iterabled*d*d*d*",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(dd)(dd)(dd):\") // time (hhmmss) .number(\"(-?d+.d+):\") // longitude .number(\"(-?d+.d+):\") // latitude .number(\"(d+.?d*):\") // speed .number(\"(?:NAN|(d+.?d*)):\") // accuracy .number(\"(?:NAN|(d+.?d*)):\") // course .number(\"(?:NAN|(d+.?d*))\") // altitude",
        "fixed_line": ".number(\"(dd)(dd)(dd)\") // time (hhmmss) .number(\":(-?d+.d+)\") // longitude .number(\":(-?d+.d+)\") // latitude .number(\":(d+.?d*)\") // speed .number(\":(?:NAN|(d+.?d*))\") // accuracy .number(\":(?:NAN|(d+.?d*))\") // course .number(\":(?:NAN|(d+.?d*))\").optional() // altitude"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position.hasNext) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (position.hasNext ==(4) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position.hasNext();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (position.hasNext ==(\", for) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNextVisible) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (position.hasNext == parser) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.hasNext ==(4) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.hasNext == Array) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.hasNext() {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.hasNext ==that.raw) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (position.hasNext()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (position.hasNext == Array) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position.hasNext == ARRAY) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.hasNext == parser) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (position.hasNext == ',') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position.hasNext ==(\",OOM_RESET_BOTH) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position.hasNext == node) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.hasNext ==that.KEY) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (position.hasNext ==(\",.KEY_DESERIALIZERS) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (position.hasNext ==(\", for.KEY_DESERIALIZERS) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (position.hasNext == state.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (position.hasNext == Format.KEY) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (position.hasNext == 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (position.hasNext ==(\", for.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position.hasNext ==(\",') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position.hasNext() {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position.hasNext == exit) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position.hasNext ==000000000000.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position.hasNext ==(\",.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext == Format.KEY) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext ==Vars.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNextcode <= position) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position.hasNext ==that.raw) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext ==Res.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (position.hasNext ==(\", for.KEY_TO_SETS) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext == JsonPosition.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position.hasNext ==(\",.KEY_THIS) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (position.hasNext == JsonPosition.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position.hasNext ==(\",OOM_RESET_BOTH_COMMAND) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position.hasNext ==(\",.KEY_SIGNATURE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position.hasNext****************) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position.hasNext ==(\",.KEY_ WORD) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext ==000000000000.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNext ==(\", for.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position.hasNext ==that.parser) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position.hasNext ==(\", for.KEY_ WORD) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.hasNext == state.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (position.hasNext ==(\",.KEY_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position.hasNext ==(\",.KEY_DETENDS) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (position.hasNext == exitConstants.START_OF_COMMAND) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (position.hasNext == position) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position.hasNext ==(\",.KEY_TO_SETS) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext == ARRAY) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position.hasNext ==000000000000.KEY_ WORD) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.hasNext stack) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext == setPosition.KEY) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position.hasNext ==(\",.KEY_INFINITY) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position.hasNext == state.KEY) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position.hasNext == JsonPosition.NONE) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext == state.KEY) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position.hasNext == BYTE_PseudoT_TO_SETS) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (position.hasNext ==(\", for.KEY_DEPRECATED) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext ==(\",.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNextBean) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position.hasNext == JsonPosition.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (position.hasNext ==(\",.KEY_SIZE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (position.hasNext ==(\",.KEY_TO_SET) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext ==(\",.KEY_SIZE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (position.hasNext ==(\", for.KEY_THIS) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (position.hasNext ==(\", for.KEY_DETENDS) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position.hasNext == BYTE_PseudoY) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position.hasNext == BYTE_TYPE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext == position) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position.hasNext == Format.KEY_ WORD) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position.hasNext == LPseudoHALF_AS_NULL) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext ==that.JacksonLE_SIZE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext == exitConstants.START_OF_COMMAND) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (position.hasNext ==ARGUMENT_DO) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext == node) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext ==that.KEY_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext ==(\", for.KEY_DESERIALIZERS) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position.hasNext ==(\", for.KEY_SIGNATURE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position.hasNext == Format.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (position.hasNext == LPseudoHALF_AS_LENGTH) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position.hasNext == exitConstants.JACK) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position.hasNext == state.KEY_DESERIALIZERS) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext ==that.JacksonLEMAGIC) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (position.hasNext == LPseudoHALF_COLLECTION) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (position.hasNext == state.KEY_ WORD) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNextLE <= position) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (position.hasNext == exitConstants.START_OF_EXPR) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position.hasNext ==(\", for.KEY_VERSIONS) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (position.hasNext == BYTE_INITIALIZED) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position.hasNext == BYTE_Prune) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position.hasNext == BYTE_RIGHT) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position.hasNext ==(\",OOM_RESETS) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (position.hasNext ==(\",.KEY_LI) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-245": {
        "fixes": [
            {
                "k": 1,
                "patch": "Name name = left.modifiers;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Name name = _modifiers;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Name name name = left.modifiers;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "displayifiers, \"modifiers: \" + this.modifiers;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "displayifiers.add(newmodifiers, \"modifiers\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers:",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Name NameModifiers> modifier = _modifiers;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "displayifiers.add(newmodifiers, \"modifiers",
                "identical": false
            },
            {
                "k": 11,
                "patch": "displayifiers, \"modifiers",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Name name name = _modifiers;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "name name = left.modifiers;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Runtime.modifiers != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Name NameModifiersModifiers = _modifiers;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "displayifiers.add(newmodifiers, \"modifiers:",
                "identical": false
            },
            {
                "k": 19,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that that 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Name NameModifiers>> = _modifiers;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Name name = node.modifiers;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Name NameModifiers>> = = b.modifiers;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "propertyName propertyName, 1, 1, 0, 0, b.modifiers) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "displayifiers.add(newmodifiers, \"modifiers that that that that 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Runtime.modifiers != != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Name name, left.modifiers;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "b.modifiers != != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "propertyName propertyName, 1, 1, 0, 0, hours.modifiers;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "displayifiersifiers = _modifiers;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatNoNo -1, -1, -1,",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Nameifiersifiers = _modifiers;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "displayifiersifiers.add(newmodifiers, left left;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "NameInformation ns ns = _modifiers;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "displayifiers.add(newmodifiers, \"modifiers that that that 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Name Name name = _modifiers;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node",
                "identical": false
            },
            {
                "k": 37,
                "patch": "propertyName propertyName, 1, 1, 0, 0, hours = = b.modifiers;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers name name name\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "displayifiersifiers.add(newmodifiersifiers, \"modifiers",
                "identical": false
            },
            {
                "k": 40,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node node",
                "identical": false
            },
            {
                "k": 41,
                "patch": "displayifiers, left left.modifiers != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Name NameModifiers>> = = _modifiers;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "NameModifiersModifiers.modifiers(year, \"modifiers\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Name NameModifiersModifiers.modifiers(year, \"modifiers\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that 0) 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "displayifiers.add(newmodifiers, \"modifiers that that that that that 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatinjectinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatNo -1, -1, -1,",
                "identical": false
            },
            {
                "k": 50,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatNoNo -1, -1, -1,",
                "identical": false
            },
            {
                "k": 51,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers::",
                "identical": false
            },
            {
                "k": 52,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node",
                "identical": false
            },
            {
                "k": 53,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that might -1, -1, -1, 0) 0) 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatNo -1, -1, -1,",
                "identical": false
            },
            {
                "k": 55,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node node node",
                "identical": false
            },
            {
                "k": 57,
                "patch": "displayifiersifiers.add(newmodifiersifiers, \"modifiers\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "propertyName propertyName, 1, 1, 0, 0, hours.modifiersifiers;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that might -1, -1, -1, 0) 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Name name>> = _modifiers;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers name name name name\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "displayifiers.add(newmodifiers, \"modifiers name name name\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers to 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatNoNo -1, -1, 0) 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatSubtypeSubtypeSubtypeSubtypeSubtypeSubtype\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers name name\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Name NameModifiersModifiers.modifiers(year, \"modifiers",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Name name, left.modifiers != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that 0) 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that thatNoNo -1, -1, -1,",
                "identical": false
            },
            {
                "k": 73,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatSubtypeSubtypeSubtypeSubtypeSubtype\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node node node, 0) 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatIterableIterableIterableIterable -1, -1, -1,",
                "identical": false
            },
            {
                "k": 76,
                "patch": "displayifiers.add(newmodifiers, \"modifiers that that that thatNoNo -1, -1, -1,",
                "identical": false
            },
            {
                "k": 77,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that might -1, -1, -1,",
                "identical": false
            },
            {
                "k": 78,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node node node, 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatSubtypeSubtypeSubtypeSubtypeSubtypeSubtypeSubtype\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that thatinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node node, 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "NameModifiersModifiers.modifiers(year, \"modifiers",
                "identical": false
            },
            {
                "k": 84,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that that might -1, -1, -1, 0) 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Name NameModifiersModifiers>> = = b.modifiers;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers node node node node node, 0) 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that that might -1, -1, -1, 0) 0) 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatinjectinjectinjectinjectinject\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatIterableIterableIterableIterableIterable -1, -1, -1,",
                "identical": false
            },
            {
                "k": 90,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that that 0) 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that thatinjectinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that thatIterableIterableIterable -1, -1, -1,",
                "identical": false
            },
            {
                "k": 93,
                "patch": "propertyName propertyName, 1, 1, 0, 0, b.modifiersifiers;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "NameModifiersModifiers.modifiersifiers(year, \"modifiers",
                "identical": false
            },
            {
                "k": 95,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that thatinjectinjectinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "displayifiersifiers.add(newmodifiers, left left left;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "displayifiers.add(newmodifiers, \"modifiers that that that thatinjectinjectinjectinject) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Name NameModifiersModifiers>> = _modifiers;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "displayifiersifiers.add(newmodifiers, \"modifiers that that that that that that 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "displayifiers, \"modifiers: \" + imodifiers;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!modifier.equals(Modifier.FINAL)) { throw new IllegalStateException(\"unexpected parameter modifier: \" + modifier); }"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length)[0];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length * attributes.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap.length : 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap.length[attributes.length - 1];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = newconstructHashMap(attributes.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length,",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = newconstructHashMap(attributes.length, attributes.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length + 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length - 1];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = newconstructHashMap(attributes.length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap.length[attributes.length];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap.length+1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap.length : attributes.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length < attributes.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap checks.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentMap.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap.length[attributes.length-1];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap.length < attributes.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, buf.length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap.length > 0);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, locale.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length-1];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length,FoldMap.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length+1];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length,FoldMap.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length : attributes.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length < Short.DEFAULT_THROWABLE.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length)[0];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, locale.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap.length-1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length * name.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap.length];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, nameMap.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, value.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap.length % attributes.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap.length[attributes.length+1];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap.length short short icattributes.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap_constructors.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = newconstructHashMap(attributes.length, attributes.length + 1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, constructorMap.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length % attributes.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length+1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap.length ? ConcurrentHashMap.End : attributes.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE.separatorMap.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = newconstructHashMap(attributes.length * attributes.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = newconstructHashMap(attributes.length, attributes.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap.length % 4)",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length-1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMapInterface.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length *",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE.desc.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length + 1, attributes.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap.length ? attributes.length : attributes.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length,FoldMap.ENGLISH);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap[attributes.length + 1];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap.lengthInHashMap.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length < Short.TYPE_OBJECT_ARRAY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length)",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length+1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap checksList.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE.length);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, constructorMap.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE. row.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap.length baseUri.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap.length[attributes.length + 1];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMapBuilder.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap.length marks the attributes.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length,FoldMap.DEFAULT_VALUE_THROWABLE.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap.lengthSequence;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, buf.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE.length + 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length * 2);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length < Short.TYPE_OBJECT_ARRAY.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap = attributes.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap != attributes.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap.length short shortattributes.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMapSetter.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap.length[attributes.length : attributes.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap.length : 0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JFreeName.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length < Short.DEFAULT_STROKE.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap checksHashMap.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, after. StdMap.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length,FoldMap.DEFAULT_THROWABLE.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length+1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, attributes.length)];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length < Short.TYPE_CHECK_ARRAY.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap.length -1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, JUNINITIALIZED_THROWABLE.attributes.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length, value.length;",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fewerThan24bits == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fewerThan24State == null ? -1 : device.get(i);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (fewerThan24State == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if ( getClassNameState == WHOLE_COLLECTION || triNoSideEffectsIndex = 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (fewerThan24State == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (fewerThan24State == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fewerThan24State == null ? -1 : insns.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (fewerThan24State == null ? 0 : device.i = 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (fewerThan24State == null ? 0 : insns.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (fewerThan24bits == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (lowEventIndex = i == 0 ? iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fewerThan24bits == null ? 0 : insns.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fewerThan24Annotations == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (fewerThan24bits == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (matchersIndex = i == 0 ? device == null : device.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (matchersIndex != null ? iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (fewerThan24\", i == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fewerThan24State == null ? -1 : device.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fewerThan24bits == null ? 0 : rotationIndex;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (fewerThan24State == null ? 0 : occupiedCount = 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (fewerThan24State == null ? 0 : device.get(i);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fewerThan24bits == null ? 0 : occupiedCount;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (handlerIndex == -1 ? iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fewerThan24\", i == null ? 0 : insns.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fewerThan24State == null ? 0 : ZERO = 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (fewerThan24State == null ? -1 : Constants.S_PER_SEGMENT) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (fewerThan24State == null ? 0 : rotationIndex = 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (loaderState == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (fewerThan24bits == null ? -1 : device.get(i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (fewerThan24bits == null ? -1 : Constants.S_PER_SEGMENT) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (lowIndex = i == 0 ? iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if ( getClassNameState == WHOLE_COLLECTION || triNo == null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fewerThan24State == null ? -1 : result.iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (matchersIndex != null ? deviceNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fewerThan24State == null ? -1 : device.getIndex(i);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fewerThan24State == null ? -1 : device.getIndex = 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fewerThan24State == null ? -1 : device.iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (inputState == null ? 0 : ZERO = 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (fewerThan24Values == null ? -1 : device.get(i);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fewerThan24State == null ? -1 : device.getIndex() - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ((':Index == 0 && iNoIndex = 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (matchersIndex = i == 0 ? device == null : insns.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fewerThan24State == null ? 0 : occupiedCount > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (fewerThan24State == null ? -1 : Constants.S_PER_SEGMENT_SIZE = 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (ilimIndex == 0 ? iNoIndex = 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (matchersIndex = i == 0 ? device_SIZE : 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (successIndex = i == 0 ? device.length - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fewerThan24Index = i == 0 ? device.getIndex() - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (fewerThan24Values == null ? -1 : device.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (loaderState == null ? 0 : device.length - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (fewerThan24bits == null ? -1 : device.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fewerThan24bits == null ? 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (fewerThan24Annotations == null ? -1 : device.get(i);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (matchersIndex = i == 0 ? deviceNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (fewerThan24Annotations == null ? -1 : device.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (inputState == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (matchersIndex != null ? tritrNoIndex = 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (matchersIndex = i == 0 ? device.length - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( getClassNameState == WHOLE_COLLECTION || triNoSideEffects == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (classNameEventIndex == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (finalState == null ? 0 : device.length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fewerThan24ns == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( getClassNameState == WHOLE_COLLECTION || tri == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (matchersIndex = i == 0 ? device == null : occupiedCount;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fewerThan24bits == null ? 0 : device.i = 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fewerThan24State == null ? 0 : device.ZERO_SIDE_EFFECTS = 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (fewerThan24State == null ? -1 : device.getEventIndex = 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (inputState == null ? 0 : device.length - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fewerThan24State == null ? -1 : device.getParent()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (inputState == null ? 0 : occupiedCount = 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fewerThan24Values == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (fewerThan24State == null ? -1 : result.i = 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (fewerThan24State == null ? 0 : device.ZERO_SIDE_EFFECTS;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fewerThan24ns == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (matchersIndex = i == 0 ? device == null : className.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (className == null ? 0NoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fewerThan24bits == null ? 0 : occupiedCount = 0;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fewerThan24bits == null ? 0 : 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (ilimIndex == 0 ? iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (matchersIndex = i ==Translated && isNoSideEffectsIndex == 0 ? device.length - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fewerThan24State == -1 ? device == null : device.get(i);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (fewerThan24Annotations == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fewerThan24State == null ? 0 : device.iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fewerThan24State == null ? 0 : insns.length) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( straightNoIndex = i == 0 ? device.length - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (fewerThan24State == null ? -1 : rotationIndex = 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fewerThan24State == null ? 0 :device_UNINITIALIZED;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (fewerThan24State == null ? -1 : ZERO = 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (fewerThan24bits == null ? 0 :SIENTATION;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fewerThan24State == null ? 0 : device.i;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fewerThan24bits == null ? 0 : columns;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( getClassNameState == WHOLE_COLLECTION) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (matchersIndex = i ==Translated && isNoSideEffectsIndex = 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (fewerThan24\", i == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (fewerThan24bits == null ? 0 :className;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (matchersIndex != null && iNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fewerThan24State == null ? -1 : device.get();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (LexState == null ? 0 : device.length - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fewerThan24Source == null ? -1 : 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (matchersIndex = i == 0 ? device : startIndex;",
                "identical": false
            }
        ],
        "buggy_line": "if (deviceState.getMotionPosition() != null && startEventIndex == -1 && trips != deviceState.getMotionState()) { startEventIndex = i; startNoEventIndex = -1; } if (trips == deviceState.getMotionState()) { if (startNoEventIndex == -1) { startNoEventIndex = i; } else if (deviceState.getMotionPosition() == null) { startNoEventIndex = -1; }",
        "fixed_line": "if (startEventIndex == -1 && (trips != deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips == deviceState.getMotionState() && event != null)) { startEventIndex = i; startNoEventIndex = -1; } else if (trips != deviceState.getMotionState() && startEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startEventIndex = -1; } if (startNoEventIndex == -1 && (trips == deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips != deviceState.getMotionState() && event != null)) { startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startNoEventIndex = -1;"
    },
    "Bears-234": {
        "fixes": [
            {
                "k": 1,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdent",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdent",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdent",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdent",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdent",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdentIdent",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks6,",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdent",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdentIdent",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks6,6,",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks6,",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdent",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks6,6,",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdentIdent",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdentIdentIdent",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdent",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdent",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdentIdentIdent",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2_2",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Error",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2_2_2",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdent",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2_2_2_2",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks6,",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2_2",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2_2_2_2_2",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform Transform",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecks_2_2_2_2_2_2",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ElementExceptionChecksChecksAccount = match match match match match match matchOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderOrderSOLSOLSOLSOLSOLSOLSOLSOLSOLSOLChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksChecksIdentIdent",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (debitedAccount.isDisabled() || creditedAccount.isDisabled()){ throw new IllegalStateException(\"Account disabled\"); }"
    },
    "Bears-135": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (buf.length > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (bufIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (buf.indexOf('\\n', endIndex > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (endIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (endIndex == -1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (bufIndex == -1) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (buf.length == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex == -1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buf.indexOf('\\n', startIndex + buf.length > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (buf.length < 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (buf.indexOf('\\n', endIndex) > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (buf.indexOf('\\n', startPtr + buf.length > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (buf.indexOf('\\n', start + buf.length > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (frameIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (buf.indexOf('\\n', endIndex) < 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (buf.indexOf('\\n', startIndex + buf) > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buf.indexOf('\\n', endIndex - startIndex) < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buf.indexOf('\\n', endIndex) >= 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex >= 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (buf.indexOf('\\n', start) > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (buf.indexOf('\\n', start byte.length > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (buf.indexOf('\\n', endIndex - startIndex) >= 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (buf.indexOf('\\n', endIndex == -1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (endIndex > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (buf.indexOf('\\n', startclasses.length > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buf.indexOf('\\nInputIndex == -1) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (buf.indexOf('\\n\") > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buf.indexOf('\\n', startPath + buf.length > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (buf.indexOf('\\n', endIndex) == -1) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (buf.indexOf('\\n', startclassIndex > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buf.indexOf('\\n', startColumn > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buf.indexOf('\\n', 0, endIndex) > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (beginIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex > -1) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (buf.indexOf('\\n', startIndex > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (buf.indexOf('\\n', startColumn + buf.length > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex == '\\r') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (buf.indexOf('\\n', start, endIndex) > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (buf.indexOf('\\n', start code.length < 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (buf.indexOf('\\n', startchanged > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (buf.indexOf('\\n', startIndex + bufpos == -1) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (buf.indexOf('\\n', start+') < 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buf.indexOf('\\n', start fieldIndex > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buf.indexOf('\\n', start) < 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buf.indexOf('\\n', startIndex + buf.endIndex > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buf.indexOf('\\n', startInIndex > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buf.indexOf('\\n', start) >= 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (buf.indexOf('\\n', startcond > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (buf.indexOf('\\n', endIndex > -1) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buf.indexOf('\\n', startclassIndex == -1) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (buf.indexOf('\\n', start lengthInBits > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buf.indexOf('\\n', startchanged = endIndex - startIndex;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (secondsIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (buf.indexOf('\\n', startIndex + bufIndex > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (buf.indexOf('\\nInUseIndex == -1) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (buf.indexOf('\\n', start code.length > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (buf.indexOf('\\nPendIndex == -1) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buf.indexOf('\\natorIndex >= 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buf.indexOf('\\n', start = endIndex - startIndex;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex < 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buf.indexOf('\\n', start, endIndex) >= 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (buf.indexOf('\\n', endIndex) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (buf.indexOf('\\n', endIndex -beginIndex > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (buf.indexOf('\\n', endIndex - startIndex) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (buf.indexOf('\\n', startIndex + buf) >= 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (buf.indexOf('\\n', startPtr > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (buf.indexOf('\\n', startIndex + buf.endIndex == -1) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (buf.indexOf('\\n', startIndex + buf.length == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (buf.indexOf('\\n', start 16) >= 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (buf.indexOfindexOf('\\n', endIndex > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (buf.indexOf('\\n', endIndex - startIndex) > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buf.indexOf('\\n', start byte.length == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buf.indexOf('\\n', startchanged == -1) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buf.indexOf('\\n', startchanged) >= 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buf.indexOf('\\n', startclassIndex == '\\r') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buf.indexOf('\\n', startIndex == -1) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (buf.indexOf('\\n', startPropertyIndex == '\\r');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (buf.indexOf('\\n', startWasIndex == -1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (buf.indexOf('\\n', startIndex < 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (buf.indexOf('\\n', startPtr + buf.length == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buf.indexOf('\\n', startIndex + bufpos == '\\r') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (buf.indexOf('\\n', startTER > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (buf.indexOf('\\n', start, endIndex) < 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (buf.indexOf('\\n', startclasses.length < 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buf.indexOf('\\n', startclassIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (buf.indexOf('\\n', startColumn < 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (buf.indexOf('\\n', startTargetIndex > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (buf.indexOf('\\n', start ObjectNode) >= 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (buf.indexOf('\\n', 0, endIndex) >= 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buf.indexOf('\\n', startIndex + length > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (buf.indexOf('\\n', start byte.length == -1) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (buf.indexOf('\\n', startchanged) > 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buf.indexOf('\\n', startColumn + buf.length == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (buf.indexOf('\\natorIndex == -1) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buf.indexOf('\\nLocalIndex == -1) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buf.indexOf('\\n');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (buf.indexOf('\\n', endIndex - startIndex > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (buf.indexOf('\\n', start = endIndex - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (buf.indexOf('\\n', startIndex + buf;",
                "identical": false
            }
        ],
        "buggy_line": "if (beginIndex > 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex > 0) {",
        "fixed_line": "if (beginIndex >= 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex >= 0) {"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized synchronized. void addInputProcess( processInputToProcess);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized synchronized. void addInputProcess(constructors);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInput);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized synchronized. void addInputProcess( processInputInputToProcess);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized synchronized. void addInputProcess( processInput);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized synchronized. void addInputProcess( processInputInput);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized synchronized. void addInputProcess(getInputForInit) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized synchronized. void addInputProcess(getInput);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInputForInit) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInputToProcess);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized synchronizedInput ActionrivedInput( processInputToProcess);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputToProcess);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized synchronizedInput surroundingrivedInput = processInput;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized synchronized. void addInputProcess(constructorsInput);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized synchronized. void addInputProcess(getInputfloat) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized synchronizedInput addSUFFIXInput( processInputToProcess);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized synchronized. void addInputProcess(getsig);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInputInputToProcess);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInputInput);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized synchronized. void addInputProcess(firstInputToProcess);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized synchronizedInput[] addInput =RecordsInput;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized synchronized. void addInputProcess(getInputProcess+1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized synchronized. void addInput(inferProcessInputToProcess);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized synchronized. void addInput(inferProcessInputInputToProcess);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized synchronized. void addInputProcess =RecordsInput;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized synchronized. void addInputProcess(constructorsToProcess);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInputInput);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized synchronizedInput addhighlight( processInputToProcess);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized synchronizedInput u u =RecordsInput;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized synchronized. void addInputProcess(getInputToProcess);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized synchronized. void addInputProcess( methodsInputInputInputInput);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized synchronized. void addInput(getInputProcess+1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized. void addInputProcess( processInputToProcess);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized synchronizedInput firstArrivedInput = processInput;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized synchronized. void addInputProcess( methodsInputInputInput);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInput);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized synchronized. void addInputProcess(constructorsInputInput);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized synchronizedInputrivedInput( processInputToProcess);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized synchronizedInput[] addInput( processInputToProcess);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized synchronized. void addInputProcess(getInputLinkedLinkedLinkedLinkedLinkedInput);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized synchronized. void addInput( processInputToProcess);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized synchronized. void addInputProcess(getInputlapsible);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized synchronized. void addInput(constructors);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized synchronized. void addInputProcess(firstInputInput);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInputProcess+1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized synchronizedInput addSUFFIXInput(constructors);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized synchronized. void addInputProcess(getInputLinkedLinkedLinkedLinkedLinkedLinkedInput);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized synchronizedInput GridDatarivedInput = processInput;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInputInputInputToProcess);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized synchronized. void addInputProcess(firstInput);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInputInputInput);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized synchronized. void addInputProcess(PECTEDInputInput);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized synchronized. void addInput(getInputProcess 2,RecordsInput);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInputfloat) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInputInputForInit) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized synchronized. void addInputProcess(getInputIdx);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized synchronizedInput \"\\rivedInput = processInput;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized synchronizedInputSUFFIX( processInputToProcess);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized synchronized. void addInputProcess(ByteInputInput);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized synchronized. void addInputProcess(cdfInput);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized synchronizedInput adddatInput(getInputProcess+1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized synchronized. void addInputProcess(Filled);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized synchronized. void addInputProcess(KeepInputInput);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized synchronized. void addInputProcess(NamesInputInput);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized synchronized. void addInputProcess(getInput32);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized synchronized. void addInputProcess(getInputIdSupplier);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized synchronized. void addInputProcess(getInputInputFor Inter) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized synchronized. void addInput(getInputProcess 2,RecordsInput) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized synchronized. void addInput(constructors,RecordsInputLookahead) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized synchronized. void addInput(inferProcessInputInputInputToProcess);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized synchronized. void addInputProcess( methodsInputInput);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized synchronized. void addInputProcess(getMode) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized synchronized. void addInputProcess(constructors,RecordsInput);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized synchronized. void addInput( sourceProcessInputInputInput);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized synchronized. void addInputProcess( processInputInputInput);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized synchronized. void addInputProcess( methodsInputInputInputInputInput);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized synchronizedInputCommand( processInputToProcess);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized synchronizedInput ActionrivedInput = processInput;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized synchronizedInputstream =RecordsInput;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized synchronized. void addInputProcess(getMode)[0];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized synchronized. void addInput(METHODInputProcess);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized synchronized. void addInput(inferProcessInputInputInput);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized synchronized. void addInputProcess(getInputfloatTypes);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized synchronizedInput addCFrivedInput(getInputProcessInput);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized synchronized. void addInput(inferProcessInputInput);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized synchronized. void addInputProcess(getInputLinkedLinkedLinkedLinkedLinkedLinkedLinkedInput);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized synchronizedInput add needed =RecordsInput;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized synchronized. void addInputProcess(ByteInputInputInput);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized synchronizedInput addCFrivedInput(getInputProcess);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized synchronized. void addInput =RecordsInput;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized synchronized. void addInputProcess(getInput(6);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized synchronized. void addInputProcess(getInputForInit);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized synchronized. void addInputProcess(NamesInputInputInput);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized synchronizedInput =RecordsInput;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized synchronized. void addInputProcess(getInputterritory);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized synchronized. void addInputProcess(inferProcessInputInputInput) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized synchronized. void addInput( sourceProcessInputInput);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized synchronized. void addInputProcess(KeepInputInputInput);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized synchronized. void addInputProcess(getInputLinkedLinkedLinkedLinkedLinked/ Inter) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized synchronized. void addInputProcess(handleInputInput);",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-124": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") .",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") .",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") .",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberdDown(text+\") .iterabled [\").int)(bpw+\") .",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberdDown(text+\") . .iterabled [\").int)(bpw+\") .",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .number",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberdDown(text+\") .POSITIVE_INFINITY).int)(bpw+\") .",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumber",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .number",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .number",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberOf",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumber",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumber",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .number",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numberOf",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumberOf",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . .",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numbernumber",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . . .",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . . .",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .number2",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numberOf",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . .number",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .number2d",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumberOf",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumbernumber",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumber2",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .numbernumber",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . . .number",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .numberOf",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumber2d",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumberOf",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .iterable",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .iterabled",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberOfValid",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumbernumber",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numbernumberOf",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . . .number",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .number2",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberdDown(text+\") .iterabled [\").int)(bpw+\") . .",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numbernumbernumber",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumberOfValid",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . .numbernumber",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .number2d",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numberOfValid",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .iterable",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .iterabled",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . . .",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . .numberOf",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumber2",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumber2",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . . .numberOf",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumber2d",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .numbernumberOf",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumber2d",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . . .numbernumber",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumbernumberOf",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberd",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .number2",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberts",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . . . .",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .number2d",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumberOfValid",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberOfE",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .util",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberValues",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .get",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumberts",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . . .numberOf",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . . .number",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumbernumberOf",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numberd",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberdDown(text+\") .iterabled [\").int)(bpw+\") . . .",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numbernumbernumberOfValid",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .numbernumbernumber",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numbernumbernumberOf",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numbernumbernumbernumber",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .numberOfValid",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .invoke",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numbernumber2",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . . .numbernumber",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .util",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . .numbernumberOf",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .numberOfEnumber",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numberOfValid",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . .numbernumber2d",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .xpath",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .minor",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .iterable",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . .number2d",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . .numberOfE",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .number2",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .iterabled",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberdDown(text+\") . .iterabled [\"). append+\") . .numbernumbernumber",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberdDown(text+\") .iterabled [\"). append+\") . . . .",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberdDown(text+\") . .iterabledDOM+\") . . . .number2d",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(d+.d+)\").text(\"+\") // latitude .number(\"(d+.d+)\").text(\"+\") // longitude",
        "fixed_line": ".number(\"(-?d+.d+)\").text(\"+\") // latitude .number(\"(-?d+.d+)\").text(\"+\") // longitude"
    },
    "Bears-250": {
        "fixes": [
            {
                "k": 1,
                "patch": "int cardinality = map[cardinality];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int cardinality = map[0];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int cardinality = new double[length];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int cardinality = map[0][cardinality];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int cardinality = new double[] { indices.length = new double[256];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int cardinality = map[0][length];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int cardinality = new double[] { indices = new double[length];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int cardinality = new double[] { indices.length = new double[length];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int cardinality = new double[] { int.length = new double[256];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int cardinality = this.cardinality[values.length];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int cardinality = this.cardinality[length];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int cardinality = new double[] { indices = new double[256];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int cardinality = this.cardinality[ivaluesShift];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int cardinality = new double[256];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int cardinality = new double[] { indices.length[cardinality];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int cardinality = map[cardinality]; double[i] = entry.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int cardinality = this.cardinality[ public int[] values = new double[256];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int cardinality = new double[] { indices.length];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int cardinality = new double[] { int.length = new double[length];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int cardinality = new double[] { int.cardinality[length];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int cardinality = this.cardinality[entry.length];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int cardinality = new double[] { values[cardinality];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int cardinality = map[ public int[] values = new double[256];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int cardinality = indices[length];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int cardinality = map[length];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int cardinality = new double[] { indices[length];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int cardinality = map[0] ? -1 : new double[length];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int cardinality = new double[] { final int[] values[cardinality];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int cardinality = new double[] { values[length];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int cardinality = new double[] {values.length = new double[256];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int cardinality = map[0][256];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int cardinality = new double[] { indices, double.length = new double[256];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int cardinality = map[cardinality]; double[i] = entry.length < length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int cardinality = new double[] { this.cardinality[length];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int cardinality = new double[] { indices, new double[length];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int cardinality = map[card[0] = new double[256];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int cardinality = map.length[cardinality];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int cardinality = map[ public int[] indices = new double[256];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int cardinality = new double[] {values.length = new double[length];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int cardinality = new double[] { values[length]; double.length = new double[256];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int cardinality = new double[] { values[length]; // reset, to != indices for entry = new double[256];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int cardinality = this.cardinality[intValue.length];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int cardinality = map[256];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int cardinality = this.cardinality[int.length];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int cardinality = map[cardinality]; double[i] = entry.length < 1 ? new double[256];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int cardinality = map[0] == indices.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int cardinality = new double[] { indices = new double[cardinality];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int cardinality = new double[] { indices.length = new double[cardinality];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int cardinality = new double[] { values[cardinality]; double.length = entry.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int cardinality = map[0] ? -1 : new double[256];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int cardinality = new double[] { indices, double.length = new double[length];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int cardinality = new double[] { indicesSize = new double[256];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int cardinality = new double[] { null, double.length = entry.cardinality[length];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int cardinality = new double[] { values[length]; double.length = entry.length < length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int cardinality = new double[] { int[cardinality];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int cardinality = this.cardinality[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int cardinality = this.cardinality[ public int[] values.length];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int cardinality = buffer[length];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int cardinality = map[0] == -1 ? new double[length];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int cardinality = new double[] { indices[cardinality];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int cardinality = map[0][ public int[] values.length];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int cardinality = map[0][ public int[] values = new double[256];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int cardinality = new double[] { indices.length[length];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int cardinality = new double[] { indices values[length];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int cardinality = new double[] { indices.length[ public int[] values.length];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int cardinality = new double[] { values[length]; double.length = entry.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int cardinality = new double[] { indices values[cardinality];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int cardinality = map[card[0] = new double[length];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int cardinality = this.cardinality[6].length];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int cardinality = new double[] { length = new double[256];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int cardinality = map[cardinality]; double[i] = entry.length < rhs.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int cardinality = new double[] { indices.length[256];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int cardinality = this.cardinality[12];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int cardinality = new double[] { values[length]; double.length = entry instanceof double.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int cardinality = new double[] { int.length = entry.cardinality[length];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int cardinality = new double[] { indicesSize = new double[length];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int cardinality = new double[] { indices, double.length = entry.cardinality[length];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int cardinality = map[card[0]];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int cardinality = new double[] { null, double.length = new double[256];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int cardinality = map[ public int[] values.length];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int cardinality = map[0] == -1 ? new double[] { values[cardinality : new double[length, 1];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int cardinality = new double[] { lengthMap.length = new double[256];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int cardinality = new double[] {element.length = new double[256];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int cardinality = new double[] { values[cardinality]; double[entry.length] = entry.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int cardinality = this.cardinality[ public int[] values = new double[length];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int cardinality = new double[] { int.cardinality[length]; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int cardinality = new double[] { indices, double[0] = new double[256];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int cardinality = map[cardinality]; double[i] = entry.length < endIndex ? 1 : 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int cardinality = new double[] { int.cardinality = new double[length];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int cardinality = map[0][card values.length];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int cardinality = new double[] { indices, double.length];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int cardinality = new double[] { values[length]; double.length = entry.cardinality[256];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int cardinality = map[cardinality]; double[i] = entry.length ? 1];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int cardinality = this.cardinality[unique.length];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int cardinality = map[0] == -1 ? new double[] { values[cardinality : new double[length];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int cardinality = a[length];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int cardinality = new double[] { int.cardinality = new double[256];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int cardinality = new double[] { null, double.length = entry.cardinality[original.length ? 1 : 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int cardinality = new double[] { values[length]; double add add, new double[256];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int cardinality = new double[] {element.length = new double[length];",
                "identical": false
            }
        ],
        "buggy_line": "int cardinality = map.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
        "fixed_line": "TreeMap<Integer, ? extends Number> sortedMap = new TreeMap<>(map); int cardinality = sortedMap.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : sortedMap.entrySet()) {"
    },
    "Bears-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "lac = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "lac = Integer.parseInt(throwables[i]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "lac = Integer.parseInt(enables[i]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "lac = Integer.parseInt(period[i]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "lac = Integer.parseInt(i]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "lac = Integer.parseInt(iFieldType + \"#[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "lac = Integer.parseInt(iValues[i]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "lac = Integer.parseInt(random[i]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "lac = Integer.parseInt(iType.linkCORD = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "lac = Integer.parseInt( controlID[i]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "lac = Integer.parseInt(INT[i]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "lac = Integer.parseInt(this.data[i]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "lac = Integer.parseInt(iFieldType[i]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "lac = Integer.parseInt(iType.iIDING_CORD = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "lac = Integer.parseInt(singular[i]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt[i]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_start[i]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "lac = Integer.parseInt( controlID[i], Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "lac = Integer.parseInt(iType.singularCORD = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "lac = Integer.parseInt( controlID_data[i]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "lac = Integer.parseInt(pattern[i]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "lac = Integer.parseInt(iType.Instance[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "lac = Integer.parseInt(CntID[i]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt(period[i]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt(enables[i]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.parseInt(enables[i]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "lac = Integer.parseInt(Weeks[i]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "lac = Integer.parseInt(iType.data[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "lac = Integer.parseInt(iValues[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "lac = Integer.parseInt(iType.INT_SourceID cid = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "lac = Integer.parseInt( processValues[i]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "lac = Integer.parseInt(iType.HING_CORD = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "lac = Integer.parseInt(iValues[i]).pieID cid = Integer.parseInt[i]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "lac = Integer.parseInt(minu[i]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_PAINT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "lac = Integer.parseInt(throwables[i], Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i]) = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "lac = Integer.parseInt(iType.linkCthermillisecond = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "lac = Integer.parseInt(jdkXmlWriter[i]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "lac = Integer.parseInt(iValues[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "lac = Integer.parseInt(iType.INT_SourceID cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.parseInt[i]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "lac = Integer.parseInt(iType.linkCORD = Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "lac = Integer.parseInt(iType.linkCutoff = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_uesShift + 1]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "lac = Integer.parseInt(iType. \"#[i].parseIntID = Integer.parseInt[i]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "lac = Integer.parseInt(Double.iID[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_KEY;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "lac = Integer.parseInt(iType.INT[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "lac = Integer.parseInt(iID[i]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "lac = Integer.parseInt(iType. \"#[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "lac = Integer.parseInt(this.data[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "lac = Integer.parseInt(iType.numOccurrences quCORD = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "lac = Integer.parseInt(iType.iIDLINES = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "lac = Integer.parseInt(throwables[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "lac = Integer.parseInt(iFieldType + \"#[i]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseInt = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "lac = Integer.parseInt( data[i]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt(period)]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "lac = Integer.parseInt( ES[i]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i]).parseInt = Integer.parseInt(period[i]);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "lac = Integer.parseInt(iType + \"#[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "lac = Integer.parseInt(iType. \"#[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "lac = Integer.parseInt(iType. \"#[i].parseIntFactory.parseInt(period)]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "lac = Integer.parseInt(iType.Instance[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "lac = Integer.parseInt(iType.INT_UARY = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt(random[i]);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_NODE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "lac = Integer.parseInt(iType. \"#[i].parseIntID = Integer.parseInt(enables[i]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "lac = Integer.parseInt(iType.data[i].parseIntID = Integer.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "lac = Integer.parseInt(this.data[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "lac = Integer.parseInt(enforMethod[i]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "lac = Integer.parseInt(iType.INT[i].parseIntID = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt(period);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_Lens[i]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "lac = Integer.parseInt(iType. \"#[i], Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "lac = Integer.parseInt(this.data[i].parseIntID = Integer.parseInt(enables[i]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i].parseIntID = Integer.parseInt_parseDouble;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "lac = Integer.parseInt(iType.INT[i].parseIntID = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "lac = Integer.parseInt(iType.PropID[i].parseIntID = Integer.parseInt_VALUE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "lac = Integer.parseInt(enables[i], Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "lac = Integer.parseInt(transitions[i]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.parseInt(period)]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "lac = Integer.parseInt(iValues[i].parseIntID = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "lac = Integer.parseInt(minu]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "lac = Integer.parseInt(--i]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "lac = Integer.parseInt(iType.linkCATCH[i]).parseInt = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "lac = Integer.parseInt(iType.value[i].parseIntID = Integer.parseInt(period);",
                "identical": false
            }
        ],
        "buggy_line": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
        "fixed_line": "if (!data[i].isEmpty()) { lac = Integer.parseInt(data[i]); } break; case \"#CID#\": if (!data[i].isEmpty()) { cid = Integer.parseInt(data[i]); }"
    },
    "Bears-163": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens.canRemoveOfWith.ANY_VALUE || TokenStream.UNIQUE) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tokens.canRemove == actual.ANY_VALUE || TokenStream.UNIQUE) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tokens.canRemove ==SUCCESS_VALUE || TokenStream.UNIQUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tokens.can\u761fNOTATIONS && TokenStream.UNIQUE(\"UNIQUE\") {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tokens.can\u0d41_CONST || TokenStream.UNIQUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tokens.can\u387cVALUE_CONSTANT_UNIQUE_VALUE || tokens.cancanContainBlock) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.canBITS(\"ANY_VALUE, TokenStream.UNIQUE\", tokens.canContain_UNIQUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tokens.canvs(tokens, \"UNIQUE\", tokens.canConsume_VALUE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.canRemove) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tokens.canRemove ==SUCCESS_VALUE || TokenStream.UNIQUE_UNIQUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.canositive(\"ANY_CONSTANT_UNIQUE\", tokens, tokens.canContain_UNIQUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tokens.canBITS(\"ANY_CONSTANT_UNIQUE\", tokens, tokens.canContain_UNIQUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tokens.can\u387cVALUE_CONSTANT_UNIQUE_VALUE || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tokens.cantup_CONSTANT_UNIQUE_VALUE || tokens.cancanContainBlock) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE_VALUE || tokens.cancanContainBlock) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \" + tokens.UNIQUENCY_UNIQUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canBITS) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens.can\u387cVALUE_CONSTANT_UNIQUE_VALUE || tokens.cancanConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.can runt_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tokens.canRemoveOfWith.ANY_VALUE || TokenStream.UNIQUE == tokens) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, TokenStream.UNIQUE\", tokens);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canContain_UNIQUE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.can runt_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.canConsume_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.canContainInline) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tokens.canvs(tokens, \"UNIQUE\", tokens.canConsume);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.can runt_UNIQUE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tokens.canRemove && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tokens.canRemove ==SUCCESS_VALUE || TokenStream.UNIQUE(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE_VALUE || tokens.canContainBlock) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canOfWeek) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.canConsume);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tokens.can\u387cVALUE_CONSTANT_UNIQUE_VALUE || tokens.canContainBlock) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tokens.canRAINT\", HOURS || TokenStream.UNIQUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tokens.canRemove && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.can runt_UNIQUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokensic) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE_VALUE || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanContainBlock) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") && tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUENCY_VALUE || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.canBITS) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE_VALUE || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE_VALUE || tokens.cancanConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE, \"UNIQUE\") || tokens.canContainstring) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tokens.canRemove && TokenStream.UNIQUE(\"UNIQUE\") || tokens.canContainInline) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.canContainstring) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tokens.canRemove == null || TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE_VALUE || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.canOfWeek) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canRemove) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tokens.canOrdinal(\"ANY_VALUE, TokenStream.UNIQUE\", tokens);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tokens.canRemoveOfWith.ANY_VALUE, \"UNIQUE\", tokens.canRemove) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canRemove - tokens",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tokens.canvs(tokens, \"UNIQUE\", tokens.canOfWeek) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.can runt_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanContainBlock",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tokens.canRemove == httplib || TokenStream.UNIQUE(\"UNIQUE\") {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanLoop) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUENCY_VALUE || tokens.cancanContain_UNIQUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\", tokens.canRemove) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tokens.can noob(\"ANY_VALUE, TokenStream.UNIQUE\", tokens);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tokens.canBITS(\"ANY_VALUE, TokenStream.UNIQUE\", tokens.canContain_UNIQUE_UNIQUE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.canContainBlock) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tokens.canRemove == null || TokenStream.UNIQUE\", tokens,",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.canContainBlock",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tokens.can ADD_CONSTANT_UNIQUE_VALUE || tokens.cancanContainBlock) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tokens.canRemoveOfWith.ANY_VALUE, \"UNIQUE\") || tokens.canRemove) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canOrdinal) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.can\u387cVALUE_CONSTANT_UNIQUE_VALUE || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tokens.cantup_CONSTANT_UNIQUE_VALUE || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tokens.can\u761fNOTATIONS && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canContain22) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tokens.canRemove && TokenStream.UNIQUE(\"UNIQUE\", tokens,",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tokens.can SE(\"ANY_VALUE, TokenStream.UNIQUE\", tokens);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE, \"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanCallback() {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.canMargin) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.canContainQUENCY_UNIQUE {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.canRemove\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\", tokens.canConsume);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tokens.canBITS(\"ANY_VALUE, TokenStream.UNIQUE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") && tokens.canRemove) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.canRemove, tokens",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE, \"UNIQUE\", tokens.canBITS) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tokens.can\uaaaf(tokens, \"UNIQUE\", tokens.canConsume_VALUE, tokens",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tokens.can\u761fNOTATIONS && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancan ECMA {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tokens.canContainCONSTSTRACT_CONSTANT_UNIQUE, \"UNIQUE\") || tokens.canBITS) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tokens.canRemove == null || TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tokens.canRemoveOfWith.ANY(tokens, \"UNIQUE\") || tokens.canContainInline) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tokens.can\u387cVALUE_CONSTANT_UNIQUE_VALUE || tokens.cancanContainInline) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE\", tokens, \"UNIQUE\") {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\") || tokens.cancanRemove) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tokens.canRemoveOfWith.ANY_VALUE, \"UNIQUE\", tokens,",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.can itemgetter(\"ANY_VALUE, \"UNIQUE\") || tokens.canBITS) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tokens.cantn && TokenStream.UNIQUE(\"UNIQUE\") || tokens.cancancanRemove) {",
                "identical": false
            }
        ],
        "buggy_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
        "fixed_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"CONSTRAINT\", \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"pp. context.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"pp.sequenceData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"pp.errors.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"pp.ro this.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"pp.sequenceData.sessionData\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"pp.pp.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"pp.Lettero.sessionData\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"pp.roroxData.session\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"pp.class.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"pp. s.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"pp.ro this.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"pp.Read.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"pp.roxData.session\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"pp.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"pp.class. context.sessionData\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"pp.roroList.sessionData\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"pp.class.sessionData.session\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"pp.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"pp.roList.sessionData\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"pp.sequenceData.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"pp.fasterxml.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"pp.QUE.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"pp.errors.sessionData.session\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"pp.roroDateTime.sessionData\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"pp.roNOTo.sessionData\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"pp.Read.sessionData.session\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"pp. context.sessionData.class.sessionData\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"pp.mixo.sessionData.session\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"pp. !pp.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"pp.before.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"pp.left.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"pp.ro this.sessionData.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"pp. s.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"pp. rxo.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"pp.DA.sessionData\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"pp.roNOTo.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"pp.errors.sessionData\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"pp.class. context.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"pp. converter.sessionData.session\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"pp. context.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"pp. context.sequenceData.sessionData\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"pp. rx.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"pp.roDateTime.sessionData\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"pp.sequenceData.sessionData.session;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"pp. foundData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"pp. DateFormat.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"pp.pp.sessionData.class.sessionData\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"pp.NTo.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"pp.Sessiono.sessionData.session\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"pp.Lettero.sessionData.session\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"pp.mixo.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"pp.sessionData.sessionData.class.sessionData\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"pp. 60.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"pp.ro this.sessionData.sessionData.session;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"pp.roxData.sessionData\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"pp.pp.sessionData.session\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"pp.TRY.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"pp.quick.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"pp.mixo.sessionData\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"pp.roNOTo.sessionData.session\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"pp.roList.sessionData.session\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"pp.roroxData.session;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"pp.ronullo.sessionData\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"pp.Basedo.sessionData\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"pp.QUE.sessionData.session\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"pp. converter.sessionData.class.sessionData\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"pp.pp.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"pp. Box.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"pp.sessionData.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"pp. converter.sessionData.session;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"pp.awt.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"pp.search.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"pp.ronullo.sessionData.session\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"pp.roroxData.sessionData\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"pp. rxo.sessionData\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"pp.class. context context.sessionData\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"pp.createElementDatao.sessionData\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"pp.roo.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"pp.Sessiono.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"pp.roronullo.sessionData\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"pp.rounknownData.sessionData\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"pp.class.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"pp. context.sessionData\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"pp.Read. context.sessionData\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"pp.mv.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"pp. intersects.sessionData\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"pp.engthData.session\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"pp.Lettero.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"pp.roList.class.sessionData\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"pp.Read.sessionData.session;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"pp.errors.sessionData.sessionData.session\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"pp.sequenceData.sessionData.session.sessionData\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"pp.class. context.sessionData.session\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"pp. context.class.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"pp.interfaces.sessionData\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"pp.before.sessionData.session\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"pp.roList.sessionData.sessionData\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"pp.roxData.session;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"pp. BIData.session\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"pp.roDateTime.sessionData.session\");",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (icon.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (icon.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( operating.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (\u2a16.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Grp.get.class().class == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (\u2ac6.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (rape.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Grp.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (\u5555.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if ( hence.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if ( 5;.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( Design.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (34..get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( operating.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (\u5771.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entrant.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (\u037c.get != null && handler.class != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Grp.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( '22.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Grp.get != null && handler.class != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (t.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (\u7238.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (locale.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (\u0909.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( feature.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Echo.get != null &&Decoder.class != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (use.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (\u5771.get != null && handler.class != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (\u610a.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (\uaaaf.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (APPLICATION.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (\u5555.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (unique.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (dataframe.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (\u5771.get == null || CALL.class == null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Echo.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( operating.get( Declaration.class) == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( checks.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (icon.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Root.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ((15.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if ( refactor.get == null || CALL.class == null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (use.getFilter().class == null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (\u7238.get( null.class) == null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (\u2ac6.get( Declaration.class) == null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (namespaces.getCountry().class == null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (\u2a16.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (34..get(txt.class) == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (use.getPipeline().class == null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (use.getFilter != null && handler.class != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (\u2a16.get(txt.class) == null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (\u7f13.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (rape.get(label.class) == null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (\u960e.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (rape.get( Declaration.class) == null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (WEEN.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (\ua653.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( getBody.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( refactor.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (\u8a29.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (icon.getParent == null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (.\\.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (rape.get( sync.class) == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (\u7238.get(label.class) == null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (\u7238.get(ignore.class) == null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if ( '22.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (\ua902.get( JOptionPane.class) == null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( operating.get(label.class) == null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (icon.get.class().class == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( operating.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (icon.getCountry().class != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Grp.get.class == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (icon.getTypes == null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (\u2ac6.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (\u7238.get( sync.class) == null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (rape.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (\uaaaf.get( Declaration.class) == null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (\u4f1a.get( Declaration.class) == null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Grp.getVisitor() == null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( feature.getCountry().class != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Grp.getupper().class == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( Design.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (\u2ac6.get( Declaration.class) != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if ( refactor.get == null || CALL.class != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (\uaaaf.get( Declaration.class) != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (\ua902.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (icon.getObject().class == null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( operating.get( Declaration.class) != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (rape.get( Declaration.class) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (dataframe.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (\uaaaf.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (\u7238.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (use.getPipeline().class != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( 5;.getCountry().class != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (\u7f13.get( JOptionPane.class) != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Grp.get != null &&Decoder.class == null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Grp.getCountry().class != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (\u5771.get == null || CALL.class != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (icon.getupperBound == null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (t.getCountry().class != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-235": {
        "fixes": [
            {
                "k": 1,
                "patch": "[6] = _base.findByIdIndex;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "[6] = _base.find((d2,2,2,2,2,2,2,2,Bounds)",
                "identical": false
            },
            {
                "k": 61,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "[6] = _base.find(d2,2,2,2,2,2,2,Bounds)",
                "identical": false
            },
            {
                "k": 79,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldField;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "[6] = _base.find(d2,2,2,2,2,2,2,2,Bounds) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "[7] = enclosing.find(( bit bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftFieldFieldField;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "[7] = enclosing.find(( bit bitShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (hasAnyChildrenAccountEnabled(account)){ throw new IllegalStateException(\"Children accounts enabled\"); } account.setDisabled(true); accountRepository.save(account); } private boolean hasAnyChildrenAccountEnabled(Account account){ return account.getChildren().stream() .filter(a -> !a.isDisabled()) .findAny() .isPresent(); }"
    },
    "Bears-138": {
        "fixes": [
            {
                "k": 1,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int mn = 0, buf.readUnsignedByte(8).intValue();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int mn = 0, buf.readUnsignedByteOn(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int mn = 0, buf.readUnsignedByteOn(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.readUnsignedShort(buf, offset, len);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int mn = 0, buf.readUnsignedByte = 0, buf.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int mn = 0, buf.readUnsignedByteSymbols = 0, buf.length;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int mn = 0, buf.readUnsignedByte for hash = 0, buf.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int mn = 0, buf.readUnsignedByte = 0, iValue.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, i);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int mn = 0, buf.readUnsignedByte)",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int mn = 0, buf.readUnsignedByte(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, offset, len);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int mn = 0, buf.readUnsignedByte(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, offset, len);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int mn = initUnsignedShort(buf, 0, buf.length)",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.readUnsignedShort(buf,",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int mn = 0, buf.readUnsignedByte for 2readUnsignedShort(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, offset, len)",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int mn = 0, buf.readUnsignedByte Kit.readUnsignedShort(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int mn = 0, buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int mn = 0,SIGNUnsignedShort.readUnsignedByte(8).intValue();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int mn = 0, buf.readUnsignedByteNULL = 0, buf.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int mn = initUnsigned.readUnsignedByte(buf, 0, buf.length)",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int mn = 0, buf.readUnsignedByte Kit.readUnsignedShort(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, buf);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int mn = 0,SIGNATURES = 0, buf.readUnsignedShort(buf.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int mn = 0, buf.readUnsignedByteSymbols = buf.readUnsignedShort(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.readUnsignedShort(buf, offset, len)",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int mn = 0, buf.readUnsignedByte for hash = 7;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int mn = 0,SIGNUnsignedByte = 0, buf.readUnsignedShort(buf.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, offset, len)",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int mn = 0, buf.readUnsignedByte = 0, i.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int mn = 0, buf.readUnsignedByteNULL_ARRAY = 0, buf.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int mn = 0, buf.readUnsignedByte8 = 0, buf.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int mn = 0, buf.readUnsignedByte Kit.readUnsignedShort(buf, i);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, offset, len).intValue);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int mn = 0, buf.readUnsignedByteOn(buf, offset, len);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int mn = 0, buf.readUnsignedByte = 7;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int mn = 0, buf.readUnsignedByte Kit.readUnsignedShort(buf, offset, len);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int mn = 0, buf.readUnsignedByte(8 = 0, buf.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, 6);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, i);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int mn = 0,SIGNUnsignedByte = 0, buf.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int mn = 0, buf.readUnsignedByte(201 = 8;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int mn = 0, buf.readUnsignedByte = 0, ianns.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int mn = 0, buf.readUnsignedByteSymbols = buf.readUnsignedShort(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int mn = 0, buf.readUnsignedByte = 8;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int mn = 0, buf.readUnsignedByteLE8 = 0, buf.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int mn = initUnsigned.readUnsignedByte(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int mn = 0, buf.readUnsignedByte for 2readUnsignedShort(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int mn = 0, buf.readUnsignedByte for hash = 0, iValue.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int mn = items.readUnsignedByte(buf, 0, buf.length = 7;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int mn = 0, buf.readUnsignedByteOn(buf, offset, len).intValue);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int mn = initUnsignedShort(buf, 0, buf.length = 7;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, buf.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int mn = 0, buf.readUnsignedByteOn(buf, offset, len)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int mn = 0, buf.readUnsignedByte = 0, iannotated.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int mn = 0, buf.readUnsignedByteNULL_ITEM_LEN = 7;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int mn = 0, buf.readUnsignedByteNULL = 7;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, 6)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int mn = 0, buf.readUnsignedByte(201 = 7;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int mn = 0, buf.readUnsignedByte for hash = 0,",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int mn = 0, buf.readUnsignedByteNULL_ARRAY = 7;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int mn = 0, buf.readUnsignedByte for 2readUnsignedShort(buf, offset, len).int i = 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int mn = 0,SIGNUnsigned.readUnsignedByte = buf.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int mn = 0,SIGNUnsignedShort.readUnsignedByte = buf.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int mn = 0,SIGNUnsigned.readUnsignedByte(8).intValue();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int mn = 0, buf.readUnsignedShort(buf, 0, i);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int mn = items.readUnsignedByte(buf, 0, buf.length = 8;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int mn = 0, buf.readUnsignedByte = 6;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_out.length = 7;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_out.length = 8;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int mn = instantiate.readUnsignedByte(buf, 0, buf.length)",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int mn = 0,SIGNUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int mn = 0, buf.readUnsignedByteables.length = 7;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int mn = 0, buf.readUnsignedByte = 0, ianns.readUnsignedShort(buf.length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int mn = 0, buf.readUnsignedByteOn(buf, 0, i);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.readUnsignedShort(buf, offset, len).intValue;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int mn = 0, buf.readUnsignedByte forxFFFF;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int mn = 0, buf.readUnsignedByte caught = 0, buf.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int mn = items.readUnsignedByte(buf, 0, buf.length)",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.readUnsignedShort(buf, offset, len).intValue();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int mn = initUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int mn = 0, buf.readUnsignedByte), buf.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int mn = 0,SIGN.readUnsignedByte = buf.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int mn = 0,SIGNATURES = 0, buf.readUnsignedShort(buf, offset);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int mn = 0, buf.readUnsignedByte for hash = 0, ianns.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int mn = initUnsignedShort(buf, 0, buf.length = 8;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int mn = 0, buf.readUnsignedByteLEADING_readUnsignedShort(buf, 6).intValue();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int mn = 0, buf.readUnsignedByte(8).intValue;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int mn = 0, buf.readUnsignedByte for hash = 0, 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int mn = 0, buf.readUnsignedByteTip = 0, buf.length;",
                "identical": false
            }
        ],
        "buggy_line": "int mnc = buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));",
        "fixed_line": "int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));"
    },
    "Bears-137": {
        "fixes": [
            {
                "k": 1,
                "patch": "int flagIndex = -1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length + 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 2 == 0 && lengthIndex == -1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int flagIndex = buf.indexOf(\"reader\") - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int flagIndex = buf.indexOf('.') - bufpos + 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int flagIndex = buf.indexOf length length - buf.startIndex % bufsize + length - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int flagIndex = flag + buf.length - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int flagIndex = buf.indexOf StringBuilderIndex - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int flagIndex = buf.indexOf('.') - bufIndex - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) == 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int flagIndex = buf.indexOf(\"reader\") - beginIndex % values.length + 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length % 2 == 0 && length == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int flagIndex = buf.indexOf('\\Index % bufsize - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length % 2 == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - lengthInBits / 2,",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int flagIndex = size.indexOf length - buf.length % 2 == 0 && lengthIndex == -1) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int flagIndex = flag - bufIndex % values.length == -1) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int flagIndex = flag - buf.indexOf(\"reader\") - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int flagIndex = values.indexOf(\"reader\") - beginIndex % values.length + 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - lengthInBits / 2 + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex % flag + length - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int flagIndex = size.indexOf length - buf.length % 4) == 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int flagIndex = buf.indexOf('\\Index % values.length - beginIndex;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int flagIndex = values.indexOf(\"reader\") - bufIndex % values.length + 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - lengthInBits / 2 - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int flagIndex = size.indexOf length - buf.length % 2 == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex % values.length == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int flagIndex = buf.indexOf('Size - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int flagIndex = buf.indexOfindexOf('.') - bufpos + 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int flagIndex = values.indexOf(\"reader\") - bufIndex + length - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int flagIndex = size.indexOf length - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length - 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int flagIndex = buf.indexOfindexOf('.') - 1, buf.length + 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex % values.length == -1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int flagIndex = buf.indexOfindexOf length - buf.length % 4) == 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int flagIndex = buf.indexOfindexOf length length - buf.length % 4) == 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int flagIndex = size.indexOf length - buf.length % 4) == 0 || bufIndex == -1) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 2 == 0 || bufIndex + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int flagIndex = buf.indexOf length - buf.length % 4) == 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) == 0 || buf == -1) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int flagIndex = flag - buf.indexOf('.') - beginIndex;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int flagIndex = buf.indexOfindexOf('.') - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int flagIndex = buf.indexOf lengthIndex % bufsize - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length % 2 * 0 <= 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int flagIndex = flag - bufIndex % values.length == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int flagIndex = buf.indexOf(', values.length - bufpos + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int flagIndex = buf.indexOf('Size - buf.length % 4) != 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int flagIndex = buf.indexOf('\\Index % bufsize - buf.length % 4) != 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int flagIndex = flag - bufIndex % values.length == 0 && lengthIndex == -1) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int flagIndex = buf.indexOf(\"reader\") - beginIndex % flag + length - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) == -1) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int flagIndex = buf.indexOf('.') - bufIndex + length - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int flagIndex = buf.indexOf length - buf.startIndex % bufsize + length - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int flagIndex = buf.indexOfindexOf('\\Index % values.length - beginIndex;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - lengthInBits / 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int flagIndex = 0 <= buf.length - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int flagIndex = b.indexOf('.') - bufpos + 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 2 == 0 && lengthIndex == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int flagIndex = buf.indexOf lengthInBits - bufIndex + length - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) == 0 || bufIndex == -1) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int flagIndex = flag - buf.indexOf(\"reader\") - beginIndex % values.length + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int flagIndex = buf.indexOf(\"reader\") - beginIndex + lengthInBits - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int flagIndex = values.indexOf(\"reader\") - beginIndex % bufsize + lengthInBits - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int flagIndex = flag - bufIndex % values.lengthlength - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) != 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length % 1000 == -1) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int flagIndex = buf.indexOf lengthInBits - bufIndex % values.length == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int flagIndex = buf.indexOf('\\Index % bufsize - buf.length % 4) == -1) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int flagIndex = buf.indexOf('CollectionIndex % values.length - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int flagIndex = pad - buf.indexOf(\"reader\") - beginIndex == -1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int flagIndex = buf.indexOf('0' + length - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int flagIndex = buf.indexOf('\\Index % values.length - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) != 0 || buf == -1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex - length + 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int flagIndex = pad - buf.indexOf(\"reader\") - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int flagIndex = size.indexOf length - buf.length % 4) == -1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int flagIndex = buf.indexOf('.') - bufpos + 1 - lengthInBits;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int flagIndex = size.indexOfindexOf length - buf.length % 4) == 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) != 0 || buf.length == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int flagIndex = buf.indexOf(\"reader\") - beginIndex % bufsize + lengthInBits - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int flagIndex = buf.indexOf length length - buf.length % 4) != 0 || bufIndex == -1) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int flagIndex = buf.indexOf lengthIndex % bufsize - buf.length % 4) == -1) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int flagIndex = buf.indexOf('.') - 1, buf.length % 2 * 0 <= 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int flagIndex = values.indexOf(\"reader\") - beginIndex + length - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int flagIndex = buf.indexOf('0' + length - buf.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int flagIndex = buf.indexOf('CollectionIndex % values.length - beginIndex;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int flagIndex = buf.indexOf length - buf.length % 4) == 0 || length == -1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int flagIndex = buf.indexOfindexOf('.') - beginIndex % flag + length - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int flagIndex = beginIndex - buf.indexOf(\"FinderIndex % bufsize + length - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int flagIndex = values.indexOf(\"reader\") - beginIndex + lengthInBits - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int flagIndex = size.indexOf('.') - bufIndex - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int flagIndex = buf.indexOfindexOf('\\t', start + length - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int flagIndex = size.indexOf length - buf.length % 2 == 0 && length == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int flagIndex = buf.indexOf('.') - beginIndex % values.length + 1;",
                "identical": false
            }
        ],
        "buggy_line": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\")); if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
        "fixed_line": "int separatorIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '|'); if (separatorIndex > 0 && separatorIndex - beginIndex > 19) {"
    },
    "Bears-95": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" . \");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWith \");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .lang\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entity.getType() == null || !entity.getType().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\". \");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" . content\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return entity.getType() == null || !entity.getPackage().getName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWithstartsWith \");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" . \");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" . content\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return entity.getType() == null || !entity.getPackage().getName().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entity.getType() == null || !entity.getType().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\"",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .startsWith \");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" \")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWithED\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.Chronology",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWithED \");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entity.getType() == null || !entity.getPackage().getName().startsWithImplicit \");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith(\"-\"",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .weight \");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" 2\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWithImplicit \");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\". \");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWith",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.startsWith",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .startsWithstartsWith \");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .lt \");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return entity.getType() == null || !entity.getPackage().getName().startsWith(\" .startsWith",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return entity.getType != null && !entity.getClassLoader().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" 2D \");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .ct \");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .lang\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith(\" 2\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return entity.getType() == null && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" / \");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entity.getType != null && !entity.getClassLoader().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith == .math.class;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.Date \");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" script",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .math.startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return entity.getType() == null || !entity.getPackage().getName().startsWith(\" .startsWith \");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return entity.getType() == null || !entity.getPackage().getName().startsWith(\" 2\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.Date \");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWithClass \");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .math.BigDecimal",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith(\"",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return entity.getType() == null || !entity.getType().startsWith(\" .startsWith \");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.max \");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWithEMPTY \");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util. d content\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .math.startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWithThreshold;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return entity.getType() != null && !entity.getGeneric().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .math.\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.Generic \");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWith.\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\"",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entity.getType() == null || !entity.getType().startsWith(\" .startsWithstartsWith \");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWithImplicit \");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWithstartsWith(\"-\"",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWithstartsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .weight\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util. WORD;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" super\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith == .startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWithTwo\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith == .util.startsWith(\" 2\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWithClass \");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.max \");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .multiply \");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .startsWithImplicit \");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entity.getType() != null && !entity.getGeneric().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWithstartsWith",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith == .startsWith(\" 2\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util. \");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" 2));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return entity.getType() == null && !entity.getPackage().startsWith(\" .lang \");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .math.BigDecimal",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .._startsWith \");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entity.getType() == null || !entity.getGeneric().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWithstartsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util. '}",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith(\"-\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.startsWith(\" .startsWith",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" \")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .util.OS",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .util.U \");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .math.startsWith(\" 2\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entity.getType() == null || !entity.getPackage().startsWith(\" .startsWithED_SEGMENT_LEN;",
                "identical": false
            }
        ],
        "buggy_line": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
        "fixed_line": "Class<?> type = entity.getType(); return type.getClassLoader() != null && (type.getPackage() == null || !type.getPackage().getName().startsWith(\"java\"));"
    },
    "Bears-120": {
        "fixes": [
            {
                "k": 1,
                "patch": "protectedSCABytes(buf, 0, buf.length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "protectedDefineDefine(type, buf, length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "protectedDefineDefine(ctxt, buf, length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "protectedDefineDefine(type, buf,",
                "identical": false
            },
            {
                "k": 5,
                "patch": "protected 2.4Bytes(buf, 0, buf.length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "protectedBindingBytes(type, buf, length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "protected collisionsBytes(buf,22 < length) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "protectedSCABytes(buf, 0, length) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "protectedarr(buf, offset, length) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "protectedSCABytes(buf, offset, length) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final /*day*/int len len, buf.length < 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "protectedSCABytes(buf,22 < length) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "protectedreasonBytes(type, buf, length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Whitespace(buf, 0, length) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "protectedSCABytes(type, buf, length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final /*day*/int len, buf.length < 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "protectedSCABytes(buf, 0, length2 < 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "protectedSCABytes(ctxt, buf, length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "protectedSCABytes(buf,2 < length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "happen happen(buf, 0, length < 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "protectedDefineDefine(type, buf, length < 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "protected writeFieldEndBytes(buf,2 < length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "16 16 16((buf, 0, length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "protectedSCABytes(buf, 0, length < 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "protectedDefine(type, buf, length) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "protected values values. maximum(buf, 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "protected regardlessBytes(ctxt, buf, length) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "protectedSCABytes(buf, 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final /*day*/int len, buf.length < 9) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "protected . .( ctxt, buf, length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final /*day*/int len len, buf.length < 9) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final /*day*/int len len, buf.length < style) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "protectedsuppress(buf, b, 0, length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "protectedDefineDefine(type, buf;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final /*day*/int len, buf.length < style) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final /*day*/int len len, buf.length < 10000) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "protectedDefineDefine(buf,2 < length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "protected attsBytes(buf, 0, length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "protectedreasonBytes(ctxt, buf, length) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final /*day*/int len len, buf.length < MAX_ENTRIES) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final /*day*/int len, buf.length < MAX_ENTRIES) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "protectedDBBytes(ctxt, buf, length) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1, 10000) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final /*day*/int len, buf.length < 10000) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1, 16 16 16;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "protectedatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsatorsators((1,(1,(1,(1,(1,(1,(1,(1,(1,(1,(1, '0') {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// Skip Alive message while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) { buf.readByte(); }"
    },
    "Bears-127": {
        "fixes": [
            {
                "k": 1,
                "patch": "decode(status, timeType.readUnsignedShort;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "decode(buf, offset, len;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 4,
                "patch": "decode(buf, offset, len);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "decode(status, timeType.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xFF;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf buf;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "decode(status, timeType.readUnsignedShort(-1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x03)",
                "identical": false
            },
            {
                "k": 11,
                "patch": "decode(status, timeType.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "decode(status, timeType.readUnsignedShort(status & ACCESS_MASK)",
                "identical": false
            },
            {
                "k": 13,
                "patch": "decode(status, timeType.readUnsignedShort(8);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x0000000)",
                "identical": false
            },
            {
                "k": 15,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf buf buf;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xFF) == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xFF) != 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "decode(status, timeType.readUnsignedShort)",
                "identical": false
            },
            {
                "k": 20,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf buf);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "decode(status, timeType.readUnsignedShortSize);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "decode(status, timeType.readUnsignedShort(b);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "decode(x0, buf.readUnsignedShort(status & 0x03)",
                "identical": false
            },
            {
                "k": 24,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x03)COMMA;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "decode(x0, buf.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 26,
                "patch": "decode(status, timeType.readUnsignedShortAdd);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "decode(status, timeType.readUnsignedShortDIVIDE_KEY);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "decode(status, timeType.readUnsignedShort(attributeCount);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "decode(status, timeType.readUnsignedShort(tokenLen);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "decode(status, timeType.readUnsignedShort(status & ACCESS_KEY)",
                "identical": false
            },
            {
                "k": 31,
                "patch": "decode(status, timeType.readUnsignedShortBOUNDS_FIELD_NAMES);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "decode(status, periodType.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 33,
                "patch": "decode(status, timeType.readUnsignedShort\";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "decode(status, timeType.readUnsignedShort[0]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "decode(status, timeType.readUnsignedShort(status)",
                "identical": false
            },
            {
                "k": 36,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf)",
                "identical": false
            },
            {
                "k": 37,
                "patch": "decode(status, timeType.readUnsignedShortVariant());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "decode(status, timeType.readUnsignedShort(status & bufpos;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "decode(status, buf;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "decode(status, timeType.readUnsignedShortMILLISECOND);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "decode(x0, buf.readUnsignedShort(status & 0x0000000)",
                "identical": false
            },
            {
                "k": 42,
                "patch": "decode(status, timeType.readUnsignedShort [JACKSON-1Type);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "decode(buf, timeType.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 44,
                "patch": "decode(buf, offset, len + buf.readUnsignedShort;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "decode(status, timeType.readUnsignedShort(status & bufpos)",
                "identical": false
            },
            {
                "k": 46,
                "patch": "decode(status, timeType.readUnsignedShort(status & bufpos);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x1f)",
                "identical": false
            },
            {
                "k": 48,
                "patch": "decode(status, timeType.readUnsignedShortDIVIDE_FIELD_NAMES);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "decode(status, timeType.readUnsignedShort [JACKSON-1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf bufpos;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "decode(status, timeType.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "decode(x0, buf.readUnsignedShort(status & 0x03)COMMA;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "decode(status, timeType.readUnsignedShort(accessor);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "decode(status, periodType.readUnsignedShort(status & buf buf;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "decode(status, timeType.readUnsignedShort(),",
                "identical": false
            },
            {
                "k": 56,
                "patch": "decode(status, timeValue.readUnsignedShort;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x00,",
                "identical": false
            },
            {
                "k": 58,
                "patch": "decode(status, timeType.readUnsignedShort(bld)",
                "identical": false
            },
            {
                "k": 59,
                "patch": "decode(status, timeValue.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 60,
                "patch": "decode(status, timeType.readUnsignedShortLayer);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "decode(status, timeType.readUnsignedShort(status & ACCESS_MASK) == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf buf)",
                "identical": false
            },
            {
                "k": 63,
                "patch": "decode(status, timeType.class)",
                "identical": false
            },
            {
                "k": 64,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x0000000);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "decode(status, timeType.readUnsignedShortnull);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "decode(status, timeValue.readUnsignedShort(status & buf buf;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "decode(x0, buf.readUnsignedShort(status & 0xFF,",
                "identical": false
            },
            {
                "k": 68,
                "patch": "decode(status, timeType.readUnsignedShortDIVIDE_FIELD_NAMES;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "decode(status, timeValue.readUnsignedShort(status & 0xFF;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "decode(status, timeType.readUnsignedShort before;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "decode(status, periodType.readUnsignedShort(status & buf;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "decode(status, timeType.readUnsignedShortSTRING);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "decode(status, enumType.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 76,
                "patch": "decode(buf, periodType.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "decode(status, timeType.readUnsignedShortARRAY",
                "identical": false
            },
            {
                "k": 78,
                "patch": "decode(status, timeType.readUnsignedShort [JACKSON-314]');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "decode(status, timeType.readUnsignedShort(timeZone);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "decode(status, timeType.readUnsignedShortReport)",
                "identical": false
            },
            {
                "k": 81,
                "patch": "decode(status, timeType.readUnsignedShortSize == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "decode(status, parameterType.readUnsignedShort(status & 0xFF)",
                "identical": false
            },
            {
                "k": 83,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x04)",
                "identical": false
            },
            {
                "k": 84,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xFF) == 0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "decode(status, timeType.readUnsignedShort(b & 0x03)COMMA;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "decode(status, timeType.readUnsignedShortVariant);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xC0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf bufpos)",
                "identical": false
            },
            {
                "k": 89,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf buf buf);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "decode(status, timeType.readUnsignedShortOTE_KEY);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf bufpos);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "decode(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "decode(status, periodType.readUnsignedShort(status & ACCESS_MASK)",
                "identical": false
            },
            {
                "k": 94,
                "patch": "decode(status, timeType.readUnsignedShort(b & 0x03)",
                "identical": false
            },
            {
                "k": 95,
                "patch": "decode(status, timeType.readUnsignedShortDEFAULT_KEY);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0xFF) != 0L;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "decode(status, periodType.readUnsignedShort(status & 0xFF;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "decode(status, timeType.readUnsignedShort(status & 0x00);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "decode(status, timeType.readUnsignedShort(b,",
                "identical": false
            },
            {
                "k": 100,
                "patch": "decode(status, timeType.readUnsignedShort(status & buf buf buf buf;",
                "identical": false
            }
        ],
        "buggy_line": "decodeStatus(position, buf.readUnsignedShort());",
        "fixed_line": "if (buf.readableBytes() >= 2) { decodeStatus(position, buf.readUnsignedShort()); }"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfdelegates != 0x+1) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfdelegates != 0x+1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfx4),",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfdelegates !=x+1) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfx2pper;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfdelegates != 0x+1) .group}",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfdelegates != 0x+1) .math quoting;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfx4fer\") .5) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfxom+\") .5)",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfx2Size+\") .5)",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfx3d;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfx2P3];",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfx2IST\") .5) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfdelegates != 0x+1) . DELETEDSTANDARD;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfx-1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfdelegates !=x+1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfxom+\") .5) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfx2P4),",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOfx4FINE_VALUE+\") .inject;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfdelegates != 0x+1) .group quoting;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] .5) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfx2 at",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfdelegates != 0x2long) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOfdelegates != 0x2negative) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfdelegates != 0x000000;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfdelegates !=x3) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfdelegates != 0x+1) . .group}",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfx2unitunitunitunit && adtright) .group;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfx3d",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] .5)",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberOfdelegates !=x1) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfx2long\") .5) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfx2 < 15) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfx2$\").x();",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfx4pper\" .5) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] != 0x .math.",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfdelegates != 0x+1) .create_DSTANDARD;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberOfx2pper+\") .defaultValues;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfdelegates != 0x+1) .OfValid;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfx[2];",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfx2long V MAX_LINE_LENGTH) .math;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfx2pper+\") .setAttribute",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberOfdelegates != 0x){",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfx2unitunitunitunit && sz <= 0x4);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfx4fer\") .5)",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfdelegates !=x3) .group}",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] != 0x000000;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfx2longEnd+\") .5)",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfdelegates != 0x+1) .linesVisible;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfdelegates != 0x2negative) .group}",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] != 0x+1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfdelegates != 0x+1) .math DEFAULT_BLOCK_SIZE",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfdelegates != 0x07;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfdelegates != 0x+1) .groupgence quoting;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfx3];",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfx2pper+\") .5) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfx2long V MAX_LINE_LENGTH) .OfValid;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfdelegates !=x3) .group",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfx31) .math_.",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfdelegates !=x2) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOfx2Size+\") .inject;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfdelegates != 0x+1) .create();",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfValid(x2ISTENT+\") .5)",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfdelegates != 0x+1) .Equals",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfdelegates != 0x+1) . DELETE DELETEDSTANDARD;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".numberOfx2hexix+\") .5) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfxom+\") .inject;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfdelegates != 0x2invocations",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfx31) .5) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfdelegates != 0x+1) .setAttribute",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfx2invocations(expression).first();",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfps().x+1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfx2pper+\") .inject;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfx2longCount+\") .5)",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfdelegates != 0x+1) .groupLeft",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfdelegates != 0x+1) . .math quoting;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOfx2long /= 2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfdelegates != 0x+1) . DELETE(0, // .",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfx2long && adt+\") .5)",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOfx2invocations(expression).first;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfdelegates != 0x+1) .5) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] != 0x .math;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".numberOfdelegates != 0x+1 && // .group",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfdelegates != 0x+1) .group",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOfx4ferred_BLOCK_SIZE).x();",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfx2unitunitunitunit && adtright) .group}",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfdelegates != 0x2negative) .math;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfx4ferred_BLOCK_SIZE * 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfx2hexix+\") .setAttribute",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfx4ferred_BLOCK_SIZE] != 0x5) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfquad1 != 0x000000;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfdelegates != 0x+1) .infer();",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfdelegates != 0x+1) .setAttribute // .",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfx3 = sz+\") .5)",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfdelegates !=x1) .group}",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfx2ReturnValue+\") .5)",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfx2unitunitunitunit && sz < 2) .group}",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfx2Size+\") .setAttribute",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfdelegates != 0x+1) .quarter;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOfdelegates != 0x+1) .Crosshend;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\") // power",
        "fixed_line": ".number(\"(x+)?,\") // power"
    },
    "Bears-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new InnerClassDeserializer((type, deser) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new BeanPropertyDeserializer(type, deser) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new InnerClassDeserializer((type, deser);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new InnerClassDeserializer(type, deser) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new InnerClassDeserializer(type, deser);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new InnerClassDeserializer((ient, deser) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new InnerClassDeserializer(deserClass, _typeProperty;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new BeanPropertyDeserializer((type, deser) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new BeanPropertyDeserializer(type, deser);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new InnerClassDeserializer((deserClass, _typeProperty;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new InnerClassDeserializer((type, deser) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new BeanPropertyDeserializer(this, deser) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new BeanPropertyDefinition(type, deser) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new BeanPropertyDeserializer( tail, deser) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new BeanPropertyDeserializer( tail, deser);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "@PropertyDeserializer<?> deserClassClassClass;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new BeanPropertyDefinition(deserClass, deser) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new BeanPropertyDeserializer((prop, deser) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new InnerClassDeserializerFactory(\"\", deserClass, new BeanPropertyDefinition(deser) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new InnerClassDeserializer((deserClass, _annotationIntrospector) { return new BeanProperty; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new BeanPropertyDeserializer() { return _valueTypeDeserializer; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new BeanProperty.StdDeserializer(deser) { return _valueTypeDeserializer; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new BeanPropertyDeserializer((propprop, deser) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new BeanPropertyDeserializer(( tail, deser);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "@PropertyDeserializer<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new InnerClassDeserializer(deserClass, _valueTypeDeserializer) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new BeanPropertyDeserializer(deserClass, _valueTypeDeserializer) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new InnerClassDeserializer((deserClass, _valueTypeDeserializer) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new InnerClassDeserializer((type, deser);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new BeanPropertyDeserializer(( tail, deser) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new InnerClassDeserializer((transtransPropertyProperty) { return _valueTypeDeserializer; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "@JsonDeserializer<?> deserClassClass = new InnerValueDeserializer(deserClass, _typeProperty;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new InnerClassDeserializerDeserializer<?> deserClassClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new BeanPropertyDeserializer(serializer, deser) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new InnerClassDeserializer((type, deserClass) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new InnerClassDeserializer(type, deser) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new BeanPropertyDeserializer((type, deser);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new InnerClassDeserializer((deserClass, _annotationIntrospectorspector) { return new BeanProperty; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new BeanPropertyDeserializer(type, deser) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new InnerClassDeserializer((ient, deser);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new BeanPropertyDeserializerClass<?> deserClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "@JsonDeserializer<?> deserClassClass = new BeanPropertyDefinition(type, deser);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new BeanPropertyDeserializerClass<?> deserClassClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new BeanPropertyDeserializerClass<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new InnerClassDeserializer(type, deserClass) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "@JsonDeserializer<?> deserClassClassClass = new BeanPropertyDefinition(type, deser);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "@JsonDeserializer<?> deserClassClassClassClass { return _typeProperty; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new BeanPropertyDeserializerDeserializerClassClass<?> deserClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new InnerClassDeserializer((deserClass, _annotationIntrospector) { return new BeanProperty;; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new BeanPropertyDeserializerClass<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new InnerClassDeserializer((type, deserClass) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new BeanPropertyDeserializerDeserializerClassClass<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new InnerClassDeserializerDeserializer<?> deserClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "@JsonDeserializer<?> deserClassClass = _valueDeserializer;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "@JsonDeserializer<?> deserClassClass = _typeDeserializer;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "@JsonDeserializer<?> deserClassClassClass;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new InnerClassDeserializer((transtransPropertyProperty, deser) { return _valueTypeDeserializer; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new InnerClassDeserializer((..class, deserClass);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new BeanPropertyDeserializer( tail tail, deser) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "@JsonDeserializer<?> deserClassClassClass { return _typeProperty; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new InnerClassDeserializer((deserClass, _valueTypeDeserializer;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new InnerClassDeserializerDeserializer<?> deserClassClassClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "@JsonDeserializer<?> deserClassClassClassClassClass { return _typeProperty; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new BeanPropertyDeserializerClass<?> deserClassClassClass;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new InnerClassClassDeserializer((type, deser) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new InnerClassDeserializer(deserClass, _typePropertyHandler) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new InnerClassDeserializer((transtransPropertyProperty) { return _valueTypeDeserializer;; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new InnerClassDeserializer((transtransPropertyProperty, deser) { return _valueTypeDeserializer;; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new BeanPropertyDeserializer() { return _valueTypeDeserializer;; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "@JsonDeserializer<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new InnerClassDeserializer(deserClass, _valueTypeDeserializer;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "@JsonDeserializer<?> deserClassClassClassClass((deserClass, _valueTypeDeserializer) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new InnerClassClassDeserializer((type, deser);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "@JsonDeserializer<?> deserClassClassClassClass = new BeanPropertyDefinition(type, deser);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new BeanProperty.StdDeserializer(deser) { return new BeanProperty; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new InnerClassDeserializer((type, deser) { return _valueTypeDeserializer; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new InnerClassDeserializerFactory(\"\", deserClass, new BeanPropertyHandler(deser) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new InnerClassDeserializer((deserClass, _valueTypeDeserializer) { return new BeanProperty; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new InnerClassDeserializerFactory(\"\", deserClass, new BeanPropertyTypeDeserializer(deser) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new InnerClassDeserializer(type, deserClass) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new InnerClassDeserializer((..class, deserClass) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new InnerClassDeserializer(deserClass, _valueTypeDeserializer(deser) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new InnerClassDeserializer((deserClass, _annotationIntrospectorspector) { return new BeanProperty;; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "@JsonDeserializer<?> deserClassClassClassClassClassClass { return _typeProperty; }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClass;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new BeanProperty.StdDeserializer(deser) { return _valueTypeDeserializer;; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new BeanPropertyDeserializerClass<?> deserClassClassClassClassClass;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new InnerClassDeserializer((transtransPropertyProperty, deser) { return _valueTypeDeserializer;;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new InnerClassDeserializerDeserializer<?> deserClassClassClassClass;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new InnerClassDeserializer(type, deser);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "@JsonDeserializer<?> deserClassClassClass = _valueDeserializer;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new InnerClassDeserializer((transtransPropertyProperty) { return new BeanProperty; }",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new BeanPropertyDeserializerDeserializerClass<?> deserClassClassClass;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new BeanPropertyDeserializer(propprop, deser) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public void assignIndex(int index) { _delegate.assignIndex(index); } @Override public int getPropertyIndex() { return _delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return _delegate.getCreatorIndex(); }"
    },
    "Bears-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "types, _referencedType != null && _referencedType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referencedType;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "//get Do ever NOTHARD && _referencedType != _referencedType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "//get Doar && _referencedType != _referencedType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "//get Do ever NOTHING_constructors.length != _referenced && oType != _referencedType) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _referencedType) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _referencedType != null && _referencedType.equals(o).getSelfReferencedType();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _valueType) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "// dataIntrospector NOT suppressNulls && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "types, _referencedType != null && _referencedType.equals(o).getSelfReferencedTypeArguments() {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "//get Do ever NOTHING_constructors.length != _referenced && oType != _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfReferencedTypeArguments() {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "//get Do ever NOTHARD && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "//get Do ever NOTHING_NAME == _referenced && _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "//get Do ever NOTHING_ % 2 != 0 && _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _referencedType != null && _referencedType.equals(o).getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "// o Do NOTar && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType != _referencedType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "types, _referencedType != null && _referencedType.equals(o).getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Name NOT = _referencedType.equals(oir) && _referencedType == _referenced;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _referencedType != null && _referencedType.equals(o).getSelfReferencedTypeArgumentsReferenced;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Name NOT = _referenced && _referencedType.equals(o).getSelfReferencedType();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "//get Do ever NOTHING_constructors.length != _referenced && oType == _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "//get Doar && _referencedType != _referencedType.equals(o).getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedTypeArguments() {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "// node, NOTHING_constructors.equals(_referencedType) && _referencedType == _referencedType;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "// o Do NOT using && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Name NOT = _referencedType.equals(oir) && _referencedType != _referenced;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "//get Do ever NOTHING_FIRST.length != _referenced && oType != _referencedType) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "//get Do ever NOTHING_FIRST.length != 0 && _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfReferencedTypeArguments()",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Name NOT = _referenced && _referencedType.equals(o).getSelfReferencedTypeArgumentsReferenced;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "// o Do NOTArrays && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "//get Do ever NOTHING_constructors.length != _referenced && oType != _referenced) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _defaultType != null && _referencedType.equals(o).getSelfReferencedType();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "// o Do NOT suppressNulls && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "//get Do ever NOTHING_\", oType == _referenced && oType.getSelfType != _referenced) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "//get Doar && _referencedType != _referenced && oType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "//get Do ever NOTHING_\", oType == _referenced && o.getSelfType != _referenced) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "//get Doar && _referencedType != _referencedType.equals(o).getSelfReferencedTypeArguments() {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _referencedType != null && _referencedType.equals(o).getSelfReferencedType != _referenced;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "//get Do ever NOTHING_constructors.length != _referenced && oType == _referencedType;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "//get Do ever NOTHING_constructors.length != 0 && _referencedType != _referencedType) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _sig != 0 && _referencedType.equals(o).getSelfReferencedTypeArgumentsReferenced;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _canRemove) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Name NOT = _referencedType.equals(oir) && _referencedType.getSelfReferencedType != _referenced;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "//get Do ever NOTHARD && _referencedType != _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == o;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "//get Doar && _referencedType != _referenced && oType.equals(_referencedType)",
                "identical": false
            },
            {
                "k": 57,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfType() {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced && _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _valueType != null && _referencedType.equals(o).getSelfReferencedType();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "//get Doar && _referencedType != _referenced && f.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "//get Do ever NOTHING_constructors.length != _referenced && oType != _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "//get Doar && _referencedType != _referenced && oType.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced && o.getSelfType != _referenced) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "//get Do ever NOTHING_constructors.length != 0 && _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "// dataIntrospector NOT suppressNulls && _referencedType != _referenced && o.getSelfReferencedType != _referencedType) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _propertyName.equals(o);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _referencedType != null && _referencedType.equals(o).getSelfReferencedTypeArguments()",
                "identical": false
            },
            {
                "k": 70,
                "patch": "// node, NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _propertyName.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _defaultType != null && _referencedType.equals(o).getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "//get Doar && _referencedType == _referenced && _referencedType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "//get Doar && _referencedType == _referenced && _referencedType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced && oType.equals(o);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Name NOT = _referencedType.equals(oir) && _referencedType.getSelfReferencedTypeArguments() == _referenced;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced && o.getSelfType != _referenced)",
                "identical": false
            },
            {
                "k": 79,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced && _referencedType;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "// o Do NOTArrays && _referencedType != _referencedType.equals(o).getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _referencedType;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _valueType;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "//get Doar && _referencedType != _referenced && o.getSelfReferencedType != _referenced)",
                "identical": false
            },
            {
                "k": 85,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType != 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "// running NOTHARD && _referencedType != _referenced && o.getSelfReferencedType != _referenced) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) && _referencedType == _referenced && oType.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "//get Do ever NOTHING_constructors.length != _referencedType.getSelfReferencedType(o).getSelfType);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "//get Do ever NOTHARD && _referencedType != _referencedType.getSelfReferencedType) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _referencedType.getClass() && _referencedType != o.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "//get Do ever NOTHARD && _referencedType != _referenced && o.getSelfReferencedType != _referencedType) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _valueType != null && _referencedType.equals(o).getSelfReferencedType() {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "//get Doar && _referencedType != _referenced && _referencedType.equals(o).getSelfTypeArguments() {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "//get Do ever NOTHING_ % 2 != 0 && _referencedType.equals(_referencedType) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "//get Do ever NOTHING_constructors.equals(_referencedType) return _referencedType;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "//get Do ever NOTHARD && _referencedType != _referenced && o.getSelfReferencedType != _propertyName.equals(o).getSelfType);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _valueType != null && _referencedType.equals(o).getSelfReferencedTypeArgumentsReferenced;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _sig != 0 && _referencedType.equals(o).getSelfReferencedType();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _referencedType.getClass() == 0 && _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "//get Do ever NOTHING_FIRST.equals(_referencedType) && _referencedType == _referencedType;",
                "identical": false
            }
        ],
        "buggy_line": "// Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
        "fixed_line": "if (o.getClass() == getClass()) { // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since // there is likely to be a cycle... // but... true or false? return false; /* // Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); */ } return false;"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setPosition(i + 1, index[index],], 16;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setPosition(i + 1, index[index], 16;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setPosition(i + 1, index[index], Short.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setPosition(i + 1, index[i], Short.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition(i + 1, index++) * 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setPosition(i + 1, index[index], 2 * 0.0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setPosition[index + i - 1] * Short.parseShort;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setPosition[index + i - 1] * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setPosition(i + 1, index++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setPosition(i + 1, index[index], ObjectType;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setPosition(i + 1, index[i], Short.MIN_VALUE,",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setPosition(i + 1, index[index],ifyType.length - 1];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setPosition(i + 1, index[index], Short.BASE64_VALUE_PADDING",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setPosition(i + 1, position.data[index + i++) * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setPosition(i + 1, index[index],],ifyType.length - 1];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setPosition(i + 1, index[data],], 16;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setPosition(i + 1, index[index], Short.parseShort;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setPosition(i + 1, index[index], Short.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition(i + 1, index[[index], Short.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++index;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setPosition(i + 1, position.data[index], position + i++) * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setPosition(i + 1, position.data[index], position + i++) * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + 2 *Typed;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setPosition(i + 1, index[index],],], 16;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setPosition(i + 1, index[index], && 16;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort[index], position;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setPosition(i + 1, index[index], len + 1];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setPosition(i + 1, yy[index], 16;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++) * 16;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++index;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort[index], position;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setPosition(i + 1, position.data[index + i++) * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + 2 *Typed;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++index;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++index;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setPosition(i++) + 1, index[index], 16;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setPosition(i + 1, index[i], Short.MIN_VALUE) - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setPosition(i + 1, index[[index], 16;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++index;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setPosition(i + 1, position.data[index + i++) * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setPosition(i + 1, index[index],], Short.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setPosition(i + 1, index[index],], && 16;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i - 1];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setPosition(i + 1, position.data[index][i], index + i++index;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setPosition(i + 1, index[index], position + 2 * 0.0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * DateTimeConstants.MILLIS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setPosition(i + 1, index[i], Short.MIN_VALUE);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + 2 *Typed;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++) * 16;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++) * 16;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setPosition(i + 1, index[i], 16;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * DateTimeConstants.MILLIS_PER_DAY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setPosition(i + 1, index[index], Short.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setPosition(i + 1, index[i],], 16;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], 0, i++) * 16;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setPosition(i + 1, index[index], Short.MIN_VALUE) - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * DateTimeConstants.MILLIS_PER_HOUR;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort[index],], position;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++) * 2;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setPosition[index + i], Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setPosition(i + 1, position.data[index][j++], index + i++index;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setPosition(i + 1, index[index],], ObjectType;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort[index],], position;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index],], position + i++index;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i - 1];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setPosition(i + 1, index[data], 16;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setPosition(i + 1, 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setPosition(i + 1, position.data[index], type, index + i++) * 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setPosition(i + 1, values[index], // data[index++], 16;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setPosition(i + 1, position.data[index][i], index + i++index;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setPosition(i + 1, values[index], 16;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setPosition(i + 1, index[i],], Short.MIN_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.MIN_VALUE, index++index;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + i++) * Short.parseShort[index], 16;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], 0, i++) * 16;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++) * 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setPosition[index + i], Short.parseShort[index], position + 2 * 0.0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setPosition(i + 1, position.data[index][j++], index + i++) * 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setPosition(i + 1, position.data[index][j++], index + i++index;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++index;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + 2 * Short.parseShort;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], 0, i++index+1) = position + 2 * 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setPosition(i + 1, index[[index],], 16;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index],], position + i++index;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setPosition(i + 1, position.data[index], type[index + i - 1];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + 2 * 0.0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setPosition(i + 1, index[[index], Short.BASE64_VALUE_PADDING",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setPosition(i + 1, position.data[index], index + i++index;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setPosition(i + 1, index[index], Short.MIN_VALUE,",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], 0, i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], position + i++index;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], Short.parseShort[index], position + 2 * 0.0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setPosition(i + 1, position.data[index], type.parseShort[index], Short.parseShort[index], position + 2 *Typed;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-109": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setPosition(values, 0, values[index++]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setPosition(dateId, values[index++]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setPosition(dateFormat.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setPosition(values, values[index++]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition(values[index++], values[index++]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setPosition(date, values[index++]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setPosition(position, values[index++]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setPosition(values[index, values[index++]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setPosition(values[index++], dateFormat, values[index++]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setPosition(values, 0, values[index++] = new Simple[index++]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setPosition(values, index + 1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setPosition(dateId, values[index++]++]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setPosition(values, 0, values.length++index++]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setPosition(values, index++) && dateFormat[index++]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setPosition(values, begin, values[index++]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setPosition(values, 0, values[index++];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setPosition(values, index++index, values[index++]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setPosition(values[index][KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition(values, values[index++]++]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setPosition(values, index++) - values[index++]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setPosition(values, index++) -dateFormat[index++]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setPosition(values, index++) result[index++]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setPosition(datePosition.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setPosition(values, position, values[index++]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setPosition(values, index++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setPosition(values, index++) - dateFormat, values[index++]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setPosition(dateFormat.KEY_VERSION, values[index++]++]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setPosition(dateStr, values[index++]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setPosition(values, 0, values[index++] = dateFormatMethod[index++]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setPosition(values, index++)Exp_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setPosition(values, 0, values[index++] = dateFormatPosition[index++]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setPosition(values, index++) - data[index++]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setPosition(values, index++)[index++]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setPosition(global.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setPosition( values[index++], values[index++]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setPosition(values, 0, values[index++] = 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setPosition(values, index[index++]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setPosition(values, denominator++index, values[index++]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setPosition(values, index++) Check_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setPosition(dateId, values[index++];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setPosition(date, values[index++]++]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setPosition(style, values[index++]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setPosition(values, index++_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setPosition(values, 0, values.length++index++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setPosition(values, 0, values.length++index++] = new Simple[index++]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setPosition(date.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setPosition(values, begin, length++index++] = new Simple[index++]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setPosition(dateStr, position[index++]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setPosition(values, ptr, values[index++]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setPosition(values[index], dateFormat, values[index++]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setPosition(values, values[index++]++) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setPosition(values, off++index, values[index++]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setPosition(pattern.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setPosition(datePosition, values[index++]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setPosition(values, begin, length++index++]++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setPosition(values, index++)8[index++]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setPosition(values, 0, values[index++] = data[index++]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setPosition(bucket.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setPosition(values, index++) - 1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setPosition(values, index++) result[1][index++]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setPosition(values, index++) mapPosition[index++]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setPosition(values, 0, values[index++] = transitions[index++]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setPosition(values, values[index++], new Simple[index++]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setPosition(values, i++index, values[index++]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setPosition(dateMode, values[index++]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setPosition(values, index++)Use[index++]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setPosition(values, 0, values[index++] = position;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setPosition(values, values[index++]relativePosition[index++]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setPosition(values, values[index++]relativePosition, new Simple[index++]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setPosition(originalPosition, values[index++]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setPosition(values, begin, length++index++ ){",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setPosition(values, values[index++] = dateFormatMethod[index++]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setPosition( values[index, values[index++]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setPosition(values, 0, values[index++] = dateFormat;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setPosition(values, 0, values.length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setPosition(values, index++) && dateFormat[index++] <= MAX_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setPosition(MIN_VALUE, values[index++]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setPosition(position, values[index++]++]);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setPosition(values, begin, length++index++]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.setPosition(values, values[index++] = dateFormatPosition[index++]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setPosition(values, 0, values.length++index++ ){",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setPosition(dateFormat.KEY_VERSION, values[index++];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setPosition(values, 0, values[index++] = names[index++]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setPosition(values, index++) checked[index++]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setPosition(values, 0, values[index++]++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setPosition(values, index++) -15[index++]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setPosition(values, 0, values[index++]++]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setPosition(RY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition(values, values[index++]Id++]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setPosition(values, 0, values[index++] =toolTipTextPosition[index++]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setPosition(values, 0, values[index++] = new Simple[index++];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setPosition(values, begin, position++index++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setPosition(values, begin, length++index++index++]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setPosition(values, begin, length++index++index++] = new Simple[index++]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setPosition(values, 0, values[index++] = p.new Simple[index++]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setPosition(values, 0, values[index++] = dateFormat, reference);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setPosition(values, basePosition[index++]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setPosition(LONG_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setPosition(values, 0, values[index++] = attributes[index++]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setPosition(values, 0, values[index++] = text[index++]);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.KEY_VERSION_FW, values[index++]);",
        "fixed_line": "if (!type.equals(\"Alert\") || protocolType == 0) { position.set(Position.KEY_VERSION_FW, values[index++]); }"
    }
}